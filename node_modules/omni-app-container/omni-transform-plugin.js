/* eslint-disable */
import MagicString from 'magic-string';
import { walk } from 'estree-walker';
/* eslint-enable */

/**
 * Rollup plugin to transform javascript import declarations to instead pull
 * from window.dependencies. This is needed when running within portal to avoid
 * duplicating packages (namely omni-ui).
 *
 * We replace code that looks like:
 *
 *   import {a, b, c as whatever} from 'omni-ui';
 *
 * With:
 *
 *   const {a, b, c: whatever} = omni.dependencies['omni-ui'];
 */
function tranformOmniUiImport(code, path, packages) {
  let changed = false;

  if (path.endsWith('.js')) {
    const ast = this.parse(code); // Parse to AST with acorn from rollup
    const magicString = new MagicString(code);

    walk(ast, {
      enter(node) {
        // Look for import declarations with specifiers of the form:
        //   import { specifiers } from package;
        if (node.type === 'ImportDeclaration' && node.specifiers?.length) {
          // Get package source (ignore any path prefix)
          const packageName = node.source.value.split(/.*[/]/).pop();
          if (packages.includes(packageName)) {
            const exports = node.specifiers
              .map(spec =>
                spec.imported.name === spec.local.name
                  ? spec.imported.name
                  : `${spec.imported.name}: ${spec.local.name}`
              )
              .join(', ');
            magicString.overwrite(
              node.start,
              node.end,
              `const {${exports}} = omni.dependencies['${packageName}'];`
            );
            changed = true;
          }
        }
      },
    });

    if (changed) return magicString.toString();
  }
  return null;
}

export const rollup = ({ packages = ['omni-ui'] }) => {
  function inner(...args) {
    return tranformOmniUiImport.call(this, ...args, packages);
  }

  return {
    name: 'rollup-plugin-omni-transform',
    transform: inner,
  };
};

export default rollup;
