import 'construct-style-sheets-polyfill';

import {
  html,
  css,
  classMap,
  OmniElement,
  OmniStyleElement,
  OmniSwitchElement,
  OmniTileElement,
  OmniIconElement,
  OmniContextProviderElement,
} from 'omni-ui';
import { Router } from '@vaadin/router';

import { SessionCache } from './helpers/session-cache.js';
import {
  envFromHostname,
  userHasRole,
  isIframe,
  isLocal,
  jwtExpirationMs,
} from './helpers/utils.js';

import './components/omni-app-container-header.js';
import './components/omni-app-container-drawer.js';

OmniIconElement.register();
OmniTileElement.register();
OmniSwitchElement.register();
OmniStyleElement.register();
OmniContextProviderElement.register();

export class OmniAppContainer extends OmniElement {
  static get properties() {
    return {
      env: { type: String },
      token: { type: String },
      readonly: { type: Boolean },
      activeClient: { type: String },
      drawerOpen: { type: Boolean },
      profile: { type: Object },
      ANsid: { type: String },
      context: { type: Object },
      component: { type: String },
      appName: { type: String },
      router: { type: Object },
      resourceKey: { type: String },
      roles: { type: Array },
      hideDrawer: { type: Boolean, reflect: true },
      hideHeader: { type: Boolean, reflect: true },
      hideDrawerDefault: { type: Boolean },
    };
  }

  static get styles() {
    return [
      super.styles,
      css`
        :host([hideDrawer]) omni-app-layout::part(drawer),
        :host([hideHeader]) omni-app-layout::part(header) {
          visibility: 0;
          pointer-events: none;
          z-index: -10;
        }
        :host([hideDrawer]) omni-app-layout {
          --omni-app-layout-drawer-closed-width: 0px;
          --omni-app-layout-drawer-width: 0px;
        }
        :host omni-app-layout {
          --omni-app-layout-header-height: 50px;
        }
        :host([hideHeader]) omni-app-layout {
          --omni-app-layout-header-height: 0px;
        }
        :host > omni-style {
          min-height: 100vh;
        }
        :host > omni-style,
        main,
        dummy {
          flex-grow: 1;
          display: flex;
          flex-direction: column;
        }
        #settings .field {
          display: block;
          width: 250px;
        }
        footer {
          bottom: 15px;
          position: fixed;
          transition: transform 0.3s ease-in-out 0s;
          left: 15px;
        }
        .drawer-open footer {
          transform: translateX(
            calc(var(--omni-app-layout-drawer-width, 300px) - 75px)
          );
        }
        .omni code {
          padding: 0;
        }
        omni-icon {
          vertical-align: text-bottom;
        }
        /* Hide the slot if routing added a component */
        main slot:not(:last-child) {
          display: none;
        }
        /* Hide icon in loading button */
        button.is-loading omni-icon {
          display: none;
        }
        .is-full-screen-centered {
          display: flex;
          justify-content: center;
          align-items: center;
          text-align: center;
          height: calc(100vh - var(--omni-app-layout-header-height));
        }
      `,
    ];
  }

  constructor() {
    super();
    this.drawerOpen = false;
    this.readonly = false;
    this.appName = 'app';
    this.hideHeader = isIframe;
    this.hideDrawer = isIframe || !isLocal;
    this.session = new SessionCache();

    this.session.addEventListener('cache-change', () => {
      this.ANsid = this.session.ANsid;
      this.env = this.session.env ?? this.env;
      this.profile = this.session.profile;
      this.activeClient = this.session.activeClientUuid;

      // Set token if undefined or defined and won't expire for at least 10 minutes
      if (!this.token || jwtExpirationMs(this.token) > 600000) {
        this.token = this.session.token;
      }
    });
  }

  firstUpdated() {
    // We can't start using the session cache until we check to see if the url has
    // the client parameter defined. It can be in the path or in a search param.
    const parts = window.location.pathname.split('/');
    const clientParam = new URLSearchParams(window.location.search).get(
      'clientid'
    );
    if (clientParam) {
      // Remove the consumed search param from url
      const url = new URL(window.location);
      url.searchParams.delete('clientid');
      // If url has a client id in both path & search, update url appropriately
      if (parts[1]) {
        parts[1] = clientParam;
        url.pathname = parts.join('/');
      }
      window.history.pushState(null, '', url);
      window.dispatchEvent(new PopStateEvent('popstate'));
    }

    const urlClient = clientParam ?? parts[1];
    const urlEnv = envFromHostname(); // undefined if local
    this.session.init(urlEnv, urlClient, this.resourceKey);
  }

  get routeName() {
    return this.appName.toLowerCase().replaceAll(' ', '-');
  }

  get baseURL() {
    return `/${this.activeClient}/${this.routeName}`;
  }

  updated(changedProperties) {
    // At least one of the properties changed and all of them are defined.
    const changed = (...props) =>
      props.some(prop => changedProperties.has(prop)) &&
      props.every(prop => this[prop] !== undefined);

    if (changed('component', 'env', 'activeClient')) {
      const componentEl = customElements.get(this.component);
      let componentRoutes = componentEl?.routes ?? [];
      if (typeof componentRoutes === 'function') {
        // The component's static routes can either be an array or a function that
        // returns an array given the base url as an argument.
        componentRoutes = componentRoutes(this.baseURL);
      }
      this.hideDrawer = componentEl.hideDrawer ?? (isIframe || !isLocal);
      this.hideHeader = componentEl.hideHeader ?? isIframe;

      if (!this.router) {
        const outlet = this.shadowRoot.querySelector('main');
        this.router = new Router(outlet);
      }

      this.router.setRoutes([
        {
          path: '/',
          redirect: this.baseURL,
        },
        {
          path: `/:client/${this.routeName}`,
          component: this.component,
          children: componentRoutes,
        },
      ]);

      if (
        changedProperties.get('activeClient') ||
        changedProperties.get('env')
      ) {
        // If changing the client or env after initial load, we need to reset the url
        Router.go(this.baseURL);
      }
    }

    if (
      changed('readonly', 'token', 'env', 'activeClient', 'ANsid', 'profile')
    ) {
      // If there are additions to context, update omni-app-container-mixin contextKeys
      this.context = {
        ...this.context,
        readonly: this.readonly,
        env: this.env,
        token: this.token,
        clientId: this.activeClient,
        ANsid: this.ANsid,
        profile: this.profile,
        router: this.router,
      };
    }
  }

  navigateTo({ url }) {
    let absoluteURL;
    if (url.startsWith('/')) absoluteURL = url;
    else if (url === '') absoluteURL = this.baseURL;
    else absoluteURL = `${this.baseURL}/${url}`;

    if (window.location.pathname !== absoluteURL) Router.go(absoluteURL);
  }

  render() {
    let authorized = true;
    if (this.token && this.resourceKey && this.roles?.length > 0) {
      authorized = userHasRole(this.token, this.resourceKey, this.roles);
    }

    return html`
      <omni-style
        @omni-router-navigate-to=${e => {
          this.navigateTo(e.detail);
        }}
      >
        <omni-context-provider .value=${this.context}>
          <omni-app-layout .drawerOpen=${this.drawerOpen}>
            <header slot="header">
              <omni-app-container-header
                .activeEnv=${this.env}
                .activeClient=${this.activeClient}
                .profile=${this.profile}
                .context=${this.context}
                .session=${this.session}
              ></omni-app-container-header>
            </header>
            <content>
              ${authorized
                ? html`
                    <main>
                      <!-- This slot is hidden once routing kicks in, but can be used for placeholder content -->
                      <slot></slot>
                    </main>
                  `
                : html`<div class="is-full-screen-centered is-size-3">
                    Unauthorized. Contact support for access.
                  </div>`}
            </content>
            <nav
              slot="drawer"
              class=${this.drawerOpen ? 'drawer-open' : 'drawer-closed'}
            >
              <slot name="app-drawer">
                <omni-app-container-drawer
                  .drawerOpen=${this.drawerOpen}
                  .activeClient=${this.activeClient}
                  .session=${this.session}
                  .context=${this.context}
                  @context-change=${e => {
                    const { key, value } = e.detail;
                    if (['readonly', 'env'].includes(key)) {
                      this[key] = value;
                    }
                  }}
                >
                  <slot name="app-drawer-start" slot="app-drawer-start"></slot>
                  <slot
                    name="app-drawer-start-closed"
                    slot="app-drawer-start-closed"
                  ></slot>
                  ${this.hideDrawerDefault
                    ? // This needs to be conditional or else the slot will always replace
                      // the dev drawer contents.
                      html`
                        <div slot="app-drawer-default"></div>
                        <div slot="app-drawer-default-closed"></div>
                      `
                    : ''}
                  <slot name="app-drawer-end" slot="app-drawer-end"></slot>
                  <slot
                    name="app-drawer-end-closed"
                    slot="app-drawer-end-closed"
                  ></slot>
                </omni-app-container-drawer>
              </slot>
              <footer>
                <button
                  class="button is-primary ${classMap({
                    'is-loading': !this.context,
                  })}"
                  @click=${() => {
                    this.drawerOpen = !this.drawerOpen;
                  }}
                >
                  <omni-icon
                    class="is-size-1"
                    icon-id="omni:interactive:${this.drawerOpen
                      ? 'left'
                      : 'right'}"
                  ></omni-icon>
                </button>
              </footer>
            </nav>
          </omni-app-layout>
        </omni-context-provider>
      </omni-style>
    `;
  }
}

OmniElement.register('omni-app-container', OmniAppContainer);
