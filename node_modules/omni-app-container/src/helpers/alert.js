import {
  OmniElement,
  OmniStyleElement,
  OmniIconElement,
  html,
  css,
} from 'omni-ui';

OmniStyleElement.register();
OmniIconElement.register();

/* A replacement for window.alert() using an omni modal with appropriate color
 * and icon. Supports multiple types: 'info', 'success', 'warning', 'danger'.
 * 'danger' is the default.
 */

const getElem = () => {
  let elem = document.querySelector('omni-alert');
  if (!elem) {
    elem = document.createElement('omni-alert');
    document.body.appendChild(elem);
  }
  return elem;
};

export const omnialert = (
  message,
  { type = 'danger', styling = '', close, closeTimeout } = {}
) => {
  const elem = getElem();
  elem.dispatchEvent(
    new CustomEvent('omnialert', {
      detail: { message, close, type, styling, closeTimeout },
    })
  );
};

export const omniconfirm = (
  message,
  { callback, close, closeTimeout, type = 'primary', title = 'Confirm' } = {}
) => {
  const elem = getElem();
  elem.dispatchEvent(
    new CustomEvent('omnialert', {
      detail: { message, callback, close, type, title, closeTimeout },
    })
  );
};

export default class OmniAlert extends OmniElement {
  constructor() {
    super();
    this.isOpen = false;
    this.type = undefined; // info, success, warning, danger
    this.message = '';
    this.styling = '';
    this.title = '';
    this.addEventListener('omnialert', e => {
      this.message = e.detail.message;
      this.type = e.detail.type;
      this.callback = e.detail.callback;
      this.styling = e.detail.styling || '';
      this.title = e.detail.title;
      this.close = e.detail.close;
      this.closeTimeout = e.detail.closeTimeout;
      this.isOpen = true;
      if (this.closeTimeout) {
        setTimeout(() => this.closeModal(), this.closeTimeout);
      }
    });
  }

  static get properties() {
    return {
      isOpen: { type: Boolean },
      type: { type: String },
      message: { type: String },
      title: { type: String },
      callback: { attribute: false },
      close: { attribute: false },
    };
  }

  static get styles() {
    return [
      super.styles,
      css`
        /* Try to avoid weird bug in firefox with transform-style: preserve-3d */
        @-moz-document url-prefix() {
          .omni .button {
            transform-style: unset !important;
          }

          .omni .button.is-outlined::before {
            background-image: none !important;
          }

          .omni .button.is-link.is-outlined.is-focused,
          .omni .button.is-link.is-outlined.is-hovered,
          .omni .button.is-link.is-outlined:focus,
          .omni .button.is-link.is-outlined:hover {
            background-color: var(--color-electric-blue) !important;
          }
        }
      `,
    ];
  }

  static register(name = 'omni-alert') {
    return super.register(name, OmniAlert);
  }

  iconId() {
    return {
      info: 'omni:informative:info',
      success: 'omni:informative:success',
      warning: 'omni:informative:alert',
      danger: 'omni:informative:error',
    }[this.type];
  }

  closeModal() {
    this.isOpen = false;
    if (this.close) this.close();
  }

  renderMessage() {
    return html`
      <div class="modal-content">
        <div class="modal-content">
          <article class="message is-${this.type}">
            <div class="message-header">
              <p>
                <omni-icon icon-id=${this.iconId()}></omni-icon>
                ${this.title}
              </p>
            </div>
            <div class="message-body" style="${this.styling}">
              ${this.message}
            </div>
            <div class="message-footer">
              <div class="field is-grouped is-grouped-right">
                <div class="control">
                  <button
                    class="button is-text is-${this.type}"
                    @click=${() => {
                      this.closeModal();
                    }}
                  >
                    Cancel
                  </button>
                </div>
                <div class="control">
                  <button
                    class="button is-outlined is-${this.type}"
                    @click=${() => {
                      this.closeModal();
                      this.callback();
                    }}
                  >
                    Ok
                  </button>
                </div>
              </div>
            </div>
          </article>
        </div>
      </div>
    `;
  }

  renderNotification() {
    return html` <div class="modal-content">
      <article class="notification is-${this.type}">
        <omni-icon icon-id=${this.iconId()}></omni-icon>
        <button
          class="delete"
          aria-label="delete"
          @click=${() => {
            this.closeModal();
          }}
        ></button>
        <span style="${this.styling}">${this.message}</span>
      </article>
    </div>`;
  }

  render() {
    if (!this.isOpen) return '';

    return html`
      <omni-style>
        <div class="modal is-active">
          <div
            class="modal-background"
            aria-label="close"
            @keyup=${e => {
              if (e.key === 'Escape') {
                this.closeModal();
              }
            }}
            @click=${() => {
              this.closeModal();
            }}></div>
            ${this.callback ? this.renderMessage() : this.renderNotification()}
          </div>
        </div>
      </omni-style>
    `;
  }
}

OmniAlert.register();
