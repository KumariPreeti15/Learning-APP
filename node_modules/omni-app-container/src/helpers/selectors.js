/**
 * Property selectors, maps and normalizations
 */

/* eslint-disable no-param-reassign */
export function selectBucketedClients(clients = []) {
  return clients
    .reduce((acc, curr) => {
      // Client has no parent, add it to the list of clients
      if (!curr.clientIdParent) return [...acc, curr];

      // Client has a parent, add it under the parent client
      const parentIndex = acc.findIndex(
        client => client.clientId === curr.clientIdParent
      );

      // If the parent object already exists, append client to parent's list of children
      if (parentIndex > -1) {
        acc[parentIndex].children = [...acc[parentIndex].children, curr];
        return acc;
      }

      // If the parent object does not exist, create a new parent with client as its child
      return [
        ...acc,
        {
          clientId: curr.clientIdParent,
          orgName: curr.clientNameParent,
          children: [curr],
        },
      ];
    }, [])
    .sort((a, b) => {
      const nameA = a.orgName.toUpperCase();
      const nameB = b.orgName.toUpperCase();
      if (nameA < nameB) return -1;
      if (nameA > nameB) return 1;
      return 0;
    });
}
/* eslint-enable no-param-reassign */
