import {
  html,
  css,
  OmniElement,
  OmniStyleElement,
  OmniSwitchElement,
  OmniTileElement,
  OmniIconElement,
} from 'omni-ui';
import { omnialert } from '../helpers/alert.js';
import { envHasCorsError } from '../helpers/utils.js';

const envs = ['local', 'dev', 'qa', 'stg', 'prod'];

OmniIconElement.register();
OmniTileElement.register();
OmniSwitchElement.register();
OmniStyleElement.register();

export class OmniAppContainerDrawer extends OmniElement {
  static get properties() {
    return {
      // props
      drawerOpen: { type: Boolean },
      useTestData: { type: Boolean },
      context: { type: Object },
      activeClient: { type: String },
      session: { type: Object },
    };
  }

  static get styles() {
    return [
      super.styles,
      css`
        #settings .field {
          display: block;
          width: 250px;
        }
      `,
    ];
  }

  _contextChange(key, value) {
    this.dispatchNewEvent('context-change', { detail: { key, value } });
  }

  _renderDevDrawer() {
    return html`
      <div class="field">
        <label class="menu-label label is-small">
          Environment
          <div class="control select">
            <select
              @change=${async e => {
                const { target } = e;
                if (
                  !['local', 'dev'].includes(target.value) &&
                  !window.location.hostname.match(/\.annalect\.com$/i)
                ) {
                  omnialert(html`
                    Blocked changing environment to ${target.value}. Logging in
                    to upper environments is blocked by portal unless your
                    hostname ends in ".annalect.com". You'll need to modify your
                    hosts file with an entry like:
                    <p class="m-4">
                      <code>127.0.0.1 localhost.annalect.com</code>
                    </p>
                    and try again with localhost.annalect.com in the URL.
                    Modifying the hosts file on your machine requires admin/sudo
                    rights.
                  `);
                  // revert
                  target.value = this.session.env;
                } else if (await envHasCorsError(target.value)) {
                  omnialert(
                    html`CORS errors restrict testing in qa/stg/prod. To test
                      against those enviroments install an addon in your browser
                      that lets you selectively disable CORS on a single tab
                      (e.g.
                      <a
                        href="https://chromewebstore.google.com/detail/cors-unblock/lfhmikememgdcahcdlaciloancbhjino"
                        >CORS Unblock</a
                      >
                      for Chrome). Once that is enabled try again. Because of
                      page redirects you may need to (re)enable the addon more
                      than once.`
                  );
                  // revert
                  target.value = this.session.env;
                } else {
                  this._contextChange(
                    'env',
                    target.value ?? this.session.env ?? envs[1]
                  );
                }
              }}
            >
              <option .selected=${!this.context?.env} value="">
                Select an environment
              </option>
              ${envs.map(
                env => html`
                  <option .selected=${this.context?.env === env} .value=${env}>
                    ${env}
                  </option>
                `
              )}
            </select>
          </div>
        </label>
      </div>
      <div class="field">
        <label class="menu-label label is-small">
          Readonly User
          <div class="control">
            <omni-switch
              .checked=${this.context?.readonly}
              @change=${e => this._contextChange('readonly', e.detail.checked)}
            >
            </omni-switch>
          </div>
        </label>
      </div>
    `;
  }

  render() {
    // TODO: need to show minimized versions like portal
    if (!this.drawerOpen)
      return html`
        <omni-style>
          <slot name="app-drawer-start-closed"></slot>
          <slot name="app-drawer-default-closed">
            <div
              class="mt-5 is-uppercase has-text-centered is-size-6"
              style="color:var(--color-pale-grey-75)"
            >
              ${this.session.env}
            </div>
          </slot>
          <slot name="app-drawer-end-closed"></slot>
        </omni-style>
      `;

    // TODO:
    // If this code ever gets used in portal we can figure out how to hide the dev
    // drawer and slot in portal's drawer instead.
    return html`
      <omni-style>
        <slot name="app-drawer-start"></slot>
        <slot name="app-drawer-default">
          <div id="settings" class="mb-5" @input=${this.handleInput}>
            <fieldset class="field is-horizontal is-flex-rows">
              ${this._renderDevDrawer()}
            </fieldset>
          </div>
        </slot>
        <slot name="app-drawer-end"></slot>
      </omni-style>
    `;
  }
}

OmniElement.register('omni-app-container-drawer', OmniAppContainerDrawer);
