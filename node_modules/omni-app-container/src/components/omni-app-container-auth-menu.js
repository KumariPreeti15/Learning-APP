import {
  OmniElement,
  OmniStyleElement,
  OmniIconElement,
  html,
  classMap,
  nothing,
} from 'omni-ui';

import userImage from '../svgs/icon-omni-user.js';
import {
  ssoEnv,
  fetchOmni,
  envHasCorsError,
  portalLogin,
} from '../helpers/utils.js';
import { omnialert } from '../helpers/alert.js';

OmniStyleElement.register();
OmniIconElement.register();

export default class OmniAppContainerAuthMenu extends OmniElement {
  static get properties() {
    return {
      env: { type: String },
      isOpen: { state: true },
      isLoading: { state: true },
      session: { type: Object },
    };
  }

  connectedCallback() {
    super.connectedCallback();
    document.addEventListener('show-login', this._handleShowLogin);
    document.addEventListener('click', this._handleDocumentClick);

    this.session.addEventListener('cache-cleared', () =>
      this.requestUpdate('env')
    );
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    document.removeEventListener('show-login', this._handleShowLogin);
    document.removeEventListener('click', this._handleDocumentClick);
  }

  createRenderRoot() {
    // TODO: Figure out how to get browser to autofill the login form
    // If the input fields are in a shadow dom browser autofill won't work.
    // Might need to manage appending/removing dom element directly on document.body,
    // sounds like a pain / not worth it.
    return this;
  }

  async updated(changedProperties) {
    // If redirecting from SSO with ANsid, pull value and save to SessionCache
    if (this.env) {
      const searchParams = new URLSearchParams(window.location.search);
      const sid = searchParams.get('ANsid');
      if (sid) {
        this.session.setCache(sid, this.env, undefined);
        // Remove the consumed search param from url
        const url = new URL(window.location);
        url.searchParams.delete('ANsid');
        window.history.pushState(null, '', url);
        window.dispatchEvent(new PopStateEvent('popstate'));
      }
    }

    if (changedProperties.has('env') && this.env) {
      // Not logged in
      if (!this.session.profile) {
        // Session id available, try to grab profile with it
        if (this.session.ANsid) {
          try {
            this.isLoading = true;
            await this._fetchProfileInfo(this.session.ANsid);
            return; // Don't reset
          } catch (e) {
            if (
              window.location.hostname === 'localhost.annalect.com' &&
              (await envHasCorsError(this.env))
            ) {
              omnialert(
                'Failed to load profile due to CORS error. ' +
                  'Disable CORS on this page and refresh to try again.'
              );
              return; // Don't reset
            }

            // ANSid failed to work, we can reset it
          } finally {
            this.isLoading = false;
          }
        }

        this._reset();
      } else {
        // User is logged in; need to check if the change affects anything
        const oldEnv = changedProperties.get('env');
        const newEnv = this.env;
        if (
          (oldEnv === 'dev' && newEnv === 'local') ||
          (oldEnv === 'local' && newEnv === 'dev')
        ) {
          // Special case when switching between dev & local, nothing really changes but
          // we still need to trigger a change as the name of the env changes.
          this.session.setCache(
            this.session.ANsid,
            newEnv,
            this.session.profile
          );
        } else if (oldEnv && ssoEnv(oldEnv) !== ssoEnv(newEnv)) this._reset();
      }
    }
  }

  _reset() {
    const hostname = window.location.hostname.toLowerCase();
    const isLocal = ['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname);
    const isUpperEnv = ['qa', 'stg', 'prod'].includes(this.env);
    if (isLocal && isUpperEnv) {
      // Portal will block login-redirects from localhost in upper environments. If we detect this issue, reset to dev environment.
      this.env = 'dev';
    }

    this.session.clearCache(this.env, false);
    portalLogin(this.env, this.session.resourceKey);
  }

  async _fetchProfileInfo(sid) {
    const path = `/api/appdata/omni_profile/?ANsid=${sid}`;
    const profile = await fetchOmni(this.env, path);
    this.dispatchNewEvent('omni-profile-received', { detail: { profile } });

    this.session.setCache(sid, this.env, profile);
    this.dispatchNewEvent('omni-sso-login', {
      detail: { ANsid: sid, profile },
    });
  }

  _handleDocumentClick = e => {
    const path = e.composedPath();
    if (!path.includes(this) && this.isOpen) {
      this._setDropdownOpen(false);
    }
  };

  _setDropdownOpen = val => {
    this.isOpen = val;
  };

  /**
   * TODO: this is janky but necessary since shadowRoot is open
   */
  // eslint-disable-next-line class-methods-use-this
  _outputStyles = () => `
    .dropdown-menu {
      max-width: 30rem;
    }
    .user-menu .dropdown-trigger .button.is-rounded {
      width: auto;
      color: var(--color-almost-black);
      transition: all 0.25s ease;
      padding-right: 0;
    }
    .user-menu .dropdown-trigger .chevron-up-icon {
      fill: var(--color-white);
    }
    .user-menu .dropdown-trigger .chevron-down-icon {
      fill: var(--color-almost-black);
    }
    .user-menu .dropdown-trigger button > omni-icon {
      /* if unset then Firefox shrinks images */
      flex-shrink: 0;
      margin-right: 1rem;
      width: 1.5rem;
      height: 1.43rem;
    }
    .user-menu .dropdown-trigger button.active {
      color: var(--color-white) !important;
    }
    .user-menu .dropdown-trigger button.active omni-icon {
      fill: var(--color-white) !important;
    }

    .user-menu .dropdown-content {
      min-width: 15rem;
    }

    /* .user-menu .skeleton {
      width: 18rem;
      height: 2.57rem;
    } */

    /* open dom, portal stuff */
    #user-details {
      text-align: center;
      color: #3b3e3f;
      font-size: 0.857rem;
      margin: 0.5rem 0.7rem;
    }
    #user-details > p:first-of-type {
      font-size: 14px;
    }
    #user-address {
      display: flex;
      flex-direction: row;
      justify-content: center;
    }
    #user-address > p {
      opacity: 0.5;
    }
    #user-address > p:first-of-type {
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .user-menu .dropdown-divider {
      margin: 0 !important;
    }
    .user-menu a > .dropdown-item {
      display: flex !important;
      flex-direction: row;
      align-items: center;
      height: 36px;
      padding-left: 28px !important;
      line-height: 36px !important;
      cursor: pointer !important;
      transition: background-color 0.3s ease;
    }
    .user-menu a:hover > .dropdown-item {
      background-color: #f1f5fa;
    }
    .user-menu a:active > .dropdown-item {
      background-color: #dff4fb;
    }
    .user-menu a > .dropdown-item > omni-icon {
      margin-right: 14px;
    }
    .user-menu .user-profile-image {
      display: block;
      width: 4.571rem;
      height: 4.571rem;
      margin: 0.5rem auto 0 auto;
      border-radius: 50%;
    }
    .user-menu .tooltip {
      visibility: hidden;
      display: inline-block;
      position: absolute;
      bottom: 50%;
      left: 50%;
      transform: translateX(-50%);
      width: fit-content;
      height: 33px;
      border-radius: 8px;
      box-shadow: 0 17px 50px 0 rgba(1, 33, 78, 0.25);
      background-image: linear-gradient(to bottom, #2b3952, #142033 100%);
      color: #fff;
      line-height: 24px;
      padding: 4.5px 15px;
    }
    #user-address:hover .tooltip {
      visibility: visible;
    }
  `;

  render() {
    const [localPart = '', domain = ''] =
      this.session.profile?.email?.split('@') || [];
    const userEmail = { localPart, domain };

    return html`
      <omni-style class="user-menu">
        <!-- because DOM is open -->
        <style>
          ${this._outputStyles()}
        </style>
        <div
          class=${classMap({
            dropdown: true,
            'is-right': true,
            'is-active': this.isOpen,
          })}
        >
          <div class="dropdown-trigger">
            <button
              class="button is-text is-rounded is-capitalized is-size-3 has-text-weight-normal ${classMap(
                {
                  'is-primary': this.isOpen,
                  skeleton: this.isLoading,
                  active: this.isOpen,
                }
              )}"
              @click=${e => {
                e?.stopPropagation();
                this._setDropdownOpen(true);
              }}
            >
              ${!this.session.profile
                ? nothing
                : html`<omni-icon
                    class="is-size-3 mr-2 ${classMap({
                      'has-text-white': this.isOpen,
                      'has-text-almost-black': !this.isOpen,
                    })}"
                    icon-id="${this.isOpen
                      ? 'omni:interactive:up'
                      : 'omni:interactive:down'}"
                  ></omni-icon>`}
              ${this.session.firstName || 'Sign In'}
              <div class="ml-5 mr-1">
                ${!this.session.profile?.userImage
                  ? userImage
                  : html`
                      <img
                        class="is-rounded image is-32x32"
                        src="${this.session.profile?.userImage}"
                        alt="User's profile img"
                      />
                    `}
              </div>
            </button>
          </div>
          <div class="dropdown-menu">
            <div class="dropdown-content">
              <div class="dropdown-item has-text-centered m-auto">
                ${!this.session.profile?.userImage
                  ? userImage
                  : html`
                      <img
                        class="user-profile-image"
                        alt="User's profile img"
                        src=${this.session.profile?.userImage}
                      />
                    `}
                <div id="user-details">
                  <p>${this.session.profile?.fullName || 'User'}</p>
                  <div id="user-address">
                    <p>${userEmail.localPart}</p>
                    <p>@${userEmail.domain}</p>
                    ${userEmail.localPart.length > 14 ||
                    userEmail.domain.length > 13
                      ? html`<div class="tooltip">
                          ${this.session.profile?.email}
                        </div>`
                      : nothing}
                  </div>
                </div>
              </div>
              <hr class="dropdown-divider" />
              <a
                href="http://omnisupport.annalect.com"
                target="omniSupport"
                rel="noopener noreferrer"
                tabindex="0"
              >
                <div class="dropdown-item">
                  <omni-icon
                    class="is-size-3"
                    icon-id="omni:informative:help"
                    aria-label="icon"
                    role="img"
                  ></omni-icon>
                  <span>Support</span>
                </div>
              </a>
              <hr class="dropdown-divider" />
              <a
                tabindex="0"
                href="#"
                @click=${e => {
                  e.preventDefault();
                  this._setDropdownOpen(false);
                  this._reset();
                }}
              >
                <div class="dropdown-item">
                  <omni-icon
                    class="is-size-3"
                    icon-id="omni:interactive:exit"
                    aria-label="icon"
                    role="img"
                  ></omni-icon>
                  <span> Sign Out </span>
                </div>
              </a>
            </div>
          </div>
        </div>
      </omni-style>
    `;
  }
}

OmniElement.register('omni-app-container-auth-menu', OmniAppContainerAuthMenu);
