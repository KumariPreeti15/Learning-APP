import { html, css, OmniElement, OmniStyleElement } from 'omni-ui';
import { OmniAppContainerMixin } from 'omni-app-container';

OmniStyleElement.register();

export class OverviewScreen extends OmniAppContainerMixin(OmniElement) {
  static get styles() {
    return [
      super.styles,
      css`
        .omni a {
          color: var(--color-primary);
        }
        .omni p + p {
          margin-top: 20px;
        }
        .omni ol {
          margin: 10px 40px;
        }
      `,
    ];
  }

  render() {
    // Nothing particularly interesting to see here, just some docs being rendered
    return html`
      <omni-style>
        <p class="mb-6">
          Take a look at the example source for this page under the demo/ directory
        </p>

        <h3 class="title is-2">
          The main areas that are provided by omni-app-container
        </h3>

        <ol>
          <li>Portal-like layout</li>
          <li>User login and client selection</li>
          <li>Routing and Navigation</li>
          <li>Context Data</li>
          <li>Mixin</li>
        </ol>
        <hr />

        <h4 class="title is-3">Portal-like layout</h4>
        <p>
          The header and side-nav should look and feel very similar to the
          layout and functionality that portal provides for hosted apps. As this
          project matures there's opportunity to leverage app container in
          portal itself.
        </p>
        <p>
          The basic way of using this in your own html file. The component is the name of your component that will be created at the root element of your app. The appName is used for the routing (/&lt;clientid>/&lt;appName>/...)
          <pre>
&lt;body>
  &lt;omni-style>&lt;/omni-style>
  &lt;omni-app-container component="my-app" appName="Demo" <span class="has-text-danger">resourceKey="an_yourapp"</span>>&lt;/omni-app-container>
&lt;/body></pre>
          <i><span class="has-text-danger">Note: </span> contact annalect support to request a resource key (type key) for new apps. This is used to track usage. You will also need support to configure your application deeplink as <code>https://exampleapp.annalect.com/{{clientid}}}/exampleapp</code> to ensure your application deeplink is correctly loaded into an iframe on the Omni platform.</i>
        </p>

        <p>
          To render a simple unauthorized page based on user roles in the JWT and the app's resourceKey (aka type key), set roles to a list of roles that are required. If a user doesn't have at least one of the roles in the list, the page will not render. Your backend api should also check the JWT and apply similar role-based authorization checks.<br>
          <code>&lt;omni-app-container ... resourceKey="..." roles='["viewer", "administrator"]'></code>
        </p>

        <p>
          To add additional content to the left drawer for testing/development purposes, use these two slots
          <ol>
            <li>app-drawer-start</li>
            <li>app-drawer-end</li>
          </ol>
        </p>
        <br>

        <h3 class="title is-4">Layouts relative to header</h3>
        <p>
          If your app layout is relative to the header above (e.g. a sticky toolbar), reference the variable <code>--omni-app-layout-header-height</code> as below, rather than a specific pixel value. This will be set to 0 when iframed in portal. Example:
          <pre>
omni-toolbar {
    position: sticky;
    width: 100%;
    top: var(--omni-app-layout-header-height, 50px);
    z-index: 1;
}
          </pre>
        </p>

        <hr />

        <h4 class="title is-3">Routing and Navigation</h4>
        <p>
          Note that clicking the buttons changes the URL and loads the
          appropriate component. Components can be nested and child components
          will fill in the slots of their parent.
          <br />
          <a target="_blank" href="https://vaadin.github.io/router/vaadin-router/#/classes/Router/demos/demo/index.html">See docs about vaadin routing</a>.
          The tabs at the top and left menu have a good amount of information.
        </p>

        <p>
          If you use routing within your app, you need to define a routes with a static
          property in your root component class. It can either be an array or a function
          that returns your array given the baseURL. See above vaadin router docs for
          more details.
          <pre>
import { OmniAppContainerMixin } from 'omni-app-container';

class MyApp extends OmniAppContainerMixin(OmniElement) {
  static routes = (baseURL) =&gt; [
    {
      // You can redirect
      path: '/',
      redirect: \`\${baseURL}/mypath\`,
    },
    {
      // For simple paths define which component to load
      path: '/mypath',
      component: 'component-for-mypath',
    },
    {
      // Note there are three route parameters below (appId, tab, and sessionId).
      // In this case the tab parameter has to match the pattern "sessions". So
      // even "static" parts of the path like sessions can be saved as a route
      // parameter and accessed programatically using routeParamProperty()
      path: '/:appId/:tab(sessions)/:sessionId',
      component: 'another-component',
    },
  ];
}</pre>
        </p>
        <hr />

        <h4 class="title is-3">Context Data</h4>
        <p>
          To have this.context populated in your component, you can use the OmniAppContainerMixin just as above. The context includes:
          <ol>
            <li>env: The environment (dev, qa, stg, prod)</li>
            <li>clientId: The current client's id. The full client's object can be found in <code>profile.clients</code>.</li>
            <li>ANsid: the session id</li>
            <li>profile: the current user's profile information</li>
            <li>readonly: whether the current user is a readonly user (true/false)</li>
            <li>token: jwt token (<span class="has-text-danger">TODO: cleanup how this is generated</span>)</li>
          </ol>
        </p>
        <p>
          See the current <a href="#" @click=${e => {
            e.preventDefault();
            this.navigateTo('context');
          }}>context data</a>
        </p>

      <hr>
      <h4 class="title is-3">Mixin</h4>
      <ol>
        <li>Navigate to other routes in the app (<code>navigateTo()</code>)</li>
        <li>Get context data as properties (<code>contextProperty()</code>)</li>
        <li>Get route params as properties (<code>routeParamProperty()</code>)</li>
      </ol>

        <p>
          <b>this.navigateTo(path)</b><br>
          There's no need to care about the routing above your app, only the relative sub-path
          should be passed. The route is defined in the list of child routes set in your
          base component. Call navigateTo with the path to navigate to; this should be
          defined in the static routes list.
        </p>

        <p>
          <b>this.contextProperty({name, source, options})</b><br>
          In your lit properties you can call this.contextProperties to tell the mixin
          class to expose certain data in context as properties. The name is the name of your
          property, source defaults to name. If you wish the property name to differ from the
          original context name, you can pass name and source. You can optionally pass
          options to the lit property (e.g. hasChanged).
        </p>

        <p>
          <b>this.routeParamProperty({name, source, options})</b><br>
          Same as contextProperty except it gets data from the location route params.
        </p>

        <p>
        Example:

          <pre>
import { OmniAppContainerMixin } from 'omni-app-container';

class MyApp extends OmniAppContainerMixin(OmniElement) {
  static properties = {
    // normal properties
    name: { type: String },

    // Comes from context
    env: this.contextProperty({ name: "env" }),
    clientId: this.contextProperty({ name: "clientId" }),

    // Comes from location route params
    // You can name your property differently than the original context/param name
    objectId: this.routeParamProperty({ name: "objectId", source: "object" }),
  }

  updated(changedProperties) {
    if (changedProperties.has('env') || changedProperties.has('objectId')) {
      // do something
    }
  }

  handleWhateverEvent() {
     this.navigateTo('mypath'); // No leading forward slash
  }
}</pre>
        </p>
      </omni-style>
    `;
  }
}

OmniElement.register('overview-screen', OverviewScreen);
