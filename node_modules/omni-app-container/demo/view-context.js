import {
  html,
  OmniElement,
  OmniTooltipElement,
  OmniStyleElement,
} from 'omni-ui';
import { OmniAppContainerMixin, parseJWT } from 'omni-app-container';

OmniStyleElement.register();
OmniTooltipElement.register();

// Using the mixin for child components is optional, but makes accessing the context or
// navigating a little easier. Otherwise, you'd need to rely on the parent component
// using events or similar.
export class ViewContext extends OmniAppContainerMixin(OmniElement) {
  static get properties() {
    return {
      ANsid: this.contextProperty({ name: 'ANsid' }),
      clientId: this.contextProperty({ name: 'clientId' }),
      env: this.contextProperty({ name: 'env' }),
      profile: this.contextProperty({ name: 'profile' }),
      readonly: this.contextProperty({ name: 'readonly' }),
      token: this.contextProperty({ name: 'token' }),
    };
  }

  renderTextArea(prop) {
    const obj = this[prop];
    const txt = typeof obj === 'object' ? JSON.stringify(obj, null, 2) : obj;
    let extra = '';
    if (prop === 'token') {
      const parsed = JSON.stringify(parseJWT(obj), null, 2);
      extra = html`
        <div class="mt-5 mb-5">
          <code>parseJWT(token)</code>

          <omni-tooltip>
            <omni-icon
              slot="invoker"
              icon-id="omni:informative:info"
            ></omni-icon>
            <div slot="content">
              When setting the resourceKey (aka typeKey) for your app, the JWT
              will contain it in the list of omniTypeKeys (if the user is
              permissioned) as well as any roles the users has for your app. You
              can then use this information to lock down your backend api.
            </div>
          </omni-tooltip>
        </div>
        <textarea class="textarea" .value=${parsed}></textarea>
      `;
    }
    return html`<textarea class="textarea" .value=${txt}></textarea>${extra}`;
  }

  render() {
    const props = Object.keys(this.constructor.properties).sort();

    return html`
      <omni-style>
        <table class="table">
          <tr>
            <th>Context Property</th>
            <th>Value</th>
          </tr>
          ${props.map(
            prop => html`
              <tr>
                <td>${prop}</td>
                <td>
                  ${typeof this[prop] === 'object' || this[prop]?.length > 100
                    ? this.renderTextArea(prop)
                    : this[prop]}
                </td>
              </tr>
            `
          )}
        </table>
      </omni-style>
    `;
  }
}

OmniElement.register('view-context', ViewContext);
