import {
  html,
  css,
  OmniElement,
  OmniTooltipElement,
  OmniStyleElement,
} from 'omni-ui';
import {
  OmniAppContainerMixin,
  parseJWT,
  ssoHost,
  envFromHostname,
  ssoEnv,
} from 'omni-app-container';

OmniStyleElement.register();
OmniTooltipElement.register();

// Using the mixin for child components is optional, but makes accessing the context or
// navigating a little easier. Otherwise, you'd need to rely on the parent component
// using events or similar.
export class ViewHelpers extends OmniAppContainerMixin(OmniElement) {
  static get properties() {
    return {
      ANsid: this.contextProperty({ name: 'ANsid' }),
      clientId: this.contextProperty({ name: 'clientId' }),
      env: this.contextProperty({ name: 'env' }),
      token: this.contextProperty({ name: 'token' }),
    };
  }

  static get styles() {
    return [
      super.styles,
      css`
        .omni pre {
          word-break: break-all;
          white-space: normal;
        }
        .omni table.table td {
          vertical-align: top;
        }
      `,
    ];
  }

  renderUtil(name, definition) {
    return html`
      <h3 class="has-text-weight-bold is-size-2">${name}()</h3>
      <pre class="m-4">import { ${name} } from 'omni-app-container';</pre>
      <p class="m-4">${definition.description}</p>
      <table class="table mb-6">
        <tr>
          <th>Example</th>
          <th>Returns</th>
        </tr>
        ${definition.examples.map(
          example => html`
            <tr>
              <td width="50%">
                <pre>${example.example}</pre>
              </td>
              <td width="50%">
                <pre>${example.returns}</pre>
              </td>
            </tr>
          `
        )}
      </table>
    `;
  }

  render() {
    if (!this.token) return '';

    const utils = {
      parseJWT: {
        description:
          'Return the parsed representation of a jwt token, validation of signature is not performed.',
        examples: [
          {
            example: `parseJWT("${this.token}")`,
            returns: JSON.stringify(parseJWT(this.token)),
          },
        ],
      },
      userHasRole: {
        description:
          'Check whether a jwt token for a user has *at least one* of a list of roles for a given type key. Return true or false',
        examples: [
          {
            example: 'userHasRole(jwt, typeKey, ["viewer"])',
            returns: 'false',
          },
        ],
      },
      generateToken: {
        description:
          'Get a new JWT token. The returned jwt token will include roles for the specified typeKey.',
        examples: [
          {
            example: `await generateToken(this.env, this.clientId, this.ANsid, typeKey)`,
            returns: `"${this.token}"`,
          },
        ],
      },
      ssoHost: {
        description:
          'Given an environment and a hostname, create the corresponding hostname with the correct environment prefix. An optional third argument allows overriding the result when environment is "local".',
        examples: [
          {
            example: 'ssoHost("local", "omni.annalect.com")',
            returns: `"${ssoHost('local', 'omni.annalect.com')}"`,
          },
          {
            example: 'ssoHost("qa", "blah.annalect.com")',
            returns: `"${ssoHost('qa', 'blah.annalect.com')}"`,
          },
          {
            example: 'ssoHost("prod", "myapp.annalect.com", "localhost:5000")',
            returns: `"${ssoHost(
              'prod',
              'myapp.annalect.com',
              'localhost:5000'
            )}"`,
          },
          {
            example: 'ssoHost("local", "myapp.annalect.com", "localhost:5000")',
            returns: `"${ssoHost(
              'local',
              'myapp.annalect.com',
              'localhost:5000'
            )}"`,
          },
        ],
      },
      envFromHostname: {
        description:
          'Given an annalect hostname determine the environment if possible (opposite of ssoHost())',
        examples: [
          {
            example: 'envFromHostname("yourapp.annalect.com")',
            returns: `"${envFromHostname('yourapp.annalect.com')}"`,
          },
          {
            example: 'envFromHostname("localhost")',
            returns: `${envFromHostname('localhost')}`,
          },
          {
            example: 'envFromHostname()',
            returns:
              'uses the current hostname to determine environment ("dev", "qa", "stg", "prod", undefined)',
          },
        ],
      },
      ssoEnv: {
        description:
          'Converts an environment name to itself, except for "local" which becomes "dev"',
        examples: [
          {
            example: 'ssoEnv("local")',
            returns: `"${ssoEnv('local')}"`,
          },
          {
            example: 'ssoEnv("prod")',
            returns: `"${ssoEnv('prod')}"`,
          },
        ],
      },
    };

    return html`
      <omni-style>
        <p class="mb-5">
          These simple utility functions are used within omni-app-container and
          exported for apps that may want similar functionality.
        </p>

        ${Object.entries(utils).map(([name, definition]) =>
          this.renderUtil(name, definition)
        )}
      </omni-style>
    `;
  }
}

OmniElement.register('view-helpers', ViewHelpers);
