#!/usr/bin/env bash

##----- Start Script
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n')
TAG_BRANCH="master"

if [[ "${CURRENT_BRANCH}" != "${TAG_BRANCH}" ]]; then
  echo -e "Please make sure everything is merged into ⎇  $TAG_BRANCH to be ready for release."
  echo -e "Do you want to automatically checkout ⎇  $TAG_BRANCH and pull latest? Your changes will be stashed."

  while true; do
    read -p "[y/N]: " CHECKOUT_AND_PULL
    CHECKOUT_AND_PULL=${CHECKOUT_AND_PULL:-N} 

    if [[ $CHECKOUT_AND_PULL == 'n' || $CHECKOUT_AND_PULL == 'N' ]]; then
      echo "Okay, exiting now."
      exit 1
    elif [[ $CHECKOUT_AND_PULL  == 'y' || $CHECKOUT_AND_PULL  == 'Y' ]]; then
      break
    fi
  done

  git stash && git checkout ${TAG_BRANCH} && git pull origin ${TAG_BRANCH}
fi

CURRENT_V=$(cat package.json | grep version |  cut -d'"' -f4)

VERSION=(
  $(echo $CURRENT_V | cut -d'.' -f1) 
  $(echo $CURRENT_V | cut -d'.' -f2)
  $(echo $CURRENT_V | cut -d'.' -f3)
)

echo
echo -e "Current version: ${CURRENT_V}"
echo
echo "What version type are you releasing?"
echo -e "⎧   0 ⇈  ⎪  Major⎫"
echo -e "⎪   1 ↟  ⎪  Minor⎪"
echo -e "⎩   2 ↥  ⎪  Patch⎭"
echo
read -p "Selection [2]: " UPDATE_TYPE
UPDATE_TYPE=${UPDATE_TYPE:-2} 

if ! [[ $UPDATE_TYPE =~ ^(0|1|2)$ ]]; then
  echo "Invalid selection."
  exit 1
fi

(( VERSION[$UPDATE_TYPE]++ ))

if [[ $UPDATE_TYPE = 0 ]]; then # major
  VERSION=("${VERSION[$UPDATE_TYPE]}" "0" "0")
elif [[ $UPDATE_TYPE = 1 ]]; then #minor
  VERSION=("${VERSION[0]}" "${VERSION[$UPDATE_TYPE]}" "0")
fi

NEW_VERSION=${VERSION[0]}.${VERSION[1]}.${VERSION[2]}

echo -e "Do you want to update to  v${NEW_VERSION} ?"

while true; do
  read -p "[y/N]: " SHOULD_UPDATE
  SHOULD_UPDATE=${SHOULD_UPDATE:-N} 

  if [[ $SHOULD_UPDATE == 'n' || $SHOULD_UPDATE == 'N' ]]; then
    echo "Okay, exiting now."
    exit 1
  elif [[ $SHOULD_UPDATE == 'y' || $SHOULD_UPDATE == 'Y' ]]; then
    break
  fi
done

npm version ${NEW_VERSION} -m "${NEW_VERSION}"
git push --follow-tags
git checkout develop && git push origin $TAG_BRANCH
