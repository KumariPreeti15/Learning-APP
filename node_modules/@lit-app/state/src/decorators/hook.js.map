{"version":3,"file":"hook.js","sourceRoot":"","sources":["hook.ts"],"names":[],"mappings":"AAKA;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,IAAI,CAAC,QAAgB,EAAE,OAAqB;IAE3D,OAAO,CACJ,KAAY,EACZ,IAAiB,EAEjB,EAAE;QACJ,MAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,UAAU,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAA;SACpE;QACD,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,WAA2B,CAAC;QACjD,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAG,UAAU,EAAE;YACd,MAAM,IAAI,GAAI,EAAC,GAAG,UAAU,CAAC,IAAI,EAAG,GAAG,EAAC,CAAC,QAAQ,CAAC,EAAE,OAAO,IAAI,EAAE,EAAC,EAAC,CAAA;YACnE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,GAAG,UAAU,EAAE,GAAG,EAAC,IAAI,EAAE,IAAI,EAAC,EAAC,CAAC,CAAA;SAC5D;QACD,OAAO,SAAS,CAAA;IAClB,CAAC,CAAA;AAEF,CAAC","sourcesContent":["\nimport {State } from '../state.js'\n\nexport type HookOptions = {[key:string]: unknown}\n\n/**\n * A decorator to be consumed by state hooks. A state hook acts as a interface\n * between state and other services reacting to state change or acting on the state.\n * \n * a hook exposes `toState` and `fromState` methods for handling hte synchronization.\n * \n * For instance, a state can be synced to a remote database, throught this mechanism.\n * \n * \n * @param options \n * @returns \n */\nexport function hook(hookName: string, options?: HookOptions) {\n\t\n\treturn (\n    proto: State,\n    name: PropertyKey\n   \n  ) => {\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(proto, name);\n\t\t\tif (!descriptor) {\n\t\t\t\tthrow new Error('@hook decorator need to be called after @property')\n\t\t\t}\n\t\t\tconst ctor = (proto).constructor as typeof State;\n\t\t\tconst definition = ctor.propertyMap.get(name);\n\t\t\tif(definition) {\n\t\t\t\tconst hook =  {...definition.hook , ...{[hookName]: options || {}}}\n\t\t\t\tctor.propertyMap.set(name, {...definition, ...{hook: hook}})\n\t\t\t}\n\t\t\treturn undefined\n\t}\n\n}\n\n"]}