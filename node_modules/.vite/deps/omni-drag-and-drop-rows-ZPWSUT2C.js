import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-AXYXVOZD.js";

// node_modules/omni-ui/dist/component/omni-table/omni-drag-and-drop-rows.js
var _host, _tableRef, _tableBodyRef, _sourceIndex, _nestedDataExists, _sourceElement, _sourceHandle, _handlePointerDown, _handlePointerUp, _handleDragEnd, _handleDragStart, _handleDragOver, _handleDragLeave, _handleDrop, _updateData, updateData_fn, _createMovedElementsAnimation, createMovedElementsAnimation_fn, _createDroppedElementAnimation, createDroppedElementAnimation_fn;
var DragAndDropRowsController = class {
  constructor(host, tableRef, tableBodyRef, nestedDataExists) {
    __privateAdd(this, _updateData);
    __privateAdd(this, _createMovedElementsAnimation);
    __privateAdd(this, _createDroppedElementAnimation);
    __privateAdd(this, _host, void 0);
    __privateAdd(this, _tableRef, void 0);
    __privateAdd(this, _tableBodyRef, void 0);
    __privateAdd(this, _sourceIndex, void 0);
    __privateAdd(this, _nestedDataExists, void 0);
    __privateAdd(this, _sourceElement, void 0);
    __privateAdd(this, _sourceHandle, void 0);
    __privateAdd(this, _handlePointerDown, (e) => {
      const target = e.target;
      const element = target.closest("tr");
      __privateSet(this, _sourceElement, element);
      __privateSet(this, _sourceHandle, target.closest("td"));
      element.setAttribute("draggable", "true");
      __privateGet(this, _tableBodyRef).addEventListener("dragend", __privateGet(this, _handleDragEnd));
      __privateGet(this, _tableBodyRef).addEventListener("dragstart", __privateGet(this, _handleDragStart));
      __privateGet(this, _tableBodyRef).addEventListener("dragover", __privateGet(this, _handleDragOver));
      __privateGet(this, _tableBodyRef).addEventListener("dragleave", __privateGet(this, _handleDragLeave));
      __privateGet(this, _tableBodyRef).addEventListener("drop", __privateGet(this, _handleDrop));
    });
    __privateAdd(this, _handlePointerUp, (e) => {
      __privateGet(this, _tableBodyRef).removeEventListener("dragend", __privateGet(this, _handleDragEnd));
      __privateGet(this, _tableBodyRef).removeEventListener("dragstart", __privateGet(this, _handleDragStart));
      __privateGet(this, _tableBodyRef).removeEventListener("dragover", __privateGet(this, _handleDragOver));
      __privateGet(this, _tableBodyRef).removeEventListener("dragleave", __privateGet(this, _handleDragLeave));
      __privateGet(this, _tableBodyRef).removeEventListener("drop", __privateGet(this, _handleDrop));
    });
    __privateAdd(this, _handleDragEnd, (e) => {
      const element = e.target;
      element.style.opacity = "1";
      element.removeAttribute("draggable");
    });
    __privateAdd(this, _handleDragStart, (e) => {
      const element = e.target;
      __privateSet(this, _sourceIndex, +element.getAttribute("drag-id"));
      e.dataTransfer.effectAllowed = "move";
      element.style.opacity = "0.4";
      if (__privateGet(this, _nestedDataExists))
        __privateGet(this, _host).collapseAll();
    });
    __privateAdd(this, _handleDragOver, (e) => {
      e.preventDefault();
      const target = e.target;
      const element = target.closest(".line-container");
      if (element) {
        const lineId = +element.getAttribute("line-id");
        if (__privateGet(this, _sourceIndex) === lineId || __privateGet(this, _sourceIndex) === lineId - 1)
          return;
        element.setAttribute("drag-over", "");
      }
    });
    __privateAdd(this, _handleDragLeave, (e) => {
      e.preventDefault();
      const target = e.target;
      const element = target.closest(".line-container");
      if (element) {
        element.removeAttribute("drag-over");
      }
    });
    __privateAdd(this, _handleDrop, async (e) => {
      e.preventDefault();
      e.stopPropagation();
      const target = e.target;
      if (__privateGet(this, _tableRef) !== target.closest("table"))
        return;
      const element = target.closest(".line-container");
      if (element) {
        const lineId = +element.getAttribute("line-id");
        element.removeAttribute("drag-over");
        await Promise.all([
          __privateMethod(this, _createDroppedElementAnimation, createDroppedElementAnimation_fn).call(this, e, __privateGet(this, _sourceIndex), lineId),
          ...__privateMethod(this, _createMovedElementsAnimation, createMovedElementsAnimation_fn).call(this, e, __privateGet(this, _sourceIndex), lineId)
        ]);
        __privateMethod(this, _updateData, updateData_fn).call(this, __privateGet(this, _sourceIndex), lineId);
      }
    });
    __privateSet(this, _host, host);
    __privateSet(this, _tableRef, tableRef);
    __privateSet(this, _tableBodyRef, tableBodyRef);
    __privateSet(this, _nestedDataExists, nestedDataExists);
    __privateGet(this, _host).addController(this);
  }
  hostConnected() {
    __privateGet(this, _tableBodyRef).addEventListener("pointerdown", __privateGet(this, _handlePointerDown));
    __privateGet(this, _tableBodyRef).addEventListener("pointerup", __privateGet(this, _handlePointerUp));
  }
  hostDisconnected() {
    __privateGet(this, _tableBodyRef).removeEventListener("pointerdown", __privateGet(this, _handlePointerDown));
    __privateGet(this, _tableBodyRef).removeEventListener("pointerup", __privateGet(this, _handlePointerUp));
  }
};
_host = new WeakMap();
_tableRef = new WeakMap();
_tableBodyRef = new WeakMap();
_sourceIndex = new WeakMap();
_nestedDataExists = new WeakMap();
_sourceElement = new WeakMap();
_sourceHandle = new WeakMap();
_handlePointerDown = new WeakMap();
_handlePointerUp = new WeakMap();
_handleDragEnd = new WeakMap();
_handleDragStart = new WeakMap();
_handleDragOver = new WeakMap();
_handleDragLeave = new WeakMap();
_handleDrop = new WeakMap();
_updateData = new WeakSet();
updateData_fn = function(sourceId, destinationId) {
  if (sourceId < destinationId)
    destinationId--;
  __privateGet(this, _host).dispatchNewEvent("omni-drop", {
    detail: { moveFromIdx: __privateGet(this, _sourceIndex), moveToIdx: destinationId }
  });
};
_createMovedElementsAnimation = new WeakSet();
createMovedElementsAnimation_fn = function(e, moveFromIdx, moveToIdx) {
  let moveToIndex = moveToIdx;
  const elements = __privateGet(this, _tableBodyRef).querySelectorAll("tr[drag-id]");
  const animationArray = [];
  if (moveFromIdx < moveToIdx) {
    moveToIndex--;
    for (let i = moveFromIdx + 1; i <= moveToIndex; i++) {
      const prevRect = elements[i - 1].getBoundingClientRect();
      const currentRect = elements[i].getBoundingClientRect();
      const diff = currentRect.top - prevRect.top;
      animationArray.push(
        elements[i].animate([{ transform: "translateY(0)" }, { transform: `translateY(-${diff}px)` }], {
          duration: 500,
          easing: "ease-in-out"
        }).finished
      );
    }
  } else {
    for (let i = moveFromIdx - 1; i >= moveToIdx; i--) {
      const nextRect = elements[i + 1].getBoundingClientRect();
      const currentRect = elements[i].getBoundingClientRect();
      const diff = nextRect.top - currentRect.top;
      animationArray.push(
        elements[i].animate([{ transform: "translateY(0)" }, { transform: `translateY(${diff}px)` }], {
          duration: 500,
          easing: "ease-in-out"
        }).finished
      );
    }
  }
  return animationArray;
};
_createDroppedElementAnimation = new WeakSet();
createDroppedElementAnimation_fn = function(e, moveFromIdx, moveToIdx) {
  const sourceElementRect = __privateGet(this, _sourceElement).getBoundingClientRect();
  let moveToIndex = moveToIdx;
  if (moveFromIdx < moveToIdx) {
    moveToIndex--;
  }
  const elements = __privateGet(this, _tableBodyRef).querySelectorAll("tr[drag-id]");
  let targetEle;
  elements.forEach((element) => {
    if (element.getAttribute("drag-id") && +element.getAttribute("drag-id") === moveToIndex) {
      targetEle = element;
    }
  });
  const targetEleRect = targetEle.getBoundingClientRect();
  const diffTop = targetEleRect.top - sourceElementRect.top;
  return __privateGet(this, _sourceElement).animate([{ transform: "translateY(0)" }, { transform: `translateY(${diffTop}px)` }], {
    duration: 500,
    easing: "ease-in-out"
  }).finished;
};
export {
  DragAndDropRowsController
};
//# sourceMappingURL=omni-drag-and-drop-rows-ZPWSUT2C.js.map
