import {
  LitElement,
  ReactiveElement,
  adoptStyles,
  css,
  unsafeCSS
} from "./chunk-QO65DIIA.js";
import {
  _$LH,
  html,
  noChange,
  nothing,
  render,
  svg
} from "./chunk-HBQ2ZDTI.js";
import {
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __publicField
} from "./chunk-AXYXVOZD.js";

// node_modules/omni-ui/dist/styles.js
var styles_exports = {};
__export(styles_exports, {
  all: () => all,
  forms: () => forms,
  variables: () => variables
});

// node_modules/omni-ui/dist/stylesheet.js
var stylesheet = `
html {
	--white: #f1f5fa;
	--black: #000;
	--body-background-color: var(--white);
	--body-size: 14px;
	--body-min-width: 300px;
	--body-rendering: optimizeLegibility;
	--body-family: sans-serif;
	--body-overflow-x: hidden;
	--body-overflow-y: scroll;
	--body-color: var(--black);
	--body-font-size: 1em;
	--body-font-size: var(--body-size);
	--body-weight: normal;
	--body-line-height: 1.5;
}
/**
 * Omni UI theme definition
 *
 * NOTE: Font should be included by the application, see ../font-snippet.html
 * Bulma variable overrides, see https://bulma.io/documentation/customize/variables
 *
 * TODO
 * - Consider moving more transitions to be intrinsic
 * - Get :root CSS vars working (try dart sass)
 */
.omni {
	/* set of CSS variables to support theming */
	--rgb-primary: 0, 161, 210; /* #00a1d2; */
	--rgb-secondary: 3, 187, 227; /* #03bbe3; */
	--rgb-tertiary: 240, 242, 245; /* #f0f2f5; */
	--rgb-nav-one: 43, 57, 82; /* #2b3952; */
	--rgb-nav-two: 20, 32, 51; /* #142033; */
	--rgb-accent-one: 77, 197, 252; /* #4dc5fc; */
	--rgb-accent-two: 130, 209, 171; /* #82d1ab; */
	--rgb-accent-three: 255, 166, 0; /* #ffa600; */
	--rgb-accent-four: 212, 80, 135; /* #d45087; */
  --rgb-core-dark: 59, 62, 63; /* #3b3e3f */
  --rgb-core-medium: 162, 169, 173; /* #a2a9ad; */
  --rgb-core-medium-two: 241, 245, 250; /* #f1f5fa; */
  --rgb-core-light: 255, 255, 255; /* #fff */
  --rgb-border: 237, 240, 245; /* #edf0f5; */

	--color-accent-one: rgb(var(--rgb-accent-one));
	--color-accent-two: rgb(var(--rgb-accent-two));
	--color-accent-three: rgb(var(--rgb-accent-three));
	--color-accent-four: rgb(var(--rgb-accent-four));

	--color-primary: rgb(var(--rgb-primary));
	--color-secondary: rgb(var(--rgb-secondary));
	--color-tertiary: rgb(var(--rgb-tertiary));

	--color-core-dark: rgb(var(--rgb-core-dark));
	--color-core-medium: rgb(var(--rgb-core-medium));
	--color-core-medium-two: rgb(var(--rgb-core-medium-two));
	--color-core-light: rgb(var(--rgb-core-light));

	--color-nav-one: rgb(var(--rgb-nav-one));
	--color-nav-two: rgb(var(--rgb-nav-two));
	--color-border: rgb(var(--rgb-border));

	/* reserved, do not use for theming */
	--color-info: #03bbe3;
	--color-success: #2cc4ad;
	--color-success-two: #00e3ae;
	--color-error: #df5678;
	--color-error-two: #f56c8e;
	--color-alert: #fed882;
	--color-alert-two: #f8d991;

	--gradient-primary: linear-gradient(135deg, rgb(var(--rgb-primary)) 0, rgb(var(--rgb-secondary)) 100%);
	--gradient-navigation: radial-gradient(circle at 50% 0, rgb(var(--rgb-nav-one)), rgb(var(--rgb-nav-two)) 89%);
	--gradient-success: linear-gradient(138deg, var(--color-success), var(--color-success-two) 95%);
	--gradient-error: linear-gradient(137deg, var(--color-error) 4%, var(--color-error-two));
	--gradient-alert: linear-gradient(134deg, var(--color-alert) 4%, var(--color-alert-two) 95%);
	--gradient-info: linear-gradient(135deg, var(--color-info) 110%, var(--color-info) 31%);

	--button-shadow-dark: 0 4px 6px 0 rgb(var(--rgb-primary), 0.25);
	--button-shadow-light: 0 4px 6px 0 rgb(var(--rgb-secondary), 0.10);
	--button-shadow-success: 0 4px 6px 0 rgb(47, 240, 200, 0.25);
	--button-shadow-error: 0 4px 6px 0 rgb(241, 104, 138, 0.25);
	--button-shadow-alert: 0 4px 6px 0 rgb(17, 26, 32, 0.25);
	--dropdown-tooltip-shadow: 0 8px 45px -5px rgb(var(--rgb-secondary), 0.25);
	--calendar-shadow: 0 8px 12px 0 rgb(var(--rgb-secondary), 0.10);
	--container-shadow-level-one: 0 10px 60px -5px rgb(var(--rgb-secondary), 0.08);
	--container-shadow-level-two: 0 17px 50px 0 rgb(var(--rgb-secondary), 0.25);
	--container-shadow-level-three: 0 24px 31px -6px rgb(var(--rgb-secondary), 0.35);
	--card-shadow: 0 15px 12px -9px rgb(var(--rgb-secondary), 0.18);
	--table-container-shadow: 0 10px 60px -5px rgb(var(--rgb-secondary), 0.12);

	--color-almost-black: #3b3e3f;
	--color-electric-blue: var(--color-primary);
	--color-electric-blue-between: #1ebfff;
	--color-electric-blue-between75: rgba(30, 191, 255, 0.75);
	--color-electric-light-blue: #20cbff;
	--color-electric-blue-darker: #0097c5;
	--color-electric-blue-darkerer: #008db9;
	--color-blue-true80: rgb(213, 243, 252, 0.8);
	--color-blue-true: #d5f3fc;
	--color-blue-disappointment: #0095c2;
	--color-blue-light: #d1f4ff;
	--color-blue-superlight: #def7ff;
	--color-blue-ultralight: #ebfaff;
	--color-mint: #2cc4ad;
	--color-melon: #df5678;
	--color-honeycomb: #fed882;
	--color-teal: #1de4e7;

	--color-blue-ui1: #2b3952;
	--color-blue-ui2: #142033;
	--color-blue-ui3: #03bbf3;

	--color-shark: #a2a9ad;
	--color-pale-grey: rgba(240, 242, 245, 0.9);
	--color-pale-grey-two: #f2f5fa;
	--color-pale-grey-three: #edf0f5;
	--color-pale-grey-75: rgba(237, 240, 245, 0.75);

	--color-gray-f9: #f9f9f9;
	--color-gray-f2: #f2f2f2;
	--color-gray-e8: #e8e8e8;
	--color-gray-db: #dbdbdb;
	--color-gray-b5: #b5b5b5;
	--color-gray-7a: #7a7a7a;
	--color-gray-4a: #4a4a4a;
	--color-gray-36: #363636;
	--color-gray-0a: #0a0a0a;

	--color-green-dark: #142003;

	--color-whitesmoke: whitesmoke;

	--color-visualization-deep-blue: #003f5c;
	--color-visualization-persian-blue: #212ad2;
	--color-visualization-mid-blue: #2f4b7c;
	--color-visualization-royal-blue: #0C67E6;
	--color-visualization-violet: #665191;
	--color-visualization-plum: #a05195;
	--color-visualization-rose: #d45087;
	--color-visualization-deep-coral: #f95d6a;
	--color-visualization-tangerine: #ff7c43;
	--color-visualization-light-orange: #ffa600;
	--color-visualization-light-blue: #4dc5fc;
	--color-visualization-periwinkle: #7ea5ff;
	--color-visualization-lilac: #c596ff;
	--color-visualization-medium-purple: #9e78ea;
	--color-visualization-bubble-gum: #fb83e2;
	--color-visualization-pink: #ff75b5;
	--color-visualization-sea-buckthorn: #fbb32d;
	--color-visualization-light-coral: #ff7781;
	--color-visualization-light-tangerine: #fe975e;
	--color-visualization-sandy-brown: #f19b50;
	--color-visualization-sea-foam: #8ce6bb;
	--color-visualization-pastel-green: #66ef95;
	--color-visualization-neutral: #c5d3de;

	--color-white: #fff;
	--color-transparent: transparent;

	--gradient-electric-blue: var(--gradient-primary);
	--gradient-mint: linear-gradient(138deg, var(--color-mint), #00e3ae 95%);
	--gradient-melon: linear-gradient(137deg, var(--color-melon) 4%, #f56c8e);
	--gradient-honeycomb: linear-gradient(134deg, var(--color-honeycomb) 4%, #f8d991 95%);
	--gradient-black: radial-gradient(circle at 50% 0, var(--color-blue-ui1), var(--color-blue-ui2) 89%);

	--blue: var(--color-primary);

	--family-sans-serif: "Open Sans", sans-serif;
	--family-monospace: monospace;
	--size-1: 1.5rem;	/* 21px */
	--size-2: 1.29rem; /* 18px */
	--size-3: 1.14rem; /* 16px */
	--size-4: 1rem;		/* 14px */
	--size-5: 0.93rem; /* 13px */
	--size-6: 0.86rem; /* 12px */
	--size-7: 0.79rem; /* 11px */
	--size-small: var(--size-6);
	--size-normal: var(--size-4);
	--size-medium: var(--size-3);
	--size-large: var(--size-2);
	--radius-small: 4px;
	--radius: 8px;
	--radius-large: 16px;
	--primary: var(--color-primary);
	--info: var(--color-primary);
	--success: var(--color-mint);
	--warning: var(--color-honeycomb);
	--danger: var(--color-melon);
	--link: var(--color-primary);
	--table-color: var(--color-shark);
	--table-background-color: #f5f8fb;
	--table-head-background-color: #f5f8fb;
	--table-head-cell-color: var(--color-almost-black);
	--table-head-cell-border-width: 0;
	--table-cell-border-width: 1px;
	--table-cell-border: var(--table-cell-border-width) solid var(--color-pale-grey-two);
	--table-cell-padding: .6rem 2.1rem;
	--table-row-border-radius: 6px;
	--table-row-hover-background-color: var(--color-transparent);
	--body-size: 14px;
	--body-background-color: var(--color-pale-grey-two);

	--form-input-border: 1px solid var(--color-pale-grey-three);

	--bulma-shadow-color1: rgba(0, 161, 210, 0.25);
	--shadow-color-blue: rgba(17, 155, 235, 0.25);
	--bulma-shadow-1: 0 0 0 0.125em var(--bulma-shadow-color1);
	--bulma-shadow-2: 0 0 0.5em var(--bulma-shadow-color1);
	--shadow-blue-med: 0 3px 5px 0 var(--shadow-color-blue);
}

/* Bulma Utilities */
@keyframes spinAround {
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(359deg);
	}
}

.omni .delete, .omni .modal-close, .omni .button, .omni .file, .omni .breadcrumb, .omni .pagination-previous,
.omni .pagination-next,
.omni .pagination-link,
.omni .pagination-ellipsis, .omni .tabs, .omni .is-unselectable {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}

.omni .select:not(.is-multiple):not(.is-loading)::after, .omni .navbar-link:not(.is-arrowless)::after {
	border: 3px solid transparent;
	border-radius: calc(var(--radius-small) / 2);
	border-right: 0;
	border-top: 0;
	content: " ";
	display: block;
	height: 0.625em;
	pointer-events: none;
	position: absolute;
	inset-block-end: 1em;
	transform: rotate(-45deg);
	transform-origin: center;
	width: 0.625em;
}

.omni .box:not(:last-child), .omni .content:not(:last-child), .omni .notification:not(:last-child), .omni .progress:not(:last-child), .omni .table:not(:last-child), .omni .table-container:not(:last-child), .omni .title:not(:last-child),
.omni .subtitle:not(:last-child), .omni .block:not(:last-child), .omni .highlight:not(:last-child), .omni .breadcrumb:not(:last-child), .omni .level:not(:last-child), .omni .message:not(:last-child), .omni .pagination:not(:last-child), .omni .tabs:not(:last-child) {
	margin-bottom: 1.5rem;
}

.omni .delete, .omni .modal-close {
	-moz-appearance: none;
	-webkit-appearance: none;
	background-color: rgba(10, 10, 10, 0.2);
	border: none;
	border-radius: 290486px;
	cursor: pointer;
	pointer-events: auto;
	display: inline-block;
	flex-grow: 0;
	flex-shrink: 0;
	font-size: 0;
	height: 20px;
	max-height: 20px;
	max-width: 20px;
	min-height: 20px;
	min-width: 20px;
	outline: none;
	position: relative;
	vertical-align: top;
	width: 20px;
}

.omni .delete::before, .omni .modal-close::before, .omni .delete::after, .omni .modal-close::after {
	background-color: var(--color-white);
	content: "";
	display: block;
	left: 50%;
	position: absolute;
	top: 50%;
	transform: translateX(-50%) translateY(-50%) rotate(45deg);
	transform-origin: center center;
}

.omni .delete::before, .omni .modal-close::before {
	height: 2px;
	width: 50%;
}

.omni .delete::after, .omni .modal-close::after {
	height: 50%;
	width: 2px;
}

.omni .delete:hover, .omni .modal-close:hover, .omni .delete:focus, .omni .modal-close:focus {
	background-color: rgba(10, 10, 10, 0.3);
}

.omni .delete:active, .omni .modal-close:active {
	background-color: rgba(10, 10, 10, 0.4);
}

.omni .is-small.delete, .omni .is-small.modal-close {
	height: 16px;
	max-height: 16px;
	max-width: 16px;
	min-height: 16px;
	min-width: 16px;
	width: 16px;
}

.omni .is-medium.delete, .omni .is-medium.modal-close {
	height: 24px;
	max-height: 24px;
	max-width: 24px;
	min-height: 24px;
	min-width: 24px;
	width: 24px;
}

.omni .is-large.delete, .omni .is-large.modal-close {
	height: 32px;
	max-height: 32px;
	max-width: 32px;
	min-height: 32px;
	min-width: 32px;
	width: 32px;
}

.omni .button.is-loading::after, .omni .loader, .omni .select.is-loading::after, .omni .control.is-loading::after {
	animation: spinAround 500ms infinite linear;
	border: 2px solid var(--color-gray-db);
	border-radius: 290486px;
	border-right-color: var(--color-transparent);
	border-top-color: var(--color-transparent);
	content: "";
	display: block;
	height: 1em;
	position: relative;
	width: 1em;
}

.omni .image.is-square img,
.omni .image.is-square .has-ratio, .omni .image.is-1by1 img,
.omni .image.is-1by1 .has-ratio, .omni .image.is-5by4 img,
.omni .image.is-5by4 .has-ratio, .omni .image.is-4by3 img,
.omni .image.is-4by3 .has-ratio, .omni .image.is-3by2 img,
.omni .image.is-3by2 .has-ratio, .omni .image.is-5by3 img,
.omni .image.is-5by3 .has-ratio, .omni .image.is-16by9 img,
.omni .image.is-16by9 .has-ratio, .omni .image.is-2by1 img,
.omni .image.is-2by1 .has-ratio, .omni .image.is-3by1 img,
.omni .image.is-3by1 .has-ratio, .omni .image.is-4by5 img,
.omni .image.is-4by5 .has-ratio, .omni .image.is-3by4 img,
.omni .image.is-3by4 .has-ratio, .omni .image.is-2by3 img,
.omni .image.is-2by3 .has-ratio, .omni .image.is-3by5 img,
.omni .image.is-3by5 .has-ratio, .omni .image.is-9by16 img,
.omni .image.is-9by16 .has-ratio, .omni .image.is-1by2 img,
.omni .image.is-1by2 .has-ratio, .omni .image.is-1by3 img,
.omni .image.is-1by3 .has-ratio, .omni .modal, .omni .modal-background, .omni .is-overlay, .omni .hero-video {
	bottom: 0;
	left: 0;
	position: absolute;
	right: 0;
	top: 0;
}

.omni .button, .omni .input, .omni .textarea, .omni .select select, .omni .file-cta,
.omni .file-name, .omni .pagination-previous,
.omni .pagination-next,
.omni .pagination-link,
.omni .pagination-ellipsis {
	-moz-appearance: none;
	-webkit-appearance: none;
	appearance: none;
	align-items: center;
	border: 1px solid transparent;
	border-radius: var(--radius);
	box-shadow: none;
	display: inline-flex;
	font-size: var(--size-4);
	justify-content: flex-start;
	line-height: 1.5;
	padding-bottom: calc(0.5em - 1px);
	padding-left: calc(0.75em - 1px);
	padding-right: calc(0.75em - 1px);
	padding-top: calc(0.5em - 1px);
	position: relative;
	vertical-align: top;
}

/* FIX */
.omni input[type="color"]{
	padding: revert;
}
/* FIX */
.omni input[type="checkbox"],
.omni input[type="color"],
.omni input[type="radio"],
.omni input[type="range"]{
	appearance: revert;
}
/* FIX */
.omni input[type="range"]{
	padding: revert;
}
/* FIX */
.omni input[type="radio"]{
	width: revert;
}

.omni .button:focus, .omni .input:focus, .omni .textarea:focus, .omni .select select:focus, .omni .file-cta:focus,
.omni .file-name:focus, .omni .pagination-previous:focus,
.omni .pagination-next:focus,
.omni .pagination-link:focus,
.omni .pagination-ellipsis:focus, .omni .is-focused.button, .omni .is-focused.input, .omni .is-focused.textarea, .omni .select select.is-focused, .omni .is-focused.file-cta,
.omni .is-focused.file-name, .omni .is-focused.pagination-previous,
.omni .is-focused.pagination-next,
.omni .is-focused.pagination-link,
.omni .is-focused.pagination-ellipsis, .omni .button:active, .omni .input:active, .omni .textarea:active, .omni .select select:active, .omni .file-cta:active,
.omni .file-name:active, .omni .pagination-previous:active,
.omni .pagination-next:active,
.omni .pagination-link:active,
.omni .pagination-ellipsis:active, .omni .is-active.button, .omni .is-active.input, .omni .is-active.textarea, .omni .select select.is-active, .omni .is-active.file-cta,
.omni .is-active.file-name, .omni .is-active.pagination-previous,
.omni .is-active.pagination-next,
.omni .is-active.pagination-link,
.omni .is-active.pagination-ellipsis {
	outline: none;
}

.omni .input[disabled], .omni .textarea[disabled], .omni .select select[disabled], .omni .file-cta[disabled],
.omni .file-name[disabled], .omni .pagination-previous[disabled],
.omni .pagination-next[disabled],
.omni .pagination-link[disabled],
.omni .pagination-ellipsis[disabled],
fieldset[disabled] .omni .button,
.omni fieldset[disabled] .button,
fieldset[disabled] .omni .input,
.omni fieldset[disabled] .input,
fieldset[disabled] .omni .textarea,
.omni fieldset[disabled] .textarea,
fieldset[disabled] .omni .select select,
.omni .select fieldset[disabled] select,
fieldset[disabled] .omni .file-cta,
.omni fieldset[disabled] .file-cta,
fieldset[disabled] .omni .file-name,
.omni fieldset[disabled] .file-name,
fieldset[disabled] .omni .pagination-previous,
.omni fieldset[disabled] .pagination-previous,
fieldset[disabled] .omni .pagination-next,
.omni fieldset[disabled] .pagination-next,
fieldset[disabled] .omni .pagination-link,
.omni fieldset[disabled] .pagination-link,
fieldset[disabled] .omni .pagination-ellipsis,
.omni fieldset[disabled] .pagination-ellipsis {
	cursor: not-allowed;
}

.omni fieldset > legend {
	margin-bottom: 0.57em;
}

.omni {
/* Bulma Base */
/*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */
/* Bulma Elements */
/* Bulma Form */
/* Bulma Components */
/* Bulma Grid */
/* Bulma Helpers */
/* Bulma Layout */ }
.omni html,
.omni body,
.omni p,
.omni ol,
.omni ul,
.omni li,
.omni dl,
.omni dt,
.omni dd,
.omni blockquote,
.omni figure,
.omni fieldset,
.omni legend,
.omni textarea,
.omni pre,
.omni iframe,
.omni hr,
.omni h1,
.omni h2,
.omni h3,
.omni h4,
.omni h5,
.omni h6 {
	margin: 0;
	padding: 0;
}

.omni h1,
.omni h2,
.omni h3,
.omni h4,
.omni h5,
.omni h6 {
	font-size: 100%;
	font-weight: normal;
}
.omni button,
.omni input,
.omni select,
.omni textarea {
	margin: 0;
	background-color: var(--color-pale-grey-two);
	border: var(--form-input-border);
}

.omni html {
	box-sizing: border-box;
}

.omni *, .omni *::before, .omni *::after {
	box-sizing: inherit;
}

.omni img,
.omni video {
	height: auto;
	max-width: 100%;
}

.omni iframe {
	border: 0;
}

.omni table {
	border-collapse: collapse;
	border-spacing: 0;
}

.omni td,
.omni th {
	padding: 0;
}

.omni td:not([align]),
.omni th:not([align]) {
	text-align: inherit;
}

.omni html {
	background-color: var(--white);
	font-size: var(--body-size);
	-moz-osx-font-smoothing: grayscale;
	-webkit-font-smoothing: antialiased;
	min-width: 300px;
	overflow-x: hidden;
	overflow-y: scroll;
	text-rendering: var(--body-rendering);
	text-size-adjust: 100%;
}

.omni article,
.omni aside,
.omni figure,
.omni footer,
.omni header,
.omni hgroup,
.omni section {
	display: block;
}

.omni body,
.omni button,
.omni input,
.omni optgroup,
.omni select,
.omni textarea {
	font-family: var(--family-sans-serif);
}

.omni code,
.omni pre {
	-moz-osx-font-smoothing: auto;
	-webkit-font-smoothing: auto;
	font-family: var(--family-monospace);
}

.omni body {
	color: var(--color-gray-4a);
	font-size: 1em;
	font-weight: 400;
	line-height: 1.5;
}

.omni a {
	color: var(--color-primary);
	cursor: pointer;
	text-decoration: none;
}

.omni code {
	background-color: var(--color-whitesmoke);
	color: #da1039;
	font-size: 0.875em;
	font-weight: normal;
	padding: 0.25em 0.5em 0.25em;
}

.omni hr {
	background-color: var(--color-whitesmoke);
	border: none;
	display: block;
	height: 2px;
	margin: 1.5rem 0;
}

.omni img {
	height: auto;
	max-width: 100%;
}

.omni input[type="checkbox"],
.omni input[type="radio"] {
	vertical-align: baseline;
}

.omni small {
	font-size: 0.875em;
}

.omni span {
	font-style: inherit;
	font-weight: inherit;
}

.omni strong {
	color: var(--color-gray-36);
	font-weight: 700;
}

.omni fieldset {
	border: none;
}

.omni pre {
	-webkit-overflow-scrolling: touch;
	background-color: var(--color-whitesmoke);
	color: var(--color-gray-4a);
	font-size: 0.875em;
	overflow-x: auto;
	padding: 1.25rem 1.5rem;
	white-space: pre;
	word-wrap: normal;
}

.omni pre code {
	background-color: var(--color-transparent);
	color: currentColor;
	font-size: 1em;
	padding: 0;
}

.omni table td,
.omni table th {
	vertical-align: top;
}

.omni table td:not([align]),
.omni table th:not([align]) {
	text-align: inherit;
}

.omni table th {
	color: var(--color-gray-36);
}

.omni .box {
	background-color: var(--color-white);
	border-radius: var(--radius-large);
	box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);
	color: var(--color-gray-4a);
	display: block;
	padding: 1.25rem;
}

.omni a.box:hover, .omni a.box:focus {
	box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0 0 1px var(--color-electric-blue);
}

.omni a.box:active {
	box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2), 0 0 0 1px var(--color-electric-blue);
}

.omni :is(input[type="submit"], input[type="reset"], input[type="button"]),
.omni button,
.omni .button {
	background-color: var(--color-pale-grey-two);
	border-color: var(--color-pale-grey-two);
	border-radius: var(--radius);
	border-width: thin;
	box-shadow: none !important;
	color: var(--color-almost-black);
	cursor: pointer;
	font-weight: 600;
	justify-content: center;
	letter-spacing: 0.014em;
	height: 2.21em;
	line-height: 1;
	padding: 0 1.4em;
	text-align: center;
	transition: background-color .25s ease, border-color .25s ease, color .25s ease;
	white-space: nowrap;
	transform-style: preserve-3d;
}

.omni .button strong {
	color: inherit;
}

.omni button .icon, .omni button .icon.is-small, .omni button .icon.is-medium, .omni button .icon.is-large,
.omni .button .icon, .omni .button .icon.is-small, .omni .button .icon.is-medium, .omni .button .icon.is-large {
	height: 1.5em;
	width: 1.5em;
}

.omni .button .icon:first-child:not(:last-child) {
	margin-left: calc(-0.5em - 1px);
	margin-right: 0.25em;
}

.omni .button .icon:last-child:not(:first-child) {
	margin-left: 0.25em;
	margin-right: calc(-0.5em - 1px);
}

.omni .button .icon:first-child:last-child {
	margin-left: calc(-0.5em - 1px);
	margin-right: calc(-0.5em - 1px);
}

.omni input[type="submit"]:focus,
.omni input[type="reset"]:focus {
	border-color: var(--color-primary);
	color: var(--color-gray-36);
}

.omni input[type="submit"]:focus,
.omni input[type="reset"]:focus,
.omni input[type="button"]:focus,
.omni input[type="submit"]:active,
.omni input[type="reset"]:active,
.omni input[type="button"]:active,
.omni input[type="submit"]:hover,
.omni input[type="reset"]:hover,
.omni input[type="button"]:hover,
.omni button:hover,
.omni button:focus,
.omni button:active,
.omni .button:hover, .omni .button.is-hovered,
.omni .button:active, .omni .button.is-active, .omni .button:focus, .omni .button.is-focused {
  background-color: rgb(var(--rgb-primary), 0.15);
  border-color: transparent;
  box-shadow: var(--button-shadow-light-color);
  color: var(--color-core-dark);
}

.omni .button:hover omni-icon, .omni .button.is-hovered omni-icon, .omni .button:focus omni-icon, .omni .button.is-focused omni-icon {
	fill: var(--color-core-dark);
}

.omni .button:active, .omni .button.is-active {
  border-color: transparent;
	color: var(--color-core-dark);
}

.omni .button:active omni-icon, .omni .button.is-active omni-icon {
	fill: var(--color-core-dark);
}

.omni .button.is-text {
	background-color: var(--color-transparent);
	border-color: var(--color-transparent);
	color: var(--color-primary);
	text-decoration: none;
}

.omni .button.is-text omni-icon {
	fill: var(--color-primary);
}

.omni .button.is-text omni-icon:only-child {
	fill: var(--color-almost-black);
}

.omni .button.is-text .is-sr-only:first-child + omni-icon:last-child {
	fill: var(--color-almost-black);
}

.omni .button.is-text:hover, .omni .button.is-text.is-hovered, .omni .button.is-text:focus, .omni .button.is-text.is-focused {
	background-color: var(--color-core-medium-two);
	color: var(--color-core-dark);
}

.omni .button.is-text:active, .omni .button.is-text.is-active {
	background-color: rgb(var(--rgb-primary), 0.15);
	background-image: none;
	box-shadow: var(--button-shadow-lighter-color);
	color: var(--color-core-dark);
}

.omni .button.is-text[disabled],
.omni .button.is-text:disabled,
fieldset[disabled] .omni .button.is-text {
	background-color: var(--color-transparent);
	border-color: var(--color-transparent);
	color: var(--color-core-medium);
}


.omni .button.is-text:hover omni-icon, .omni .button.is-text.is-hovered omni-icon, .omni .button.is-text:focus omni-icon, .omni .button.is-text.is-focused omni-icon {
	fill: var(--color-dark-two);
}

.omni .button.is-text:active omni-icon, .omni .button.is-text.is-active omni-icon {
	fill: var(--color-dark-two);
}

.omni .button.is-text:disabled omni-icon, .omni .button.is-text[disabled] omni-icon {
	fill: var(--color-core-medium);
}

.omni .button.is-text.is-alt-1 {
	background-color: transparent !important;
	border-color: transparent !important;
	color: var(--color-almost-black);
	fill: var(--color-almost-black);
}

.omni .button.is-text.is-alt-1:before {
	display: none;
}

.omni .button.is-text.is-alt-1:hover omni-icon,
.omni .button.is-text.is-alt-1.is-hovered omni-icon,
.omni .button.is-text.is-alt-1:focus omni-icon,
.omni .button.is-text.is-alt-1.is-focused omni-icon,
.omni .button.is-text.is-alt-1:active omni-icon,
.omni .button.is-text.is-alt-1.is-active omni-icon {
	color: var(--color-primary) !important;
	fill: var(--color-primary) !important;
}
.omni .button.is-text.is-stateless {
	background-color: transparent !important;
	border-color: transparent !important;
	color: var(--color-almost-black);
	fill: var(--color-almost-black);
}

.omni .button.is-text.is-stateless:before {
	display: none;
}

.omni .button.is-text.is-stateless:hover omni-icon,
.omni .button.is-text.is-stateless.is-hovered omni-icon,
.omni .button.is-text.is-stateless:focus omni-icon,
.omni .button.is-text.is-stateless.is-focused omni-icon,
.omni .button.is-text.is-stateless:active omni-icon,
.omni .button.is-text.is-stateless.is-active omni-icon {
	color: var(--color-almost-black);
	fill: var(--color-almost-black);
}
.omni .button.is-white {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .button.is-white:hover, .omni .button.is-white.is-hovered {
	background-color: var(--color-gray-f9);
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .button.is-white:focus, .omni .button.is-white.is-focused {
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .button.is-white:focus:not(:active), .omni .button.is-white.is-focused:not(:active) {
	box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);
}

.omni .button.is-white:active, .omni .button.is-white.is-active {
	background-color: var(--color-gray-f2);
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .button.is-white[disabled],
fieldset[disabled] .omni .button.is-white {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-white.is-inverted {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .button.is-white.is-inverted:hover, .omni .button.is-white.is-inverted.is-hovered {
	background-color: black;
}

.omni .button.is-white.is-inverted[disabled],
fieldset[disabled] .omni .button.is-white.is-inverted {
	background-color: var(--color-gray-0a);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-white.is-loading::after {
	border-color: transparent transparent var(--color-gray-0a) var(--color-gray-0a) !important;
}

.omni .button.is-white.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-white.is-outlined:hover, .omni .button.is-white.is-outlined.is-hovered, .omni .button.is-white.is-outlined:focus, .omni .button.is-white.is-outlined.is-focused {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .button.is-white.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-white.is-outlined.is-loading:hover::after, .omni .button.is-white.is-outlined.is-loading.is-hovered::after, .omni .button.is-white.is-outlined.is-loading:focus::after, .omni .button.is-white.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-gray-0a) var(--color-gray-0a) !important;
}

.omni .button.is-white.is-outlined[disabled],
fieldset[disabled] .omni .button.is-white.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-white.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-gray-0a);
	color: var(--color-gray-0a);
}

.omni .button.is-white.is-inverted.is-outlined:hover, .omni .button.is-white.is-inverted.is-outlined.is-hovered, .omni .button.is-white.is-inverted.is-outlined:focus, .omni .button.is-white.is-inverted.is-outlined.is-focused {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .button.is-white.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-white.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-white.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-white.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-white.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-white.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-gray-0a);
	box-shadow: none;
	color: var(--color-gray-0a);
}

.omni .button.is-black {
	background-color: var(--color-gray-0a);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-black:hover, .omni .button.is-black.is-hovered {
	background-color: #040404;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-black:focus, .omni .button.is-black.is-focused {
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-black:focus:not(:active), .omni .button.is-black.is-focused:not(:active) {
	box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);
}

.omni .button.is-black:active, .omni .button.is-black.is-active {
	background-color: black;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-black[disabled],
fieldset[disabled] .omni .button.is-black {
	background-color: var(--color-gray-0a);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-black.is-inverted {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .button.is-black.is-inverted:hover, .omni .button.is-black.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-black.is-inverted[disabled],
fieldset[disabled] .omni .button.is-black.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-gray-0a);
}

.omni .button.is-black.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-black.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-gray-0a);
	color: var(--color-gray-0a);
}

.omni .button.is-black.is-outlined:hover, .omni .button.is-black.is-outlined.is-hovered, .omni .button.is-black.is-outlined:focus, .omni .button.is-black.is-outlined.is-focused {
	background-color: var(--color-gray-0a);
	border-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .button.is-black.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-gray-0a) var(--color-gray-0a) !important;
}

.omni .button.is-black.is-outlined.is-loading:hover::after, .omni .button.is-black.is-outlined.is-loading.is-hovered::after, .omni .button.is-black.is-outlined.is-loading:focus::after, .omni .button.is-black.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-black.is-outlined[disabled],
fieldset[disabled] .omni .button.is-black.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-gray-0a);
	box-shadow: none;
	color: var(--color-gray-0a);
}

.omni .button.is-black.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-black.is-inverted.is-outlined:hover, .omni .button.is-black.is-inverted.is-outlined.is-hovered, .omni .button.is-black.is-inverted.is-outlined:focus, .omni .button.is-black.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .button.is-black.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-black.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-black.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-black.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-gray-0a) var(--color-gray-0a) !important;
}

.omni .button.is-black.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-black.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-light {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light:hover, .omni .button.is-light.is-hovered {
	background-color: #eeeeee;
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light:focus, .omni .button.is-light.is-focused {
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light:focus:not(:active), .omni .button.is-light.is-focused:not(:active) {
	box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);
}

.omni .button.is-light:active, .omni .button.is-light.is-active {
	background-color: var(--color-gray-e8);
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light[disabled],
fieldset[disabled] .omni .button.is-light {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-light.is-inverted {
	background-color: rgba(0, 0, 0, 0.7);
	color: var(--color-whitesmoke);
}

.omni .button.is-light.is-inverted:hover, .omni .button.is-light.is-inverted.is-hovered {
	background-color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light.is-inverted[disabled],
fieldset[disabled] .omni .button.is-light.is-inverted {
	background-color: rgba(0, 0, 0, 0.7);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-whitesmoke);
}

.omni .button.is-light.is-loading::after {
	border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;
}

.omni .button.is-light.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-whitesmoke);
	color: var(--color-whitesmoke);
}

.omni .button.is-light.is-outlined:hover, .omni .button.is-light.is-outlined.is-hovered, .omni .button.is-light.is-outlined:focus, .omni .button.is-light.is-outlined.is-focused {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-whitesmoke) var(--color-whitesmoke) !important;
}

.omni .button.is-light.is-outlined.is-loading:hover::after, .omni .button.is-light.is-outlined.is-loading.is-hovered::after, .omni .button.is-light.is-outlined.is-loading:focus::after, .omni .button.is-light.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;
}

.omni .button.is-light.is-outlined[disabled],
fieldset[disabled] .omni .button.is-light.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-whitesmoke);
	box-shadow: none;
	color: var(--color-whitesmoke);
}

.omni .button.is-light.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: rgba(0, 0, 0, 0.7);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-light.is-inverted.is-outlined:hover, .omni .button.is-light.is-inverted.is-outlined.is-hovered, .omni .button.is-light.is-inverted.is-outlined:focus, .omni .button.is-light.is-inverted.is-outlined.is-focused {
	background-color: rgba(0, 0, 0, 0.7);
	color: var(--color-whitesmoke);
}

.omni .button.is-light.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-light.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-light.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-light.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-whitesmoke) var(--color-whitesmoke) !important;
}

.omni .button.is-light.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-light.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: rgba(0, 0, 0, 0.7);
	box-shadow: none;
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-dark {
	background-color: var(--color-gray-36);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-dark:hover, .omni .button.is-dark.is-hovered {
	background-color: #2f2f2f;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-dark:focus, .omni .button.is-dark.is-focused {
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-dark:focus:not(:active), .omni .button.is-dark.is-focused:not(:active) {
	box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);
}

.omni .button.is-dark:active, .omni .button.is-dark.is-active {
	background-color: #292929;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-dark[disabled],
fieldset[disabled] .omni .button.is-dark {
	background-color: var(--color-gray-36);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-dark.is-inverted {
	background-color: var(--color-white);
	color: var(--color-gray-36);
}

.omni .button.is-dark.is-inverted:hover, .omni .button.is-dark.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-dark.is-inverted[disabled],
fieldset[disabled] .omni .button.is-dark.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-gray-36);
}

.omni .button.is-dark.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-dark.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-gray-36);
	color: var(--color-gray-36);
}

.omni .button.is-dark.is-outlined:hover, .omni .button.is-dark.is-outlined.is-hovered, .omni .button.is-dark.is-outlined:focus, .omni .button.is-dark.is-outlined.is-focused {
	background-color: var(--color-gray-36);
	border-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .button.is-dark.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-gray-36) var(--color-gray-36) !important;
}

.omni .button.is-dark.is-outlined.is-loading:hover::after, .omni .button.is-dark.is-outlined.is-loading.is-hovered::after, .omni .button.is-dark.is-outlined.is-loading:focus::after, .omni .button.is-dark.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-dark.is-outlined[disabled],
fieldset[disabled] .omni .button.is-dark.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-gray-36);
	box-shadow: none;
	color: var(--color-gray-36);
}

.omni .button.is-dark.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-dark.is-inverted.is-outlined:hover, .omni .button.is-dark.is-inverted.is-outlined.is-hovered, .omni .button.is-dark.is-inverted.is-outlined:focus, .omni .button.is-dark.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-gray-36);
}

.omni .button.is-dark.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-dark.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-dark.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-dark.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-gray-36) var(--color-gray-36) !important;
}

.omni .button.is-dark.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-dark.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-primary {
	background-image: var(--gradient-primary);
	border-color: var(--color-transparent);
	color: var(--color-core-light);
	transition: background-image 0.2s ease-in-out;
}

.omni .button.is-primary:hover, .omni .button.is-primary.is-hovered {
	box-shadow: var(--button-shadow-dark);
	color: var(--color-core-light);
}

.omni .button.is-primary:focus, .omni .button.is-primary.is-focused {
	color: var(--color-core-light);
}

.omni .button.is-primary:focus:not(:active), .omni .button.is-primary.is-focused:not(:active) {
	box-shadow: var(--button-shadow-dark);
}

.omni .button.is-primary:active, .omni .button.is-primary.is-active {
	background-image: linear-gradient(135deg, rgb(var(--rgb-primary), 0.75) 0, rgb(var(--rgb-secondary), 0.75) 100%);
	border: 1px solid rgb(var(--rgb-primary), 0.75);
	color: var(--color-core-light);
}

.omni .button.is-shadowless.is-primary:active, .omni .button.is-shadowless.is-primary.is-active {
  background-image: var(--gradient-primary);
}

.omni .button.is-primary[disabled],
.omni .button.is-primary:disabled,
fieldset[disabled] .omni .button.is-primary {
	background-image: none;
	background-color: var(--color-core-medium-two);
	border-color: var(--color-transparent);
	color: var(--color-core-medium);
}

.omni .button.is-primary.is-inverted {
	background-color: var(--color-white);
	color: var(--color-primary);
}

.omni .button.is-primary.is-inverted:hover, .omni .button.is-primary.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-primary.is-inverted[disabled],
fieldset[disabled] .omni .button.is-primary.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-electric-blue);
}

.omni .button.is-primary.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-primary.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-electric-blue);
	color: var(--color-electric-blue);
}

.omni .button.is-primary.is-outlined:hover, .omni .button.is-primary.is-outlined.is-hovered, .omni .button.is-primary.is-outlined:focus, .omni .button.is-primary.is-outlined.is-focused {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .button.is-primary.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-electric-blue) var(--color-electric-blue) !important;
}

.omni .button.is-primary.is-outlined.is-loading:hover::after, .omni .button.is-primary.is-outlined.is-loading.is-hovered::after, .omni .button.is-primary.is-outlined.is-loading:focus::after, .omni .button.is-primary.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-primary.is-outlined[disabled],
fieldset[disabled] .omni .button.is-primary.is-outlined {
	box-shadow: none;
	color: var(--color-electric-blue);
}

.omni .button.is-primary.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-primary.is-inverted.is-outlined:hover, .omni .button.is-primary.is-inverted.is-outlined.is-hovered, .omni .button.is-primary.is-inverted.is-outlined:focus, .omni .button.is-primary.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-electric-blue);
}

.omni .button.is-primary.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-primary.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-primary.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-primary.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-electric-blue) var(--color-electric-blue) !important;
}

.omni .button.is-primary.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-primary.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-primary.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .button.is-primary.is-light:hover, .omni .button.is-primary.is-light.is-hovered {
	background-color: var(--color-blue-superlight);
	border-color: var(--color-transparent);
	color: var(--color-blue-disappointment);
}

.omni .button.is-primary.is-light:active, .omni .button.is-primary.is-light.is-active {
	background-color: var(--color-blue-light);
	border-color: var(--color-transparent);
	color: var(--color-blue-disappointment);
}

.omni .button.is-link {
	background-color: var(--color-electric-blue);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-link:hover, .omni .button.is-link.is-hovered {
	background-color: var(--color-electric-blue-darker);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-link:focus, .omni .button.is-link.is-focused {
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-link:focus:not(:active), .omni .button.is-link.is-focused:not(:active) {
	box-shadow: var(--bulma-shadow-1);
}

.omni .button.is-link:active, .omni .button.is-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .button.is-link[disabled],
fieldset[disabled] .omni .button.is-link {
	background-color: var(--color-electric-blue);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-link.is-inverted {
	background-color: var(--color-white);
	color: var(--color-electric-blue);
}

.omni .button.is-link.is-inverted:hover, .omni .button.is-link.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-link.is-inverted[disabled],
fieldset[disabled] .omni .button.is-link.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-electric-blue);
}

.omni .button.is-link.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-link.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-electric-blue);
	color: var(--color-electric-blue);
}

.omni .button.is-link.is-outlined:hover, .omni .button.is-link.is-outlined.is-hovered, .omni .button.is-link.is-outlined:focus, .omni .button.is-link.is-outlined.is-focused {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .button.is-link.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-electric-blue) var(--color-electric-blue) !important;
}

.omni .button.is-link.is-outlined.is-loading:hover::after, .omni .button.is-link.is-outlined.is-loading.is-hovered::after, .omni .button.is-link.is-outlined.is-loading:focus::after, .omni .button.is-link.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-link.is-outlined[disabled],
fieldset[disabled] .omni .button.is-link.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-electric-blue);
	box-shadow: none;
	color: var(--color-electric-blue);
}

.omni .button.is-link.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-link.is-inverted.is-outlined:hover, .omni .button.is-link.is-inverted.is-outlined.is-hovered, .omni .button.is-link.is-inverted.is-outlined:focus, .omni .button.is-link.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-electric-blue);
}

.omni .button.is-link.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-link.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-link.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-link.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-electric-blue) var(--color-electric-blue) !important;
}

.omni .button.is-link.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-link.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-link.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .button.is-link.is-light:hover, .omni .button.is-link.is-light.is-hovered {
	background-color: var(--color-blue-superlight);
	border-color: var(--color-transparent);
	color: var(--color-blue-disappointment);
}

.omni .button.is-link.is-light:active, .omni .button.is-link.is-light.is-active {
	background-color: var(--color-blue-light);
	border-color: var(--color-transparent);
	color: var(--color-blue-disappointment);
}

.omni .button.is-info {
	border-color: var(--color-transparent);
	color: var(--color-info);
}

.omni .button.is-info:hover, .omni .button.is-info.is-hovered {
	border-color: var(--color-transparent);
}

.omni .button.is-info[disabled],
fieldset[disabled] .omni .button.is-info {
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-info.is-inverted {
	background-color: var(--color-white);
	color: var(--color-info);
}

.omni .button.is-info.is-inverted:hover, .omni .button.is-info.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-info.is-inverted[disabled],
fieldset[disabled] .omni .button.is-info.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-info);
}

.omni .button.is-info.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-info.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-info);
	color: var(--color-info);
}

.omni .button.is-info.is-outlined:hover, .omni .button.is-info.is-outlined.is-hovered, .omni .button.is-info.is-outlined:focus, .omni .button.is-info.is-outlined.is-focused {
	background-image: var(--gradient-info);
	border-color: var(--color-info);
	color: var(--color-white);
}

.omni .button.is-info.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-info) var(--color-) !important;
}

.omni .button.is-info.is-outlined.is-loading:hover::after, .omni .button.is-info.is-outlined.is-loading.is-hovered::after, .omni .button.is-info.is-outlined.is-loading:focus::after, .omni .button.is-info.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-info.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-info.is-inverted.is-outlined:hover, .omni .button.is-info.is-inverted.is-outlined.is-hovered, .omni .button.is-info.is-inverted.is-outlined:focus, .omni .button.is-info.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-info);
}

.omni .button.is-info.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-info.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-info.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-info.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-info) var(--color-info) !important;
}

.omni .button.is-info.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-info.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-info.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .button.is-info.is-light:hover, .omni .button.is-info.is-light.is-hovered {
	background-color: var(--color-blue-superlight);
	border-color: var(--color-transparent);
	color: var(--color-blue-disappointment);
}

.omni .button.is-info.is-light:active, .omni .button.is-info.is-light.is-active {
	background-color: var(--color-blue-light);
	border-color: var(--color-transparent);
	color: var(--color-blue-disappointment);
}

.omni .button.is-success {
  color: var(--color-success);
}

.omni .button.is-success[disabled],
fieldset[disabled] .omni .button.is-success {
	background-color: var(--color-mint);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-success.is-inverted {
	background-color: var(--color-white);
	color: var(--color-mint);
}

.omni .button.is-success.is-inverted:hover, .omni .button.is-success.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-success.is-inverted[disabled],
fieldset[disabled] .omni .button.is-success.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-mint);
}

.omni .button.is-success.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-success.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-success);
	color: var(--color-success);
}

.omni .button.is-success.is-outlined:hover, .omni .button.is-success.is-outlined.is-hovered, .omni .button.is-success.is-outlined:focus, .omni .button.is-success.is-outlined.is-focused {
	background-image: var(--gradient-success);
	border-color: var(--color-mint);
	color: var(--color-white);
}

.omni .button.is-success.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-mint) var(--color-mint) !important;
}

.omni .button.is-success.is-outlined.is-loading:hover::after, .omni .button.is-success.is-outlined.is-loading.is-hovered::after, .omni .button.is-success.is-outlined.is-loading:focus::after, .omni .button.is-success.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-success.is-outlined[disabled],
fieldset[disabled] .omni .button.is-success.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-mint);
	box-shadow: none;
	color: var(--color-mint);
}

.omni .button.is-success.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-success.is-inverted.is-outlined:hover, .omni .button.is-success.is-inverted.is-outlined.is-hovered, .omni .button.is-success.is-inverted.is-outlined:focus, .omni .button.is-success.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-mint);
}

.omni .button.is-success.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-success.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-success.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-success.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-mint) var(--color-mint) !important;
}

.omni .button.is-success.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-success.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-success.is-light {
	background-color: #eefbf9;
	color: #1e8576;
}

.omni .button.is-success.is-light:hover, .omni .button.is-success.is-light.is-hovered {
	background-color: #e4f9f6;
	border-color: var(--color-transparent);
	color: #1e8576;
}

.omni .button.is-success.is-light:active, .omni .button.is-success.is-light.is-active {
	background-color: #daf7f2;
	border-color: var(--color-transparent);
	color: #1e8576;
}

.omni .button.is-warning[disabled],
fieldset[disabled] .omni .button.is-warning {
	background-color: var(--color-honeycomb);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-warning.is-inverted {
	background-color: rgba(0, 0, 0, 0.7);
	color: #ffdd57;
}

.omni .button.is-warning.is-inverted:hover, .omni .button.is-warning.is-inverted.is-hovered {
	background-color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-warning.is-inverted[disabled],
fieldset[disabled] .omni .button.is-warning.is-inverted {
	background-color: rgba(0, 0, 0, 0.7);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-alert);
}

.omni .button.is-warning.is-loading::after {
	border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;
}

.omni .button.is-warning.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-alert);
	color: var(--color-alert);
}

.omni .button.is-warning.is-outlined:hover, .omni .button.is-warning.is-outlined.is-hovered, .omni .button.is-warning.is-outlined:focus, .omni .button.is-warning.is-outlined.is-focused {
	border-color: var(--color-alert);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-warning.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-alert) var(--color-alert) !important;
}

.omni .button.is-warning.is-outlined.is-loading:hover::after, .omni .button.is-warning.is-outlined.is-loading.is-hovered::after, .omni .button.is-warning.is-outlined.is-loading:focus::after, .omni .button.is-warning.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent rgba(0, 0, 0, 0.7) rgba(0, 0, 0, 0.7) !important;
}

.omni .button.is-warning.is-outlined[disabled],
fieldset[disabled] .omni .button.is-warning.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-alert);
	box-shadow: none;
	color: var(--color-alert);
}

.omni .button.is-warning.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: rgba(0, 0, 0, 0.7);
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-warning.is-inverted.is-outlined:hover, .omni .button.is-warning.is-inverted.is-outlined.is-hovered, .omni .button.is-warning.is-inverted.is-outlined:focus, .omni .button.is-warning.is-inverted.is-outlined.is-focused {
	background-color: rgba(0, 0, 0, 0.7);
	color: var(--color-alert);
}

.omni .button.is-warning.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-warning.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-warning.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-warning.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-alert) var(--color-alert) !important;
}

.omni .button.is-warning.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-warning.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: rgba(0, 0, 0, 0.7);
	box-shadow: none;
	color: rgba(0, 0, 0, 0.7);
}

.omni .button.is-warning.is-light {
	background-color: #fff9eb;
	color: #936601;
}

.omni .button.is-warning.is-light:hover, .omni .button.is-warning.is-light.is-hovered {
	background-color: #fff5de;
	border-color: var(--color-transparent);
	color: #936601;
}

.omni .button.is-warning.is-light:active, .omni .button.is-warning.is-light.is-active {
	background-color: #fff1d1;
	border-color: var(--color-transparent);
	color: #936601;
}

.omni .button.is-danger {
  color: var(--color-error);
}

.omni .button.is-danger[disabled],
fieldset[disabled] .omni .button.is-danger {
	background-color: var(--color-error);
	border-color: var(--color-transparent);
	box-shadow: none;
}

.omni .button.is-danger.is-inverted {
	background-color: var(--color-white);
	color: #f14668;
}

.omni .button.is-danger.is-inverted:hover, .omni .button.is-danger.is-inverted.is-hovered {
	background-color: var(--color-gray-f2);
}

.omni .button.is-danger.is-inverted[disabled],
fieldset[disabled] .omni .button.is-danger.is-inverted {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	box-shadow: none;
	color: var(--color-error);
}

.omni .button.is-danger.is-loading::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-danger.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-error);
	color: var(--color-error);
}

.omni .button.is-danger.is-outlined:hover, .omni .button.is-danger.is-outlined.is-hovered, .omni .button.is-danger.is-outlined:focus, .omni .button.is-danger.is-outlined.is-focused {
	background-image: var(--gradient-error);
	border-color: var(--color-error);
	color: var(--color-white);
}

.omni .button.is-danger.is-outlined.is-loading::after {
	border-color: transparent transparent var(--color-error) var(--color-error) !important;
}

.omni .button.is-danger.is-outlined.is-loading:hover::after, .omni .button.is-danger.is-outlined.is-loading.is-hovered::after, .omni .button.is-danger.is-outlined.is-loading:focus::after, .omni .button.is-danger.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-white) var(--color-white) !important;
}

.omni .button.is-danger.is-outlined[disabled],
fieldset[disabled] .omni .button.is-danger.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-error);
	box-shadow: none;
	color: var(--color-error);
}

.omni .button.is-danger.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	color: var(--color-white);
}

.omni .button.is-danger.is-inverted.is-outlined:hover, .omni .button.is-danger.is-inverted.is-outlined.is-hovered, .omni .button.is-danger.is-inverted.is-outlined:focus, .omni .button.is-danger.is-inverted.is-outlined.is-focused {
	background-color: var(--color-white);
	color: var(--color-error);
}

.omni .button.is-danger.is-inverted.is-outlined.is-loading:hover::after, .omni .button.is-danger.is-inverted.is-outlined.is-loading.is-hovered::after, .omni .button.is-danger.is-inverted.is-outlined.is-loading:focus::after, .omni .button.is-danger.is-inverted.is-outlined.is-loading.is-focused::after {
	border-color: transparent transparent var(--color-error) var(--color-error) !important;
}

.omni .button.is-danger.is-inverted.is-outlined[disabled],
fieldset[disabled] .omni .button.is-danger.is-inverted.is-outlined {
	background-color: var(--color-transparent);
	border-color: var(--color-white);
	box-shadow: none;
	color: var(--color-white);
}

.omni .button.is-danger.is-light {
	background-color: #fceef1;
	color: #b42246;
}

.omni .button.is-danger.is-light:hover, .omni .button.is-danger.is-light.is-hovered {
	background-color: #fae3e9;
	border-color: var(--color-transparent);
	color: #b42246;
}

.omni .button.is-danger.is-light:active, .omni .button.is-danger.is-light.is-active {
	background-color: #f8d8e0;
	border-color: var(--color-transparent);
	color: #b42246;
}

.omni .button.is-small {
	border-radius: var(--radius-small);
	font-size: var(--size-7);
}

.omni .button.is-normal {
	font-size: var(--size-4);
}

.omni .button.is-medium {
	font-size: var(--size-5);
}

.omni .button.is-large {
	font-size: var(--size-3);
}

.omni .button[disabled],
.omni .button:disabled,
fieldset[disabled] .omni .button {
	background-color: var(--color-core-medium-two);
	color: var(--color-core-medium);
	opacity: 0.5;
	pointer-events: none;
}

.omni .button.is-fullwidth {
	display: flex;
	width: 100%;
}

.omni .button.is-loading {
	color: transparent !important;
	pointer-events: none;
}

.omni .button.is-loading::after {
	position: absolute;
	left: calc(50% - (1em / 2));
	top: calc(50% - (1em / 2));
	position: absolute !important;
}

.omni .button.is-static {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-gray-db);
	color: var(--color-gray-7a);
	box-shadow: none;
	pointer-events: none;
}

.omni .button.is-rounded {
	border-radius: 290486px;
	padding-left: calc(1em + 0.25em);
	padding-right: calc(1em + 0.25em);
}

.omni .buttons {
	align-items: center;
	display: flex;
	flex-wrap: wrap;
	justify-content: flex-start;
}

.omni .buttons .button {
	margin-bottom: 0.5rem;
}

.omni .buttons .button:not(:last-child):not(.is-fullwidth) {
	margin-right: 0.5rem;
}

.omni .buttons:last-child {
	margin-bottom: -0.5rem;
}

.omni .buttons:not(:last-child) {
	margin-bottom: 1rem;
}

.omni .buttons.are-small .button:not(.is-normal):not(.is-medium):not(.is-large) {
	border-radius: var(--radius-small);
	font-size: var(--size-7);
}

.omni .buttons.are-medium .button:not(.is-small):not(.is-normal):not(.is-large) {
	font-size: var(--size-5);
}

.omni .buttons.are-large .button:not(.is-small):not(.is-normal):not(.is-medium) {
	font-size: var(--size-4);
}

.omni .buttons.has-addons .button:not(:first-child) {
	border-bottom-left-radius: 0;
	border-top-left-radius: 0;
}

.omni .buttons.has-addons .button:not(:last-child) {
	border-bottom-right-radius: 0;
	border-top-right-radius: 0;
	margin-right: -1px;
}

.omni .buttons.has-addons .button:last-child {
	margin-right: 0;
}

.omni .buttons.has-addons .button:hover, .omni .buttons.has-addons .button.is-hovered {
	z-index: 2;
}

.omni .buttons.has-addons .button:focus, .omni .buttons.has-addons .button.is-focused, .omni .buttons.has-addons .button:active, .omni .buttons.has-addons .button.is-active, .omni .buttons.has-addons .button.is-selected {
	z-index: 3;
}

.omni .buttons.has-addons .button:focus:hover, .omni .buttons.has-addons .button.is-focused:hover, .omni .buttons.has-addons .button:active:hover, .omni .buttons.has-addons .button.is-active:hover, .omni .buttons.has-addons .button.is-selected:hover {
	z-index: 4;
}

.omni .buttons.has-addons .button.is-expanded {
	flex-grow: 1;
	flex-shrink: 1;
}

.omni .buttons.is-centered {
	justify-content: center;
}

.omni .buttons.is-centered:not(.has-addons) .button:not(.is-fullwidth) {
	margin-left: 0.25rem;
	margin-right: 0.25rem;
}

.omni .buttons.is-right {
	justify-content: flex-end;
}

.omni .buttons.is-right:not(.has-addons) .button:not(.is-fullwidth) {
	margin-left: 0.25rem;
	margin-right: 0.25rem;
}

.omni .container {
	flex-grow: 1;
	margin: 0 auto;
	position: relative;
	width: auto;
}

.omni .container.is-fluid {
	max-width: none !important;
	padding-left: 32px;
	padding-right: 32px;
	width: 100%;
}
@media screen and (min-width: 1024px) {
	.omni .container {
		max-width: 960px;
	}
}
@media screen and (max-width: 1215px) {
	.omni .container.is-widescreen:not(.is-max-desktop) {
		max-width: 1152px;
	}
}
@media screen and (max-width: 1407px) {
	.omni .container.is-fullhd:not(.is-max-desktop):not(.is-max-widescreen) {
		max-width: 1344px;
	}
}
@media screen and (min-width: 1216px) {
	.omni .container:not(.is-max-desktop) {
		max-width: 1152px;
	}
}
@media screen and (min-width: 1408px) {
	.omni .container:not(.is-max-desktop):not(.is-max-widescreen) {
		max-width: 1344px;
	}
}

.omni .content li + li {
	margin-top: 0.25em;
}

.omni .content p:not(:last-child),
.omni .content dl:not(:last-child),
.omni .content ol:not(:last-child),
.omni .content ul:not(:last-child),
.omni .content blockquote:not(:last-child),
.omni .content pre:not(:last-child),
.omni .content table:not(:last-child) {
	margin-bottom: 1em;
}

.omni .content h1,
.omni .content h2,
.omni .content h3,
.omni .content h4,
.omni .content h5,
.omni .content h6 {
	color: var(--color-gray-36);
	font-weight: 600;
	line-height: 1.125;
}

.omni .content h1 {
	font-size: 2em;
	margin-bottom: 0.5em;
}

.omni .content h1:not(:first-child) {
	margin-top: 1em;
}

.omni .content h2 {
	font-size: 1.75em;
	margin-bottom: 0.5714em;
}

.omni .content h2:not(:first-child) {
	margin-top: 1.1428em;
}

.omni .content h3 {
	font-size: 1.5em;
	margin-bottom: 0.6666em;
}

.omni .content h3:not(:first-child) {
	margin-top: 1.3333em;
}

.omni .content h4 {
	font-size: 1.25em;
	margin-bottom: 0.8em;
}

.omni .content h5 {
	font-size: 1.125em;
	margin-bottom: 0.8888em;
}

.omni .content h6 {
	font-size: 1em;
	margin-bottom: 1em;
}

.omni .content blockquote {
	background-color: var(--color-whitesmoke);
	border-left: 5px solid var(--color-gray-db);
	padding: 1.25em 1.5em;
}

.omni .content ol {
	list-style-position: outside;
	margin-left: 2em;
	margin-top: 1em;
}

.omni .content ol:not([type]) {
	list-style-type: decimal;
}

.omni .content ol:not([type]).is-lower-alpha {
	list-style-type: lower-alpha;
}

.omni .content ol:not([type]).is-lower-roman {
	list-style-type: lower-roman;
}

.omni .content ol:not([type]).is-upper-alpha {
	list-style-type: upper-alpha;
}

.omni .content ol:not([type]).is-upper-roman {
	list-style-type: upper-roman;
}

.omni .content ul {
	list-style: disc outside;
	margin-left: 2em;
	margin-top: 1em;
}

.omni .content ul ul {
	list-style-type: circle;
	margin-top: 0.5em;
}

.omni .content ul ul ul {
	list-style-type: square;
}

.omni .content dd {
	margin-left: 2em;
}

.omni .content figure {
	margin-left: 2em;
	margin-right: 2em;
	text-align: center;
}

.omni .content figure:not(:first-child) {
	margin-top: 2em;
}

.omni .content figure:not(:last-child) {
	margin-bottom: 2em;
}

.omni .content figure img {
	display: inline-block;
}

.omni .content figure figcaption {
	font-style: italic;
}

.omni .content pre {
	-webkit-overflow-scrolling: touch;
	overflow-x: auto;
	padding: 1.25em 1.5em;
	white-space: pre;
	word-wrap: normal;
}

.omni .content sup,
.omni .content sub {
	font-size: 75%;
}

.omni .content table {
	width: 100%;
}

.omni .content table td,
.omni .content table th {
	border: 1px solid var(--color-gray-db);
	border-width: 0 0 1px;
	padding: 0.5em 0.75em;
	vertical-align: top;
}

.omni .content table th {
	color: var(--color-gray-36);
}

.omni .content table th:not([align]) {
	text-align: inherit;
}

.omni .content table thead td,
.omni .content table thead th {
	border-width: 0 0 2px;
	color: var(--color-gray-36);
}

.omni .content table tfoot td,
.omni .content table tfoot th {
	border-width: 2px 0 0;
	color: var(--color-gray-36);
}

.omni .content table tbody tr:last-child td,
.omni .content table tbody tr:last-child th {
	border-bottom-width: 0;
}

.omni .content .tabs li + li {
	margin-top: 0;
}

.omni .content.is-small {
	font-size: var(--size-7);
}

.omni .content.is-medium {
	font-size: var(--size-5);
}

.omni .content.is-large {
	font-size: var(--size-3);
}

.omni .icon {
	align-items: center;
	display: inline-flex;
	justify-content: center;
	height: 1.5rem;
	width: 1.5rem;
}

.omni .icon.is-small {
	height: 1rem;
	width: 1rem;
}

.omni .icon.is-medium {
	height: 2rem;
	width: 2rem;
}

.omni .icon.is-large {
	height: 3rem;
	width: 3rem;
}

.omni .image {
	display: block;
	position: relative;
}

.omni .image img {
	display: block;
	height: auto;
	width: 100%;
}

.omni .image img.is-rounded,
.omni img.image.is-rounded {
  object-fit: cover;
	border-radius: 290486px;
}

.omni .image.is-fullwidth {
	width: 100%;
}

.omni .image.is-square img,
.omni .image.is-square .has-ratio, .omni .image.is-1by1 img,
.omni .image.is-1by1 .has-ratio, .omni .image.is-5by4 img,
.omni .image.is-5by4 .has-ratio, .omni .image.is-4by3 img,
.omni .image.is-4by3 .has-ratio, .omni .image.is-3by2 img,
.omni .image.is-3by2 .has-ratio, .omni .image.is-5by3 img,
.omni .image.is-5by3 .has-ratio, .omni .image.is-16by9 img,
.omni .image.is-16by9 .has-ratio, .omni .image.is-2by1 img,
.omni .image.is-2by1 .has-ratio, .omni .image.is-3by1 img,
.omni .image.is-3by1 .has-ratio, .omni .image.is-4by5 img,
.omni .image.is-4by5 .has-ratio, .omni .image.is-3by4 img,
.omni .image.is-3by4 .has-ratio, .omni .image.is-2by3 img,
.omni .image.is-2by3 .has-ratio, .omni .image.is-3by5 img,
.omni .image.is-3by5 .has-ratio, .omni .image.is-9by16 img,
.omni .image.is-9by16 .has-ratio, .omni .image.is-1by2 img,
.omni .image.is-1by2 .has-ratio, .omni .image.is-1by3 img,
.omni .image.is-1by3 .has-ratio {
	height: 100%;
	width: 100%;
}

.omni .image.is-square, .omni .image.is-1by1 {
	padding-top: 100%;
}

.omni .image.is-5by4 {
	padding-top: 80%;
}

.omni .image.is-4by3 {
	padding-top: 75%;
}

.omni .image.is-3by2 {
	padding-top: 66.6666%;
}

.omni .image.is-5by3 {
	padding-top: 60%;
}

.omni .image.is-16by9 {
	padding-top: 56.25%;
}

.omni .image.is-2by1 {
	padding-top: 50%;
}

.omni .image.is-3by1 {
	padding-top: 33.3333%;
}

.omni .image.is-4by5 {
	padding-top: 125%;
}

.omni .image.is-3by4 {
	padding-top: 133.3333%;
}

.omni .image.is-2by3 {
	padding-top: 150%;
}

.omni .image.is-3by5 {
	padding-top: 166.6666%;
}

.omni .image.is-9by16 {
	padding-top: 177.7777%;
}

.omni .image.is-1by2 {
	padding-top: 200%;
}

.omni .image.is-1by3 {
	padding-top: 300%;
}

.omni .image.is-16x16 {
	height: 16px;
	width: 16px;
}

.omni .image.is-24x24 {
	height: 24px;
	width: 24px;
}

.omni .image.is-32x32 {
	height: 32px;
	width: 32px;
}

.omni .image.is-48x48 {
	height: 48px;
	width: 48px;
}

.omni .image.is-64x64 {
	height: 64px;
	width: 64px;
}

.omni .image.is-96x96 {
	height: 96px;
	width: 96px;
}

.omni .image.is-128x128 {
	height: 128px;
	width: 128px;
}

.omni .notification {
	background-color: var(--color-whitesmoke);
	border-radius: var(--radius);
	position: relative;
	padding: 1.25rem 2.5rem 1.25rem 1.5rem;
}

.omni .notification a:not(.button):not(.dropdown-item) {
	color: currentColor;
	text-decoration: underline;
}

.omni .notification strong {
	color: currentColor;
}

.omni .notification code,
.omni .notification pre {
	background: var(--color-white);
}

.omni .notification pre code {
	background: transparent;
}

.omni .notification > .delete {
	right: 0.5rem;
	position: absolute;
	top: 0.5rem;
}

.omni .notification .title,
.omni .notification .subtitle,
.omni .notification .content {
	color: currentColor;
}

.omni .notification.is-white {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .notification.is-black {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .notification.is-light {
	background-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .notification.is-dark {
	background-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .notification.is-primary {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .notification.is-primary.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .notification.is-link {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .notification.is-link.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .notification.is-info {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .notification.is-info.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .notification.is-success {
	background-color: transparent;
	color: var(--color-white);
}

.omni .notification.is-success.is-light {
	background-color: #eefbf9;
	color: #1e8576;
}

.omni .notification.is-warning {
	background-image: var(--gradient-alert);
	color: rgba(0, 0, 0, 0.7);
}

.omni .notification.is-warning.is-light {
	background-color: #fff9eb;
	color: #936601;
}

.omni .notification.is-danger {
	background-image: var(--gradient-error);
	color: var(--color-white);
}

.omni .notification.is-danger.is-light {
	background-color: #fceef1;
	color: #b42246;
}

.omni .progress {
	-moz-appearance: none;
	-webkit-appearance: none;
	border: none;
	border-radius: 290486px;
	display: block;
	height: 1rem;
	overflow: hidden;
	padding: 0;
	width: 100%;
}

.omni .progress::-webkit-progress-bar {
	background-color: #ededed;
}

.omni .progress::-webkit-progress-value {
	background-color: var(--color-gray-4a);
}

.omni .progress::-moz-progress-bar {
	background-color: var(--color-gray-4a);
}

.omni .progress::-ms-fill {
	background-color: var(--color-gray-4a);
	border: none;
}

.omni .progress.is-white::-webkit-progress-value {
	background-color: var(--color-white);
}

.omni .progress.is-white::-moz-progress-bar {
	background-color: var(--color-white);
}

.omni .progress.is-white::-ms-fill {
	background-color: var(--color-white);
}

.omni .progress.is-white:indeterminate {
	background-image: linear-gradient(to right, var(--color-white) 30%, #ededed 30%);
}

.omni .progress.is-black::-webkit-progress-value {
	background-color: var(--color-gray-0a);
}

.omni .progress.is-black::-moz-progress-bar {
	background-color: var(--color-gray-0a);
}

.omni .progress.is-black::-ms-fill {
	background-color: var(--color-gray-0a);
}

.omni .progress.is-black:indeterminate {
	background-image: linear-gradient(to right, var(--color-gray-0a) 30%, #ededed 30%);
}

.omni .progress.is-light::-webkit-progress-value {
	background-color: var(--color-whitesmoke);
}

.omni .progress.is-light::-moz-progress-bar {
	background-color: var(--color-whitesmoke);
}

.omni .progress.is-light::-ms-fill {
	background-color: var(--color-whitesmoke);
}

.omni .progress.is-light:indeterminate {
	background-image: linear-gradient(to right, var(--color-whitesmoke) 30%, #ededed 30%);
}

.omni .progress.is-dark::-webkit-progress-value {
	background-color: var(--color-gray-36);
}

.omni .progress.is-dark::-moz-progress-bar {
	background-color: var(--color-gray-36);
}

.omni .progress.is-dark::-ms-fill {
	background-color: var(--color-gray-36);
}

.omni .progress.is-dark:indeterminate {
	background-image: linear-gradient(to right, var(--color-gray-36) 30%, #ededed 30%);
}

.omni .progress.is-primary::-webkit-progress-value {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-primary::-moz-progress-bar {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-primary::-ms-fill {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-primary:indeterminate {
	background-image: linear-gradient(to right, var(--color-electric-blue) 30%, #ededed 30%);
}

.omni .progress.is-link::-webkit-progress-value {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-link::-moz-progress-bar {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-link::-ms-fill {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-link:indeterminate {
	background-image: linear-gradient(to right, var(--color-electric-blue) 30%, #ededed 30%);
}

.omni .progress.is-info::-webkit-progress-value {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-info::-moz-progress-bar {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-info::-ms-fill {
	background-color: var(--color-electric-blue);
}

.omni .progress.is-info:indeterminate {
	background-image: linear-gradient(to right, var(--color-electric-blue) 30%, #ededed 30%);
}

.omni .progress.is-success::-webkit-progress-value {
	background-color: var(--color-mint);
}

.omni .progress.is-success::-moz-progress-bar {
	background-color: var(--color-mint);
}

.omni .progress.is-success::-ms-fill {
	background-color: var(--color-mint);
}

.omni .progress.is-success:indeterminate {
	background-image: linear-gradient(to right, var(--color-mint) 30%, #ededed 30%);
}

.omni .progress.is-warning::-webkit-progress-value {
	background-color: var(--color-honeycomb);
}

.omni .progress.is-warning::-moz-progress-bar {
	background-color: var(--color-honeycomb);
}

.omni .progress.is-warning::-ms-fill {
	background-color: var(--color-honeycomb);
}

.omni .progress.is-warning:indeterminate {
	background-image: linear-gradient(to right, var(--color-honeycomb) 30%, #ededed 30%);
}

.omni .progress.is-danger::-webkit-progress-value {
	background-color: var(--color-error);
}

.omni .progress.is-danger::-moz-progress-bar {
	background-color: var(--color-error);
}

.omni .progress.is-danger::-ms-fill {
	background-color: var(--color-error);
}

.omni .progress.is-danger:indeterminate {
	background-image: linear-gradient(to right, var(--color-error) 30%, #ededed 30%);
}

.omni .progress:indeterminate {
	animation-duration: 1.5s;
	animation-iteration-count: infinite;
	animation-name: moveIndeterminate;
	animation-timing-function: linear;
	background-color: #ededed;
	background-image: linear-gradient(to right, var(--color-gray-4a) 30%, #ededed 30%);
	background-position: top left;
	background-repeat: no-repeat;
	background-size: 150% 150%;
}

.omni .progress:indeterminate::-webkit-progress-bar {
	background-color: var(--color-transparent);
}

.omni .progress:indeterminate::-moz-progress-bar {
	background-color: var(--color-transparent);
}

.omni .progress:indeterminate::-ms-fill {
	animation-name: none;
}

.omni .progress.is-small {
	height: var(--size-small);
}

.omni .progress.is-medium {
	height: var(--size-medium);
}

.omni .progress.is-large {
	height: var(--size-1);
}

@keyframes moveIndeterminate {
	from {
		background-position: 200% 0;
	}
	to {
		background-position: -200% 0;
	}
}

.omni .table {
	background-color: #f5f8fb;
	color: var(--color-shark);
}

.omni .table td,
.omni .table th {
	border: 1px solid #f1f5fa;
	border-width: 1px;
	padding: 0.6rem 2.1rem;
	vertical-align: top;
}

.omni .table td.is-white,
.omni .table th.is-white {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .table td.is-black,
.omni .table th.is-black {
	background-color: var(--color-gray-0a);
	border-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .table td.is-light,
.omni .table th.is-light {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .table td.is-dark,
.omni .table th.is-dark {
	background-color: var(--color-gray-36);
	border-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .table td.is-primary,
.omni .table th.is-primary {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .table td.is-link,
.omni .table th.is-link {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .table td.is-info,
.omni .table th.is-info {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .table td.is-success,
.omni .table th.is-success {
	background-color: var(--color-mint);
	border-color: var(--color-mint);
	color: var(--color-white);
}

.omni .table td.is-warning,
.omni .table th.is-warning {
	background-color: var(--color-honeycomb);
	border-color: var(--color-honeycomb);
	color: rgba(0, 0, 0, 0.7);
}

.omni .table td.is-danger,
.omni .table th.is-danger {
	background-color: var(--color-error);
	border-color: var(--color-error);
	color: var(--color-white);
}

.omni .table td.is-narrow,
.omni .table th.is-narrow {
	white-space: nowrap;
	width: 1%;
}

.omni .table td.is-selected,
.omni .table th.is-selected {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .table td.is-selected a,
.omni .table td.is-selected strong,
.omni .table th.is-selected a,
.omni .table th.is-selected strong {
	color: currentColor;
}

.omni .table td.is-vcentered,
.omni .table th.is-vcentered {
	vertical-align: middle;
}

.omni .table th {
	color: var(--color-gray-36);
}

.omni .table th:not([align]) {
	text-align: inherit;
}

.omni .table tr.is-selected {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .table tr.is-selected a,
.omni .table tr.is-selected strong {
	color: currentColor;
}

.omni .table tr.is-selected td,
.omni .table tr.is-selected th {
	border-color: var(--color-white);
	color: currentColor;
}

.omni .table thead {
	background-color: #f5f8fb;
}

.omni .table thead td,
.omni .table thead th {
	border-width: 0;
	color: var(--color-almost-black);
}

.omni .table tfoot {
	background-color: var(--color-transparent);
}

.omni .table tfoot td,
.omni .table tfoot th {
	border-width: 2px 0 0;
	color: var(--color-gray-36);
}

.omni .table tbody {
	background-color: var(--color-transparent);
}

.omni .table tbody tr:last-child td,
.omni .table tbody tr:last-child th {
	border-bottom-width: 0;
}

.omni .table.is-bordered td,
.omni .table.is-bordered th {
	border-width: 1px;
}

.omni .table.is-bordered tr:last-child td,
.omni .table.is-bordered tr:last-child th {
	border-bottom-width: 1px;
}

.omni .table.is-fullwidth {
	width: 100%;
}

.omni .table.is-hoverable tbody tr:not(.is-selected):hover {
	background-color: var(--color-transparent);
}

.omni .table.is-hoverable.is-striped tbody tr:not(.is-selected):hover {
	background-color: var(--color-transparent);
}

.omni .table.is-hoverable.is-striped tbody tr:not(.is-selected):hover:nth-child(even) {
	background-color: var(--color-whitesmoke);
}

.omni .table.is-narrow td,
.omni .table.is-narrow th {
	padding: 0.25em 0.5em;
}

.omni .table.is-striped tbody tr:not(.is-selected):nth-child(even) {
	background-color: #fafafa;
}

.omni .table-container {
	-webkit-overflow-scrolling: touch;
	overflow: auto;
	overflow-y: hidden;
	max-width: 100%;
}

.omni .tags {
	align-items: center;
	display: flex;
	flex-wrap: wrap;
	justify-content: flex-start;
}

.omni .tags .tag {
	margin-bottom: 0.5rem;
}

.omni .tags .tag:not(:last-child) {
	margin-right: 0.5rem;
}

.omni .tags:last-child {
	margin-bottom: -0.5rem;
}

.omni .tags:not(:last-child) {
	margin-bottom: 1rem;
}

.omni .tags.are-medium .tag:not(.is-normal):not(.is-large) {
	font-size: var(--size-4);
}

.omni .tags.are-large .tag:not(.is-normal):not(.is-medium) {
	font-size: var(--size-3);
}

.omni .tags.is-centered {
	justify-content: center;
}

.omni .tags.is-centered .tag {
	margin-right: 0.25rem;
	margin-left: 0.25rem;
}

.omni .tags.is-right {
	justify-content: flex-end;
}

.omni .tags.is-right .tag:not(:first-child) {
	margin-left: 0.5rem;
}

.omni .tags.is-right .tag:not(:last-child) {
	margin-right: 0;
}

.omni .tags.has-addons .tag {
	margin-right: 0;
}

.omni .tags.has-addons .tag:not(:first-child) {
	margin-left: 0;
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
}

.omni .tags.has-addons .tag:not(:last-child) {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
}

.omni .tag:not(body) {
	align-items: center;
	background-color: var(--color-whitesmoke);
	border-radius: var(--radius);
	color: var(--color-gray-4a);
	display: inline-flex;
	font-size: var(--size-6);
	height: 2em;
	justify-content: center;
	line-height: 1.5;
	padding-left: 0.75em;
	padding-right: 0.75em;
	white-space: nowrap;
}

.omni .tag:not(body) .delete {
	margin-left: 0.25rem;
	margin-right: -0.375rem;
}

.omni .tag:not(body).is-white {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .tag:not(body).is-black {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .tag:not(body).is-light {
	background-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .tag:not(body).is-dark {
	background-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .tag:not(body).is-primary {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .tag:not(body).is-primary.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .tag:not(body).is-link {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .tag:not(body).is-link.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .tag:not(body).is-info {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .tag:not(body).is-info.is-light {
	background-color: var(--color-blue-ultralight);
	color: var(--color-blue-disappointment);
}

.omni .tag:not(body).is-success {
	background-color: var(--color-mint);
	color: var(--color-white);
}

.omni .tag:not(body).is-success.is-light {
	background-color: #eefbf9;
	color: #1e8576;
}

.omni .tag:not(body).is-warning {
	background-color: var(--color-honeycomb);
	color: rgba(0, 0, 0, 0.7);
}

.omni .tag:not(body).is-warning.is-light {
	background-color: #fff9eb;
	color: #936601;
}

.omni .tag:not(body).is-danger {
	background-color: var(--color-error);
	color: var(--color-white);
}

.omni .tag:not(body).is-danger.is-light {
	background-color: #fceef1;
	color: #b42246;
}

.omni .tag:not(body).is-normal,
.omni .tag:not(body).is-medium {
	font-size: var(--size-4);
}

.omni .tag:not(body).is-large {
	font-size: var(--size-3);
}

.omni .tag:not(body) .icon:first-child:not(:last-child) {
	margin-left: -0.375em;
	margin-right: 0.1875em;
}

.omni .tag:not(body) .icon:last-child:not(:first-child) {
	margin-left: 0.1875em;
	margin-right: -0.375em;
}

.omni .tag:not(body) .icon:first-child:last-child {
	margin-left: -0.375em;
	margin-right: -0.375em;
}

.omni .tag:not(body).is-delete {
	margin-left: 1px;
	padding: 0;
	position: relative;
	width: 2em;
}

.omni .tag:not(body).is-delete::before, .omni .tag:not(body).is-delete::after {
	background-color: currentColor;
	content: "";
	display: block;
	left: 50%;
	position: absolute;
	top: 50%;
	transform: translateX(-50%) translateY(-50%) rotate(45deg);
	transform-origin: center center;
}

.omni .tag:not(body).is-delete::before {
	height: 1px;
	width: 50%;
}

.omni .tag:not(body).is-delete::after {
	height: 50%;
	width: 1px;
}

.omni .tag:not(body).is-delete:hover, .omni .tag:not(body).is-delete:focus {
	background-color: var(--color-gray-e8);
}

.omni .tag:not(body).is-delete:active {
	background-color: var(--color-gray-db);
}

.omni .tag:not(body).is-rounded {
	border-radius: 290486px;
}

.omni a.tag:hover {
	text-decoration: underline;
}

.omni .title,
.omni .subtitle {
	word-break: break-word;
}

.omni .title em,
.omni .title span,
.omni .subtitle em,
.omni .subtitle span {
	font-weight: inherit;
}

.omni .title sub,
.omni .subtitle sub {
	font-size: 0.75em;
}

.omni .title sup,
.omni .subtitle sup {
	font-size: 0.75em;
}

.omni .title .tag,
.omni .subtitle .tag {
	vertical-align: middle;
}

.omni .title {
	color: var(--color-gray-36);
	font-size: var(--size-3);
	font-weight: 600;
	line-height: 1.125;
}

.omni .title strong {
	color: inherit;
	font-weight: inherit;
}

.omni .title + .highlight {
	margin-top: -0.75rem;
}

.omni .title:not(.is-spaced) + .subtitle {
	margin-top: -1.25rem;
}

.omni .title.is-1 {
	font-size: var(--size-1);
}

.omni .title.is-2 {
	font-size: var(--size-2);
}

.omni .title.is-3 {
	font-size: var(--size-3);
}

.omni .title.is-4 {
	font-size: var(--size-4);
}

.omni .title.is-5 {
	font-size: var(--size-5);
}

.omni .title.is-6 {
	font-size: var(--size-4);
}

.omni .title.is-7 {
	font-size: var(--size-7);
}

.omni .subtitle {
	color: var(--color-gray-4a);
	font-size: var(--size-5);
	font-weight: 400;
	line-height: 1.25;
}

.omni .subtitle strong {
	color: var(--color-gray-36);
	font-weight: 600;
}

.omni .subtitle:not(.is-spaced) + .title {
	margin-top: -1.25rem;
}

.omni .subtitle.is-1 {
	font-size: var(--size-1);
}

.omni .subtitle.is-2 {
	font-size: var(--size-2);
}

.omni .subtitle.is-3 {
	font-size: var(--size-3);
}

.omni .subtitle.is-4 {
	font-size: var(--size-4);
}

.omni .subtitle.is-5 {
	font-size: var(--size-5);
}

.omni .subtitle.is-6 {
	font-size: var(--size-4);
}

.omni .subtitle.is-7 {
	font-size: var(--size-7);
}

.omni .heading {
	display: block;
	font-size: 11px;
	letter-spacing: 1px;
	margin-bottom: 5px;
	text-transform: uppercase;
}

.omni .highlight {
	font-weight: 400;
	max-width: 100%;
	overflow: hidden;
	padding: 0;
}

.omni .highlight pre {
	overflow: auto;
	max-width: 100%;
}

.omni .number {
	align-items: center;
	background-color: var(--color-whitesmoke);
	border-radius: 290486px;
	display: inline-flex;
	font-size: var(--size-5);
	height: 2em;
	justify-content: center;
	margin-right: 1.5rem;
	min-width: 2.5em;
	padding: 0.25rem 0.5rem;
	text-align: center;
	vertical-align: top;
}

.omni input, .omni textarea, .omni select,
.omni .input, .omni .textarea, .omni .select select {
	border-radius: var(--radius-small);
	color: var(--color-gray-36);
}

.omni .input::-moz-placeholder, .omni .textarea::-moz-placeholder, .omni .select select::-moz-placeholder {
	color: var(--color-shark);
}

.omni .input::-webkit-input-placeholder, .omni .textarea::-webkit-input-placeholder, .omni .select select::-webkit-input-placeholder {
	color: var(--color-shark);
}

.omni .input:-moz-placeholder, .omni .textarea:-moz-placeholder, .omni .select select:-moz-placeholder {
	color: var(--color-shark);
}

.omni .input:-ms-input-placeholder, .omni .textarea:-ms-input-placeholder, .omni .select select:-ms-input-placeholder {
	color: var(--color-shark);
}

.omni .input:focus, .omni .textarea:focus, .omni .select select:focus, .omni .is-focused.input, .omni .is-focused.textarea, .omni .select select.is-focused, .omni .input:active, .omni .textarea:active, .omni .select select:active, .omni .is-active.input, .omni .is-active.textarea, .omni .select select.is-active {
	border-color: var(--color-electric-blue);
}

.omni .input[disabled], .omni .textarea[disabled], .omni .select select[disabled],
fieldset[disabled] .omni .input,
fieldset[disabled] .omni .textarea,
fieldset[disabled] .omni .select select {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-whitesmoke);
	box-shadow: none;
	color: var(--color-gray-7a);
}

.omni .input[disabled]::-moz-placeholder, .omni .textarea[disabled]::-moz-placeholder, .omni .select select[disabled]::-moz-placeholder,
fieldset[disabled] .omni .input::-moz-placeholder,
fieldset[disabled] .omni .textarea::-moz-placeholder,
fieldset[disabled] .omni .select select::-moz-placeholder {
	color: rgba(122, 122, 122, 0.3);
}

.omni .input[disabled]::-webkit-input-placeholder, .omni .textarea[disabled]::-webkit-input-placeholder, .omni .select select[disabled]::-webkit-input-placeholder,
fieldset[disabled] .omni .input::-webkit-input-placeholder,
fieldset[disabled] .omni .textarea::-webkit-input-placeholder,
fieldset[disabled] .omni .select select::-webkit-input-placeholder {
	color: rgba(122, 122, 122, 0.3);
}

.omni .input[disabled]:-moz-placeholder, .omni .textarea[disabled]:-moz-placeholder, .omni .select select[disabled]:-moz-placeholder,
fieldset[disabled] .omni .input:-moz-placeholder,
fieldset[disabled] .omni .textarea:-moz-placeholder,
fieldset[disabled] .omni .select select:-moz-placeholder {
	color: rgba(122, 122, 122, 0.3);
}

.omni .input[disabled]:-ms-input-placeholder, .omni .textarea[disabled]:-ms-input-placeholder, .omni .select select[disabled]:-ms-input-placeholder,
fieldset[disabled] .omni .input:-ms-input-placeholder,
fieldset[disabled] .omni .textarea:-ms-input-placeholder,
fieldset[disabled] .omni .select select:-ms-input-placeholder {
	color: rgba(122, 122, 122, 0.3);
}

.omni .input, .omni .textarea {
	box-shadow: inset 0 0.0625em 0.125em rgba(10, 10, 10, 0.05);
	max-width: 100%;
	width: 100%;
}

.omni .input[readonly], .omni .textarea[readonly] {
	box-shadow: none;
}

.omni .is-white.input, .omni .is-white.textarea {
	border-color: var(--color-white);
}

.omni .is-white.input:focus, .omni .is-white.textarea:focus, .omni .is-white.is-focused.input, .omni .is-white.is-focused.textarea, .omni .is-white.input:active, .omni .is-white.textarea:active, .omni .is-white.is-active.input, .omni .is-white.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);
}

.omni .is-black.input, .omni .is-black.textarea {
	border-color: var(--color-gray-0a);
}

.omni .is-black.input:focus, .omni .is-black.textarea:focus, .omni .is-black.is-focused.input, .omni .is-black.is-focused.textarea, .omni .is-black.input:active, .omni .is-black.textarea:active, .omni .is-black.is-active.input, .omni .is-black.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);
}

.omni .is-light.input, .omni .is-light.textarea {
	border-color: var(--color-whitesmoke);
}

.omni .is-light.input:focus, .omni .is-light.textarea:focus, .omni .is-light.is-focused.input, .omni .is-light.is-focused.textarea, .omni .is-light.input:active, .omni .is-light.textarea:active, .omni .is-light.is-active.input, .omni .is-light.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);
}

.omni .is-dark.input, .omni .is-dark.textarea {
	border-color: var(--color-gray-36);
}

.omni .is-dark.input:focus, .omni .is-dark.textarea:focus, .omni .is-dark.is-focused.input, .omni .is-dark.is-focused.textarea, .omni .is-dark.input:active, .omni .is-dark.textarea:active, .omni .is-dark.is-active.input, .omni .is-dark.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);
}

.omni .is-primary.input, .omni .is-primary.textarea {
	border-color: var(--color-electric-blue);
}

.omni .is-primary.input:focus, .omni .is-primary.textarea:focus, .omni .is-primary.is-focused.input, .omni .is-primary.is-focused.textarea, .omni .is-primary.input:active, .omni .is-primary.textarea:active, .omni .is-primary.is-active.input, .omni .is-primary.is-active.textarea {
	box-shadow: var(--bulma-shadow-1);
}

.omni .is-link.input, .omni .is-link.textarea {
	border-color: var(--color-electric-blue);
}

.omni .is-link.input:focus, .omni .is-link.textarea:focus, .omni .is-link.is-focused.input, .omni .is-link.is-focused.textarea, .omni .is-link.input:active, .omni .is-link.textarea:active, .omni .is-link.is-active.input, .omni .is-link.is-active.textarea {
	box-shadow: var(--bulma-shadow-1);
}

.omni .is-info.input, .omni .is-info.textarea {
	border-color: var(--color-electric-blue);
}

.omni .is-info.input:focus, .omni .is-info.textarea:focus, .omni .is-info.is-focused.input, .omni .is-info.is-focused.textarea, .omni .is-info.input:active, .omni .is-info.textarea:active, .omni .is-info.is-active.input, .omni .is-info.is-active.textarea {
	box-shadow: var(--bulma-shadow-1);
}

.omni .is-success.input, .omni .is-success.textarea {
	border-color: var(--color-mint);
}

.omni .is-success.input:focus, .omni .is-success.textarea:focus, .omni .is-success.is-focused.input, .omni .is-success.is-focused.textarea, .omni .is-success.input:active, .omni .is-success.textarea:active, .omni .is-success.is-active.input, .omni .is-success.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(44, 196, 173, 0.25);
}

.omni .is-warning.input, .omni .is-warning.textarea {
	border-color: var(--color-honeycomb);
}

.omni .is-warning.input:focus, .omni .is-warning.textarea:focus, .omni .is-warning.is-focused.input, .omni .is-warning.is-focused.textarea, .omni .is-warning.input:active, .omni .is-warning.textarea:active, .omni .is-warning.is-active.input, .omni .is-warning.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(254, 216, 130, 0.25);
}

.omni .is-danger.input, .omni .is-danger.textarea {
	border-color: var(--color-error);
}

.omni .is-danger.input:focus, .omni .is-danger.textarea:focus, .omni .is-danger.is-focused.input, .omni .is-danger.is-focused.textarea, .omni .is-danger.input:active, .omni .is-danger.textarea:active, .omni .is-danger.is-active.input, .omni .is-danger.is-active.textarea {
	box-shadow: 0 0 0 0.125em rgba(223, 86, 120, 0.25);
}

.omni .is-small.input, .omni .is-small.textarea {
	border-radius: var(--radius-small);
	font-size: var(--size-7);
}

.omni .is-medium.input, .omni .is-medium.textarea {
	font-size: var(--size-5);
}

.omni .is-large.input, .omni .is-large.textarea {
	font-size: var(--size-4);
}

.omni .is-fullwidth.input, .omni .is-fullwidth.textarea {
	display: block;
	width: 100%;
}

.omni .is-inline.input, .omni .is-inline.textarea {
	display: inline;
	width: auto;
}

.omni .input.is-rounded {
	border-radius: 290486px;
	padding-left: calc(calc(0.75em - 1px) + 0.375em);
	padding-right: calc(calc(0.75em - 1px) + 0.375em);
}

.omni .input.is-static {
	background-color: var(--color-transparent);
	border-color: var(--color-transparent);
	box-shadow: none;
	padding-left: 0;
	padding-right: 0;
}
.omni .input, .omni .textarea{
	line-height: calc(19 / 14 * 1em);
	padding-bottom: calc(7.5 / 14 * 1em);
	padding-left: calc(15 / 14 * 1em);
	padding-right: calc(15 / 14 * 1em);
	padding-top: calc(7.5 / 14 * 1em);
}
.omni input[type="number"]{
	padding-right: calc(4 / 14 * 1em);
}
.omni .textarea {
	display: block;
	max-width: 100%;
	min-width: 100%;
	resize: vertical;
}

.omni .textarea:not([rows]) {
	max-height: 40em;
	min-height: 8em;
}

.omni .textarea[rows] {
	height: initial;
}

.omni .textarea.has-fixed-size {
	resize: none;
}

.omni .checkbox, .omni .radio {
	cursor: pointer;
	display: inline-block;
	line-height: 1.25;
	position: relative;
}

.omni .checkbox input, .omni .radio input {
	cursor: pointer;
}

.omni .checkbox:hover, .omni .radio:hover {
	color: var(--color-gray-36);
}

.omni .checkbox[disabled], .omni .radio[disabled],
fieldset[disabled] .omni .checkbox,
fieldset[disabled] .omni .radio,
.omni .checkbox input[disabled],
.omni .radio input[disabled] {
	color: var(--color-gray-7a);
	cursor: not-allowed;
}

.omni .radio + .radio {
	margin-left: 0.5em;
}

.omni .select {
	display: inline-block;
	max-width: 100%;
	position: relative;
	vertical-align: top;
}

.omni .select:not(.is-multiple):not(.is-loading)::after {
	border-color: var(--color-electric-blue);
	inset-inline-end: 1.125em;
	z-index: 4;
}

.omni .select.is-rounded select {
	border-radius: 290486px;
	padding-left: 1em;
}

.omni .select select {
	cursor: pointer;
	display: block;
	font-size: 1em;
	max-width: 100%;
	outline: none;
}

.omni .select select::-ms-expand {
	display: none;
}

.omni .select select[disabled]:hover,
fieldset[disabled] .omni .select select:hover {
	border-color: var(--color-whitesmoke);
}

.omni .select select:not([multiple]) {
	padding-right: 2.5em;
}

.omni .select select[multiple] {
	height: auto;
	padding: 0;
}

.omni .select select[multiple] option {
	padding: 0.5em 1em;
}

.omni .select:not(.is-multiple):not(.is-loading):hover::after {
	border-color: var(--color-gray-36);
}

.omni .select.is-white:not(:hover)::after {
	border-color: var(--color-white);
}

.omni .select.is-white select {
	border-color: var(--color-white);
}

.omni .select.is-white select:hover, .omni .select.is-white select.is-hovered {
	border-color: var(--color-gray-f2);
}

.omni .select.is-white select:focus, .omni .select.is-white select.is-focused, .omni .select.is-white select:active, .omni .select.is-white select.is-active {
	box-shadow: 0 0 0 0.125em rgba(255, 255, 255, 0.25);
}

.omni .select.is-black:not(:hover)::after {
	border-color: var(--color-gray-0a);
}

.omni .select.is-black select {
	border-color: var(--color-gray-0a);
}

.omni .select.is-black select:hover, .omni .select.is-black select.is-hovered {
	border-color: black;
}

.omni .select.is-black select:focus, .omni .select.is-black select.is-focused, .omni .select.is-black select:active, .omni .select.is-black select.is-active {
	box-shadow: 0 0 0 0.125em rgba(10, 10, 10, 0.25);
}

.omni .select.is-light:not(:hover)::after {
	border-color: var(--color-whitesmoke);
}

.omni .select.is-light select {
	border-color: var(--color-whitesmoke);
}

.omni .select.is-light select:hover, .omni .select.is-light select.is-hovered {
	border-color: var(--color-gray-e8);
}

.omni .select.is-light select:focus, .omni .select.is-light select.is-focused, .omni .select.is-light select:active, .omni .select.is-light select.is-active {
	box-shadow: 0 0 0 0.125em rgba(245, 245, 245, 0.25);
}

.omni .select.is-dark:not(:hover)::after {
	border-color: var(--color-gray-36);
}

.omni .select.is-dark select {
	border-color: var(--color-gray-36);
}

.omni .select.is-dark select:hover, .omni .select.is-dark select.is-hovered {
	border-color: #292929;
}

.omni .select.is-dark select:focus, .omni .select.is-dark select.is-focused, .omni .select.is-dark select:active, .omni .select.is-dark select.is-active {
	box-shadow: 0 0 0 0.125em rgba(54, 54, 54, 0.25);
}

.omni .select.is-primary:not(:hover)::after {
	border-color: var(--color-electric-blue);
}

.omni .select.is-primary select {
	border-color: var(--color-electric-blue);
}

.omni .select.is-primary select:hover, .omni .select.is-primary select.is-hovered {
	border-color: var(--color-electric-blue-darkerer);
}

.omni .select.is-primary select:focus, .omni .select.is-primary select.is-focused, .omni .select.is-primary select:active, .omni .select.is-primary select.is-active {
	box-shadow: var(--bulma-shadow-1);
}

.omni .select.is-link:not(:hover)::after {
	border-color: var(--color-electric-blue);
}

.omni .select.is-link select {
	border-color: var(--color-electric-blue);
}

.omni .select.is-link select:hover, .omni .select.is-link select.is-hovered {
	border-color: var(--color-electric-blue-darkerer);
}

.omni .select.is-link select:focus, .omni .select.is-link select.is-focused, .omni .select.is-link select:active, .omni .select.is-link select.is-active {
	box-shadow: var(--bulma-shadow-1);
}

.omni .select.is-info:not(:hover)::after {
	border-color: var(--color-electric-blue);
}

.omni .select.is-info select {
	border-color: var(--color-electric-blue);
}

.omni .select.is-info select:hover, .omni .select.is-info select.is-hovered {
	border-color: var(--color-electric-blue-darkerer);
}

.omni .select.is-info select:focus, .omni .select.is-info select.is-focused, .omni .select.is-info select:active, .omni .select.is-info select.is-active {
	box-shadow: var(--bulma-shadow-1);
}

.omni .select.is-success:not(:hover)::after {
	border-color: var(--color-mint);
}

.omni .select.is-success select {
	border-color: var(--color-mint);
}

.omni .select.is-success select:hover, .omni .select.is-success select.is-hovered {
	border-color: #27af9b;
}

.omni .select.is-success select:focus, .omni .select.is-success select.is-focused, .omni .select.is-success select:active, .omni .select.is-success select.is-active {
	box-shadow: 0 0 0 0.125em rgba(44, 196, 173, 0.25);
}

.omni .select.is-warning:not(:hover)::after {
	border-color: var(--color-honeycomb);
}

.omni .select.is-warning select {
	border-color: var(--color-honeycomb);
}

.omni .select.is-warning select:hover, .omni .select.is-warning select.is-hovered {
	border-color: #fed069;
}

.omni .select.is-warning select:focus, .omni .select.is-warning select.is-focused, .omni .select.is-warning select:active, .omni .select.is-warning select.is-active {
	box-shadow: 0 0 0 0.125em rgba(254, 216, 130, 0.25);
}

.omni .select.is-danger:not(:hover)::after {
	border-color: var(--color-error);
}

.omni .select.is-danger select {
	border-color: var(--color-error);
}

.omni .select.is-danger select:hover, .omni .select.is-danger select.is-hovered {
	border-color: #db4167;
}

.omni .select.is-danger select:focus, .omni .select.is-danger select.is-focused, .omni .select.is-danger select:active, .omni .select.is-danger select.is-active {
	box-shadow: 0 0 0 0.125em rgba(223, 86, 120, 0.25);
}

.omni .select.is-small {
	border-radius: var(--radius-small);
	font-size: var(--size-7);
}

.omni .select.is-medium {
	font-size: var(--size-5);
}

.omni .select.is-large {
	font-size: var(--size-4);
}

.omni .select.is-disabled::after {
	border-color: var(--color-gray-7a);
}

.omni .select.is-fullwidth {
	width: 100%;
}

.omni .select.is-fullwidth select {
	width: 100%;
}

.omni .select.is-loading::after {
	margin-top: 0;
	position: absolute;
	right: 0.625em;
	top: 0.625em;
	transform: none;
}

.omni .select.is-loading.is-small:after {
	font-size: var(--size-7);
}

.omni .select.is-loading.is-medium:after {
	font-size: var(--size-5);
}

.omni .select.is-loading.is-large:after {
	font-size: var(--size-4);
}

.omni .file {
	align-items: stretch;
	display: flex;
	justify-content: flex-start;
	position: relative;
}

.omni .file.is-white .file-cta {
	background-color: var(--color-white);
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .file.is-white:hover .file-cta, .omni .file.is-white.is-hovered .file-cta {
	background-color: var(--color-gray-f9);
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .file.is-white:focus .file-cta, .omni .file.is-white.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(255, 255, 255, 0.25);
	color: var(--color-gray-0a);
}

.omni .file.is-white:active .file-cta, .omni .file.is-white.is-active .file-cta {
	background-color: var(--color-gray-f2);
	border-color: var(--color-transparent);
	color: var(--color-gray-0a);
}

.omni .file.is-black .file-cta {
	background-color: var(--color-gray-0a);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-black:hover .file-cta, .omni .file.is-black.is-hovered .file-cta {
	background-color: #040404;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-black:focus .file-cta, .omni .file.is-black.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(10, 10, 10, 0.25);
	color: var(--color-white);
}

.omni .file.is-black:active .file-cta, .omni .file.is-black.is-active .file-cta {
	background-color: black;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-light .file-cta {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-light:hover .file-cta, .omni .file.is-light.is-hovered .file-cta {
	background-color: #eeeeee;
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-light:focus .file-cta, .omni .file.is-light.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(245, 245, 245, 0.25);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-light:active .file-cta, .omni .file.is-light.is-active .file-cta {
	background-color: var(--color-gray-e8);
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-dark .file-cta {
	background-color: var(--color-gray-36);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-dark:hover .file-cta, .omni .file.is-dark.is-hovered .file-cta {
	background-color: #2f2f2f;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-dark:focus .file-cta, .omni .file.is-dark.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(54, 54, 54, 0.25);
	color: var(--color-white);
}

.omni .file.is-dark:active .file-cta, .omni .file.is-dark.is-active .file-cta {
	background-color: #292929;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-primary .file-cta {
	background-color: var(--color-electric-blue);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-primary:hover .file-cta, .omni .file.is-primary.is-hovered .file-cta {
	background-color: var(--color-electric-blue-darker);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-primary:focus .file-cta, .omni .file.is-primary.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: var(--bulma-shadow-2);
	color: var(--color-white);
}

.omni .file.is-primary:active .file-cta, .omni .file.is-primary.is-active .file-cta {
	background-color: var(--color-electric-blue-darkerer);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-link .file-cta {
	background-color: var(--color-electric-blue);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-link:hover .file-cta, .omni .file.is-link.is-hovered .file-cta {
	background-color: var(--color-electric-blue-darker);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-link:focus .file-cta, .omni .file.is-link.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: var(--bulma-shadow-2);
	color: var(--color-white);
}

.omni .file.is-link:active .file-cta, .omni .file.is-link.is-active .file-cta {
	background-color: var(--color-electric-blue-darkerer);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-info .file-cta {
	background-color: var(--color-electric-blue);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-info:hover .file-cta, .omni .file.is-info.is-hovered .file-cta {
	background-color: var(--color-electric-blue-darker);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-info:focus .file-cta, .omni .file.is-info.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: var(--bulma-shadow-2);
	color: var(--color-white);
}

.omni .file.is-info:active .file-cta, .omni .file.is-info.is-active .file-cta {
	background-color: var(--color-electric-blue-darkerer);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-success .file-cta {
	background-color: var(--color-mint);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-success:hover .file-cta, .omni .file.is-success.is-hovered .file-cta {
	background-color: #2abaa4;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-success:focus .file-cta, .omni .file.is-success.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(44, 196, 173, 0.25);
	color: var(--color-white);
}

.omni .file.is-success:active .file-cta, .omni .file.is-success.is-active .file-cta {
	background-color: #27af9b;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-warning .file-cta {
	background-color: var(--color-honeycomb);
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-warning:hover .file-cta, .omni .file.is-warning.is-hovered .file-cta {
	background-color: #fed475;
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-warning:focus .file-cta, .omni .file.is-warning.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(254, 216, 130, 0.25);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-warning:active .file-cta, .omni .file.is-warning.is-active .file-cta {
	background-color: #fed069;
	border-color: var(--color-transparent);
	color: rgba(0, 0, 0, 0.7);
}

.omni .file.is-danger .file-cta {
	background-color: var(--color-error);
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-danger:hover .file-cta, .omni .file.is-danger.is-hovered .file-cta {
	background-color: #dd4b6f;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-danger:focus .file-cta, .omni .file.is-danger.is-focused .file-cta {
	border-color: var(--color-transparent);
	box-shadow: 0 0 0.5em rgba(223, 86, 120, 0.25);
	color: var(--color-white);
}

.omni .file.is-danger:active .file-cta, .omni .file.is-danger.is-active .file-cta {
	background-color: #db4167;
	border-color: var(--color-transparent);
	color: var(--color-white);
}

.omni .file.is-small {
	font-size: var(--size-7);
}

.omni .file.is-medium {
	font-size: var(--size-5);
}

.omni .file.is-medium .file-icon .fa {
	font-size: 21px;
}

.omni .file.is-large {
	font-size: var(--size-4);
}

.omni .file.is-large .file-icon .fa {
	font-size: 28px;
}

.omni .file.has-name .file-cta {
	border-bottom-right-radius: 0;
	border-top-right-radius: 0;
}

.omni .file.has-name .file-name {
	border-bottom-left-radius: 0;
	border-top-left-radius: 0;
}

.omni .file.has-name.is-empty .file-cta {
	border-radius: var(--radius-small);
}

.omni .file.has-name.is-empty .file-name {
	display: none;
}

.omni .file.is-boxed .file-label {
	flex-direction: column;
}

.omni .file.is-boxed .file-cta {
	flex-direction: column;
	height: auto;
	padding: 1em 3em;
}

.omni .file.is-boxed .file-name {
	border-width: 0 1px 1px;
}

.omni .file.is-boxed .file-icon {
	height: 1.5em;
	width: 1.5em;
}

.omni .file.is-boxed .file-icon .fa {
	font-size: 21px;
}

.omni .file.is-boxed.is-small .file-icon .fa {
	font-size: 14px;
}

.omni .file.is-boxed.is-medium .file-icon .fa {
	font-size: 28px;
}

.omni .file.is-boxed.is-large .file-icon .fa {
	font-size: 35px;
}

.omni .file.is-boxed.has-name .file-cta {
	border-radius: var(--radius-small) var(--radius-small) 0 0;
}

.omni .file.is-boxed.has-name .file-name {
	border-radius: 0 0 var(--radius-small) var(--radius-small);
	border-width: 0 1px 1px;
}

.omni .file.is-centered {
	justify-content: center;
}

.omni .file.is-fullwidth .file-label {
	width: 100%;
}

.omni .file.is-fullwidth .file-name {
	flex-grow: 1;
	max-width: none;
}

.omni .file.is-right {
	justify-content: flex-end;
}

.omni .file.is-right .file-cta {
	border-radius: 0 var(--radius-small) var(--radius-small) 0;
}

.omni .file.is-right .file-name {
	border-radius: var(--radius-small) 0 0 var(--radius-small);
	border-width: 1px 0 1px 1px;
	order: -1;
}

.omni .file-label {
	align-items: stretch;
	display: flex;
	cursor: pointer;
	justify-content: flex-start;
	overflow: hidden;
	position: relative;
}

.omni .file-label:hover .file-cta {
	background-color: #eeeeee;
	color: var(--color-gray-36);
}

.omni .file-label:hover .file-name {
	border-color: #d5d5d5;
}

.omni .file-label:active .file-cta {
	background-color: var(--color-gray-e8);
	color: var(--color-gray-36);
}

.omni .file-label:active .file-name {
	border-color: #cfcfcf;
}

.omni .file-input {
	height: 100%;
	left: 0;
	opacity: 0;
	outline: none;
	position: absolute;
	top: 0;
	width: 100%;
}

.omni .file-cta,
.omni .file-name {
	border-color: var(--color-gray-db);
	border-radius: var(--radius-small);
	font-size: 1em;
	padding-left: 1em;
	padding-right: 1em;
	white-space: nowrap;
}

.omni .file-cta {
	background-color: var(--color-whitesmoke);
	color: var(--color-gray-4a);
}

.omni .file-name {
	border-color: var(--color-gray-db);
	border-style: solid;
	border-width: 1px 1px 1px 0;
	display: block;
	max-width: 16em;
	overflow: hidden;
	text-align: inherit;
	text-overflow: ellipsis;
}

.omni .file-icon {
	align-items: center;
	display: flex;
	height: 1em;
	justify-content: center;
	margin-right: 0.5em;
	width: 1em;
}

.omni .file-icon .fa {
	font-size: var(--body-size);
}

.omni label,
.omni .label {
	color: var(--color-gray-7a);
	/*
	NOTE when using display:block;
	for "v" symbol positioning must also use
	.block-label select{inline-size:100%;}
	see following .block section */
	font-size: var(--size-4);
	margin-left: 0.5em;
	text-transform: capitalize;
}

.omni :is(label:not([for]),.label:not([for])) {
	display: inline-block;
}

.omni :is(label, .label) > :is(input:not([type="radio"],[type="checkbox"]), select) {
	margin-left: -0.5em;
}

/**
 * labels for radio and checkbox inputs are a special case.
 * adding a class to the label is a workaround until the relational :has()
 * pseudo class is supported by browsers.
 */
.omni :is(label.radio, .label.radio, label.checkbox, .label.checkbox) {
	color: var(--color-almost-black);
	font-weight: 700;
	margin-left: 0;
}

.omni :is(label, .label) > :is(input:not([type="radio"]), select) {
	margin-top: 0.43em;
}

.omni .block-label {
	display:block;
}
.omni .block-label select{
	inline-size: 100%;
}

.omni label:not(:last-child),
.omni .label:not(:last-child) {
	margin-bottom: 0.5em;
	/* set default spacing between form elements */
	margin-right: 2.143em;
}

.omni label.is-small,
.omni .label.is-small {
	font-size: var(--size-7);
}

.omni label.is-medium,
.omni .label.is-medium {
	font-size: var(--size-5);
}

.omni label.is-large,
.omni .label.is-large {
	font-size: var(--size-3);
}

.omni .help {
	display: block;
	font-size: var(--size-7);
	margin-top: 0.25rem;
}

.omni .help.is-white {
	color: var(--color-white);
}

.omni .help.is-black {
	color: var(--color-gray-0a);
}

.omni .help.is-light {
	color: var(--color-whitesmoke);
}

.omni .help.is-dark {
	color: var(--color-gray-36);
}

.omni .help.is-primary {
	color: var(--color-electric-blue);
}

.omni .help.is-link {
	color: var(--color-electric-blue);
}

.omni .help.is-info {
	color: var(--color-electric-blue);
}

.omni .help.is-success {
	color: var(--color-mint);
}

.omni .help.is-warning {
	color: var(--color-honeycomb);
}

.omni .help.is-danger {
	color: var(--color-error);
}

.omni .field:not(:last-child) {
	margin-bottom: 0.75rem;
}

.omni .field.has-addons {
	display: flex;
	justify-content: flex-start;
}

.omni .field.has-addons .control:not(:last-child) {
	margin-right: -1px;
}

.omni .field.has-addons .control:not(:first-child):not(:last-child) .button,
.omni .field.has-addons .control:not(:first-child):not(:last-child) .input,
.omni .field.has-addons .control:not(:first-child):not(:last-child) .select select {
	border-radius: 0;
}

.omni .field.has-addons .control:first-child:not(:only-child) .button,
.omni .field.has-addons .control:first-child:not(:only-child) .input,
.omni .field.has-addons .control:first-child:not(:only-child) .select select {
	border-bottom-right-radius: 0;
	border-top-right-radius: 0;
}

.omni .field.has-addons .control:last-child:not(:only-child) .button,
.omni .field.has-addons .control:last-child:not(:only-child) .input,
.omni .field.has-addons .control:last-child:not(:only-child) .select select {
	border-bottom-left-radius: 0;
	border-top-left-radius: 0;
}

.omni .field.has-addons .control .button:not([disabled]):hover, .omni .field.has-addons .control .button:not([disabled]).is-hovered,
.omni .field.has-addons .control .input:not([disabled]):hover,
.omni .field.has-addons .control .input:not([disabled]).is-hovered,
.omni .field.has-addons .control .select select:not([disabled]):hover,
.omni .field.has-addons .control .select select:not([disabled]).is-hovered {
	z-index: 2;
}

.omni .field.has-addons .control .button:not([disabled]):focus, .omni .field.has-addons .control .button:not([disabled]).is-focused, .omni .field.has-addons .control .button:not([disabled]):active, .omni .field.has-addons .control .button:not([disabled]).is-active,
.omni .field.has-addons .control .input:not([disabled]):focus,
.omni .field.has-addons .control .input:not([disabled]).is-focused,
.omni .field.has-addons .control .input:not([disabled]):active,
.omni .field.has-addons .control .input:not([disabled]).is-active,
.omni .field.has-addons .control .select select:not([disabled]):focus,
.omni .field.has-addons .control .select select:not([disabled]).is-focused,
.omni .field.has-addons .control .select select:not([disabled]):active,
.omni .field.has-addons .control .select select:not([disabled]).is-active {
	z-index: 3;
}

.omni .field.has-addons .control .button:not([disabled]):focus:hover, .omni .field.has-addons .control .button:not([disabled]).is-focused:hover, .omni .field.has-addons .control .button:not([disabled]):active:hover, .omni .field.has-addons .control .button:not([disabled]).is-active:hover,
.omni .field.has-addons .control .input:not([disabled]):focus:hover,
.omni .field.has-addons .control .input:not([disabled]).is-focused:hover,
.omni .field.has-addons .control .input:not([disabled]):active:hover,
.omni .field.has-addons .control .input:not([disabled]).is-active:hover,
.omni .field.has-addons .control .select select:not([disabled]):focus:hover,
.omni .field.has-addons .control .select select:not([disabled]).is-focused:hover,
.omni .field.has-addons .control .select select:not([disabled]):active:hover,
.omni .field.has-addons .control .select select:not([disabled]).is-active:hover {
	z-index: 4;
}

.omni .field.has-addons .control.is-expanded {
	flex-grow: 1;
	flex-shrink: 1;
}

.omni .field.has-addons.has-addons-centered {
	justify-content: center;
}

.omni .field.has-addons.has-addons-right {
	justify-content: flex-end;
}

.omni .field.has-addons.has-addons-fullwidth .control {
	flex-grow: 1;
	flex-shrink: 0;
}

.omni .field.is-grouped {
	display: flex;
	justify-content: flex-start;
}

.omni .field.is-grouped > .control {
	flex-shrink: 0;
}

.omni .field.is-grouped > .control:not(:last-child) {
	margin-bottom: 0;
	margin-right: 0.75rem;
}

.omni .field.is-grouped > .control.is-expanded {
	flex-grow: 1;
	flex-shrink: 1;
}

.omni .field.is-grouped.is-grouped-centered {
	justify-content: center;
}

.omni .field.is-grouped.is-grouped-right {
	justify-content: flex-end;
}

.omni .field.is-grouped.is-grouped-multiline {
	flex-wrap: wrap;
}

.omni .field.is-grouped.is-grouped-multiline > .control:last-child, .omni .field.is-grouped.is-grouped-multiline > .control:not(:last-child) {
	margin-bottom: 0.75rem;
}

.omni .field.is-grouped.is-grouped-multiline:last-child {
	margin-bottom: -0.75rem;
}

.omni .field.is-grouped.is-grouped-multiline:not(:last-child) {
	margin-bottom: 0;
}
@media screen and (min-width: 769px), print {
	.omni .field.is-horizontal {
		display: flex;
	}
}

.omni .field-label .label {
	font-size: inherit;
}
@media screen and (max-width: 768px) {
	.omni .field-label {
		margin-bottom: 0.5rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .field-label {
		flex-basis: 0;
		flex-grow: 1;
		flex-shrink: 0;
		margin-right: 1.5rem;
		text-align: right;
	}

	.omni .field-label.is-small {
		font-size: var(--size-7);
		padding-top: 0.375em;
	}

	.omni .field-label.is-normal,
	.omni .field-label.is-medium {
		font-size: var(--size-5);
		padding-top: 0.375em;
	}

	.omni .field-label.is-large {
		font-size: var(--size-4);
		padding-top: 0.375em;
	}
}

.omni .field-body .field .field {
	margin-bottom: 0;
}
@media screen and (min-width: 769px), print {
	.omni .field-body {
		display: flex;
		flex-basis: 0;
		flex-grow: 5;
		flex-shrink: 1;
	}

	.omni .field-body .field {
		margin-bottom: 0;
	}

	.omni .field-body > .field {
		flex-shrink: 1;
	}

	.omni .field-body > .field:not(.is-narrow) {
		flex-grow: 1;
	}

	.omni .field-body > .field:not(:last-child) {
		margin-right: 0.75rem;
	}
}

.omni .control {
	box-sizing: border-box;
	clear: both;
	font-size: var(--size-4);
	position: relative;
	text-align: inherit;
}

.omni .control.has-icons-left .input:focus ~ .icon,
.omni .control.has-icons-left .select:focus ~ .icon, .omni .control.has-icons-right .input:focus ~ .icon,
.omni .control.has-icons-right .select:focus ~ .icon {
	color: var(--color-gray-4a);
}

.omni .control.has-icons-left .input.is-small ~ .icon,
.omni .control.has-icons-left .select.is-small ~ .icon, .omni .control.has-icons-right .input.is-small ~ .icon,
.omni .control.has-icons-right .select.is-small ~ .icon {
	font-size: var(--size-7);
}

.omni .control.has-icons-left .input.is-medium ~ .icon,
.omni .control.has-icons-left .select.is-medium ~ .icon, .omni .control.has-icons-right .input.is-medium ~ .icon,
.omni .control.has-icons-right .select.is-medium ~ .icon {
	font-size: var(--size-5);
}

.omni .control.has-icons-left .input.is-large ~ .icon,
.omni .control.has-icons-left .select.is-large ~ .icon, .omni .control.has-icons-right .input.is-large ~ .icon,
.omni .control.has-icons-right .select.is-large ~ .icon {
	font-size: var(--size-4);
}

.omni .control.has-icons-left .icon, .omni .control.has-icons-right .icon {
	color: var(--color-gray-db);
	height: 2.5em;
	pointer-events: none;
	position: absolute;
	top: 0;
	width: 2.5em;
	z-index: 4;
}

.omni .control.has-icons-left .input,
.omni .control.has-icons-left .select select {
	padding-left: 2.5em;
}

.omni .control.has-icons-left .icon.is-left {
	left: 0;
}

.omni .control.has-icons-right .input,
.omni .control.has-icons-right .select select {
	padding-right: 2.5em;
}

.omni .control.has-icons-right .icon.is-right {
	right: 0;
}

.omni .control.is-loading::after {
	position: absolute !important;
	right: 0.625em;
	top: 0.625em;
	z-index: 4;
}

.omni .control.is-loading.is-small:after {
	font-size: var(--size-7);
}

.omni .control.is-loading.is-medium:after {
	font-size: var(--size-5);
}

.omni .control.is-loading.is-large:after {
	font-size: var(--size-4);
}

.omni .breadcrumb {
	font-size: var(--size-4);
	white-space: nowrap;
}

.omni .breadcrumb a {
	align-items: center;
	color: var(--color-electric-blue);
	display: flex;
	justify-content: center;
	padding: 0 0.75em;
}

.omni .breadcrumb a:hover {
	color: var(--color-gray-36);
}

.omni .breadcrumb li {
	align-items: center;
	display: flex;
}

.omni .breadcrumb li:first-child a {
	padding-left: 0;
}

.omni .breadcrumb li.is-active a {
	color: var(--color-gray-36);
	cursor: default;
	pointer-events: none;
}

.omni .breadcrumb li + li::before {
	color: var(--color-gray-b5);
	content: "/";
}

.omni .breadcrumb ul,
.omni .breadcrumb ol {
	align-items: flex-start;
	display: flex;
	flex-wrap: wrap;
	justify-content: flex-start;
}

.omni .breadcrumb .icon:first-child {
	margin-right: 0.5em;
}

.omni .breadcrumb .icon:last-child {
	margin-left: 0.5em;
}

.omni .breadcrumb.is-centered ol,
.omni .breadcrumb.is-centered ul {
	justify-content: center;
}

.omni .breadcrumb.is-right ol,
.omni .breadcrumb.is-right ul {
	justify-content: flex-end;
}

.omni .breadcrumb.is-small {
	font-size: var(--size-7);
}

.omni .breadcrumb.is-medium {
	font-size: var(--size-5);
}

.omni .breadcrumb.is-large {
	font-size: var(--size-4);
}

.omni .breadcrumb.has-arrow-separator li + li::before {
	content: "→";
}

.omni .breadcrumb.has-bullet-separator li + li::before {
	content: "•";
}

.omni .breadcrumb.has-dot-separator li + li::before {
	content: "·";
}

.omni .breadcrumb.has-succeeds-separator li + li::before {
	content: "≻";
}

.omni .card {
	background-color: var(--color-white);
	border-radius: 0.25rem;
	box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);
	color: var(--color-gray-4a);
	max-width: 100%;
	overflow: hidden;
	position: relative;
}

.omni .card-header {
	background-color: var(--color-transparent);
	align-items: stretch;
	box-shadow: 0 0.125em 0.25em rgba(10, 10, 10, 0.1);
	display: flex;
}

.omni .card-header-title {
	align-items: center;
	color: var(--color-gray-36);
	display: flex;
	flex-grow: 1;
	font-weight: 700;
	padding: 0.75rem 1rem;
}

.omni .card-header-title.is-centered {
	justify-content: center;
}

.omni .card-header-icon {
	align-items: center;
	cursor: pointer;
	display: flex;
	justify-content: center;
	padding: 0.75rem 1rem;
}

.omni .card-image {
	display: block;
	position: relative;
}

.omni .card-content {
	background-color: var(--color-transparent);
	padding: 1.5rem;
}

.omni .card-footer {
	background-color: var(--color-transparent);
	border-top: 1px solid #ededed;
	align-items: stretch;
	display: flex;
}

.omni .card-footer-item {
	align-items: center;
	display: flex;
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 0;
	justify-content: center;
	padding: 0.75rem;
}

.omni .card-footer-item:not(:last-child) {
	border-right: 1px solid #ededed;
}

.omni .card .media:not(:last-child) {
	margin-bottom: 1.5rem;
}

.omni .dropdown {
	display: inline-flex;
	position: relative;
	vertical-align: top;
}

.omni .dropdown.is-active .dropdown-menu, .omni .dropdown.is-hoverable:hover .dropdown-menu {
	display: block;
}

.omni .dropdown.is-right .dropdown-menu {
	left: auto;
	right: 0;
}

.omni .dropdown.is-up .dropdown-menu {
	bottom: 100%;
	padding-bottom: 4px;
	padding-top: initial;
	top: auto;
}

.omni .dropdown-menu {
	display: none;
	left: 0;
	min-width: 12rem;
	padding-top: 4px;
	position: absolute;
	top: 100%;
	z-index: 20;
}

.omni .dropdown-content {
	background-color: var(--color-white);
	border-radius: var(--radius-small);
	box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);
	padding-bottom: 0.5rem;
	padding-top: 0.5rem;
}

.omni .dropdown-item {
	color: var(--color-gray-4a);
	display: block;
	font-size: 0.875rem;
	line-height: 1.5;
	padding: 0.375rem 1rem;
	position: relative;
}

.omni a.dropdown-item,
.omni button.dropdown-item {
	padding-right: 3rem;
	text-align: inherit;
	white-space: nowrap;
	width: 100%;
}

.omni a.dropdown-item:hover,
.omni button.dropdown-item:hover {
	background-color: var(--color-whitesmoke);
	color: var(--color-gray-0a);
}

.omni a.dropdown-item.is-active,
.omni button.dropdown-item.is-active {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .dropdown-divider {
	background-color: #ededed;
	border: none;
	display: block;
	height: 1px;
	margin: 0.5rem 0;
}

.omni .level {
	align-items: center;
	justify-content: space-between;
}

.omni .level code {
	border-radius: var(--radius-small);
}

.omni .level img {
	display: inline-block;
	vertical-align: top;
}

.omni .level.is-mobile {
	display: flex;
}

.omni .level.is-mobile .level-left,
.omni .level.is-mobile .level-right {
	display: flex;
}

.omni .level.is-mobile .level-left + .level-right {
	margin-top: 0;
}

.omni .level.is-mobile .level-item:not(:last-child) {
	margin-bottom: 0;
	margin-right: 0.75rem;
}

.omni .level.is-mobile .level-item:not(.is-narrow) {
	flex-grow: 1;
}
@media screen and (min-width: 769px), print {
	.omni .level {
		display: flex;
	}

	.omni .level > .level-item:not(.is-narrow) {
		flex-grow: 1;
	}
}

.omni .level-item {
	align-items: center;
	display: flex;
	flex-basis: auto;
	flex-grow: 0;
	flex-shrink: 0;
	justify-content: center;
}

.omni .level-item .title,
.omni .level-item .subtitle {
	margin-bottom: 0;
}
@media screen and (max-width: 768px) {
	.omni .level-item:not(:last-child) {
		margin-bottom: 0.75rem;
	}
}

.omni .level-left,
.omni .level-right {
	flex-basis: auto;
	flex-grow: 0;
	flex-shrink: 0;
}

.omni .level-left .level-item.is-flexible,
.omni .level-right .level-item.is-flexible {
	flex-grow: 1;
}
@media screen and (min-width: 769px), print {
	.omni .level-left .level-item:not(:last-child),
	.omni .level-right .level-item:not(:last-child) {
		margin-right: 0.75rem;
	}
}

.omni .level-left {
	align-items: center;
	justify-content: flex-start;
}
@media screen and (max-width: 768px) {
	.omni .level-left + .level-right {
		margin-top: 1.5rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .level-left {
		display: flex;
	}
}

.omni .level-right {
	align-items: center;
	justify-content: flex-end;
}
@media screen and (min-width: 769px), print {
	.omni .level-right {
		display: flex;
	}
}

.omni .media {
	align-items: flex-start;
	display: flex;
	text-align: inherit;
}

.omni .media .content:not(:last-child) {
	margin-bottom: 0.75rem;
}

.omni .media .media {
	border-top: 1px solid rgba(219, 219, 219, 0.5);
	display: flex;
	padding-top: 0.75rem;
}

.omni .media .media .content:not(:last-child),
.omni .media .media .control:not(:last-child) {
	margin-bottom: 0.5rem;
}

.omni .media .media .media {
	padding-top: 0.5rem;
}

.omni .media .media .media + .media {
	margin-top: 0.5rem;
}

.omni .media + .media {
	border-top: 1px solid rgba(219, 219, 219, 0.5);
	margin-top: 1rem;
	padding-top: 1rem;
}

.omni .media.is-large + .media {
	margin-top: 1.5rem;
	padding-top: 1.5rem;
}

.omni .media-left,
.omni .media-right {
	flex-basis: auto;
	flex-grow: 0;
	flex-shrink: 0;
}

.omni .media-left {
	margin-right: 1rem;
}

.omni .media-right {
	margin-left: 1rem;
}

.omni .media-content {
	flex-basis: auto;
	flex-grow: 1;
	flex-shrink: 1;
	text-align: inherit;
}
@media screen and (max-width: 768px) {
	.omni .media-content {
		overflow-x: auto;
	}
}

.omni .menu {
	font-size: var(--size-4);
}

.omni .menu.is-small {
	font-size: var(--size-7);
}

.omni .menu.is-medium {
	font-size: var(--size-5);
}

.omni .menu.is-large {
	font-size: var(--size-4);
}

.omni .menu-list {
	line-height: 1.25;
	list-style: none;
}

.omni .menu-list a {
	border-radius: var(--radius-small);
	color: var(--color-gray-4a);
	display: block;
	padding: 0.5em 0.75em;
}

.omni .menu-list a:hover {
	background-color: var(--color-whitesmoke);
	color: var(--color-gray-36);
}

.omni .menu-list a.is-active {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .menu-list li ul {
	border-left: 1px solid var(--color-gray-db);
	margin: 0.75em;
	padding-left: 0.75em;
}

.omni .menu-label {
	color: var(--color-gray-7a);
	font-size: 0.75em;
	letter-spacing: 0.1em;
	text-transform: uppercase;
}

.omni .menu-label:not(:first-child) {
	margin-top: 1em;
}

.omni .menu-label:not(:last-child) {
	margin-bottom: 1em;
}

.omni .message {
	background-color: var(--color-whitesmoke);
	border-radius: var(--radius-small);
	font-size: var(--size-4);
}

.omni .message strong {
	color: currentColor;
}

.omni .message a:not(.button):not(.tag):not(.dropdown-item) {
	color: currentColor;
	text-decoration: underline;
}

.omni .message.is-small {
	font-size: var(--size-7);
}

.omni .message.is-medium {
	font-size: var(--size-5);
}

.omni .message.is-large {
	font-size: var(--size-4);
}

.omni .message.is-white {
	background-color: var(--color-white);
}

.omni .message.is-white .message-header {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .message.is-white .message-body {
	border-color: var(--color-white);
}

.omni .message.is-black {
	background-color: #fafafa;
}

.omni .message.is-black .message-header {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .message.is-black .message-body {
	border-color: var(--color-gray-0a);
}

.omni .message.is-light {
	background-color: #fafafa;
}

.omni .message.is-light .message-header {
	background-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .message.is-light .message-body {
	border-color: var(--color-whitesmoke);
}

.omni .message.is-dark {
	background-color: #fafafa;
}

.omni .message.is-dark .message-header {
	background-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .message.is-dark .message-body {
	border-color: var(--color-gray-36);
}

.omni .message.is-primary {
	background-color: var(--color-blue-ultralight);
}

.omni .message.is-primary .message-header {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .message.is-primary .message-body {
	border-color: var(--color-electric-blue);
	color: var(--color-blue-disappointment);
}

.omni .message.is-link {
	background-color: var(--color-blue-ultralight);
}

.omni .message.is-link .message-header {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .message.is-link .message-body {
	border-color: var(--color-electric-blue);
	color: var(--color-blue-disappointment);
}

.omni .message.is-info {
	background-color: var(--color-blue-ultralight);
}

.omni .message.is-info .message-header {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .message.is-info .message-body {
	border-color: var(--color-electric-blue);
	color: var(--color-blue-disappointment);
}

.omni .message.is-success {
	background-color: #eefbf9;
}

.omni .message.is-success .message-header {
	background-color: var(--color-mint);
	color: var(--color-white);
}

.omni .message.is-success .message-body {
	border-color: var(--color-mint);
	color: #1e8576;
}

.omni .message.is-warning {
	background-color: #fff9eb;
}

.omni .message.is-warning .message-header {
	background-color: var(--color-honeycomb);
	color: rgba(0, 0, 0, 0.7);
}

.omni .message.is-warning .message-body {
	border-color: var(--color-honeycomb);
	color: #936601;
}

.omni .message.is-danger {
	background-color: #fceef1;
}

.omni .message.is-danger .message-header {
	background-color: var(--color-error);
	color: var(--color-white);
}

.omni .message.is-danger .message-body {
	border-color: var(--color-error);
	color: #b42246;
}

.omni .message-header {
	align-items: center;
	background-color: var(--color-gray-4a);
	border-radius: var(--radius) var(--radius) 0 0;
	color: var(--color-white);
	display: flex;
	font-weight: 700;
	justify-content: space-between;
	line-height: 1.25;
	padding: 0.75em 1em;
	position: relative;
}

.omni .message-header .delete {
	flex-grow: 0;
	flex-shrink: 0;
	margin-left: 0.75em;
}

.omni .message-header + .message-body {
	border-width: 0;
	border-top-left-radius: 0;
	border-top-right-radius: 0;
}

.omni .message-body {
	border-color: var(--color-gray-db);
	border-radius: var(--radius);
	border-style: solid;
	border-width: 0 0 0 4px;
	color: var(--color-gray-4a);
	padding: 1.25em 1.5em;
}

.omni .message-body code,
.omni .message-body pre {
	background-color: var(--color-white);
}

.omni .message-body pre code {
	background-color: var(--color-transparent);
}

.omni .modal {
	align-items: center;
	display: none;
	flex-direction: column;
	justify-content: center;
	overflow: hidden;
	position: fixed;
	z-index: 40;
}

.omni .modal.is-active {
	display: flex;
}

.omni .modal-background {
	background-color: rgba(10, 10, 10, 0.86);
}

.omni .modal-content,
.omni .modal-card {
	margin: 0 20px;
	max-height: calc(100vh - 160px);
	overflow: auto;
	position: relative;
	width: 100%;
}
@media screen and (min-width: 769px) {
	.omni .modal-content,
	.omni .modal-card {
		margin: 0 auto;
		max-height: calc(100vh - 40px);
		width: 640px;
	}
}

.omni .modal-close {
	background: none;
	height: 40px;
	position: fixed;
	right: 20px;
	top: 20px;
	width: 40px;
}

.omni .modal-card {
	display: flex;
	flex-direction: column;
	max-height: calc(100vh - 40px);
	overflow: hidden;
	-ms-overflow-y: visible;
}

.omni .modal-card-head,
.omni .modal-card-foot {
	align-items: center;
	background-color: var(--color-whitesmoke);
	display: flex;
	flex-shrink: 0;
	justify-content: flex-start;
	padding: 20px;
	position: relative;
}

.omni .modal-card-head {
	border-bottom: 1px solid var(--color-gray-db);
	border-top-left-radius: var(--radius-large);
	border-top-right-radius: var(--radius-large);
}

.omni .modal-card-title {
	color: var(--color-gray-36);
	flex-grow: 1;
	flex-shrink: 0;
	font-size: var(--size-4);
	line-height: 1;
}

.omni .modal-card-foot {
	border-bottom-left-radius: var(--radius-large);
	border-bottom-right-radius: var(--radius-large);
	border-top: 1px solid var(--color-gray-db);
}

.omni .modal-card-foot .button:not(:last-child) {
	margin-right: 0.5em;
}

.omni .modal-card-body {
	-webkit-overflow-scrolling: touch;
	background-color: var(--color-white);
	flex-grow: 1;
	flex-shrink: 1;
	overflow: auto;
	padding: 20px;
}

.omni .navbar {
	background-color: var(--color-white);
	min-height: 3.25rem;
	position: relative;
	z-index: 30;
}

.omni .navbar.is-white {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .navbar.is-white .navbar-brand > .navbar-item,
.omni .navbar.is-white .navbar-brand .navbar-link {
	color: var(--color-gray-0a);
}

.omni .navbar.is-white .navbar-brand > a.navbar-item:focus, .omni .navbar.is-white .navbar-brand > a.navbar-item:hover, .omni .navbar.is-white .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-white .navbar-brand .navbar-link:focus,
.omni .navbar.is-white .navbar-brand .navbar-link:hover,
.omni .navbar.is-white .navbar-brand .navbar-link.is-active {
	background-color: var(--color-gray-f2);
	color: var(--color-gray-0a);
}

.omni .navbar.is-white .navbar-brand .navbar-link::after {
	border-color: var(--color-gray-0a);
}

.omni .navbar.is-white .navbar-burger {
	color: var(--color-gray-0a);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-white .navbar-start > .navbar-item,
	.omni .navbar.is-white .navbar-start .navbar-link,
	.omni .navbar.is-white .navbar-end > .navbar-item,
	.omni .navbar.is-white .navbar-end .navbar-link {
		color: var(--color-gray-0a);
	}

	.omni .navbar.is-white .navbar-start > a.navbar-item:focus, .omni .navbar.is-white .navbar-start > a.navbar-item:hover, .omni .navbar.is-white .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-white .navbar-start .navbar-link:focus,
	.omni .navbar.is-white .navbar-start .navbar-link:hover,
	.omni .navbar.is-white .navbar-start .navbar-link.is-active,
	.omni .navbar.is-white .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-white .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-white .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-white .navbar-end .navbar-link:focus,
	.omni .navbar.is-white .navbar-end .navbar-link:hover,
	.omni .navbar.is-white .navbar-end .navbar-link.is-active {
		background-color: var(--color-gray-f2);
		color: var(--color-gray-0a);
	}

	.omni .navbar.is-white .navbar-start .navbar-link::after,
	.omni .navbar.is-white .navbar-end .navbar-link::after {
		border-color: var(--color-gray-0a);
	}

	.omni .navbar.is-white .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-white .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-white .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: var(--color-gray-f2);
		color: var(--color-gray-0a);
	}

	.omni .navbar.is-white .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-white);
		color: var(--color-gray-0a);
	}
}

.omni .navbar.is-black {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .navbar.is-black .navbar-brand > .navbar-item,
.omni .navbar.is-black .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-black .navbar-brand > a.navbar-item:focus, .omni .navbar.is-black .navbar-brand > a.navbar-item:hover, .omni .navbar.is-black .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-black .navbar-brand .navbar-link:focus,
.omni .navbar.is-black .navbar-brand .navbar-link:hover,
.omni .navbar.is-black .navbar-brand .navbar-link.is-active {
	background-color: black;
	color: var(--color-white);
}

.omni .navbar.is-black .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-black .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-black .navbar-start > .navbar-item,
	.omni .navbar.is-black .navbar-start .navbar-link,
	.omni .navbar.is-black .navbar-end > .navbar-item,
	.omni .navbar.is-black .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-black .navbar-start > a.navbar-item:focus, .omni .navbar.is-black .navbar-start > a.navbar-item:hover, .omni .navbar.is-black .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-black .navbar-start .navbar-link:focus,
	.omni .navbar.is-black .navbar-start .navbar-link:hover,
	.omni .navbar.is-black .navbar-start .navbar-link.is-active,
	.omni .navbar.is-black .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-black .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-black .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-black .navbar-end .navbar-link:focus,
	.omni .navbar.is-black .navbar-end .navbar-link:hover,
	.omni .navbar.is-black .navbar-end .navbar-link.is-active {
		background-color: black;
		color: var(--color-white);
	}

	.omni .navbar.is-black .navbar-start .navbar-link::after,
	.omni .navbar.is-black .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-black .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-black .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-black .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: black;
		color: var(--color-white);
	}

	.omni .navbar.is-black .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-gray-0a);
		color: var(--color-white);
	}
}

.omni .navbar.is-light {
	background-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-light .navbar-brand > .navbar-item,
.omni .navbar.is-light .navbar-brand .navbar-link {
	color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-light .navbar-brand > a.navbar-item:focus, .omni .navbar.is-light .navbar-brand > a.navbar-item:hover, .omni .navbar.is-light .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-light .navbar-brand .navbar-link:focus,
.omni .navbar.is-light .navbar-brand .navbar-link:hover,
.omni .navbar.is-light .navbar-brand .navbar-link.is-active {
	background-color: var(--color-gray-e8);
	color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-light .navbar-brand .navbar-link::after {
	border-color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-light .navbar-burger {
	color: rgba(0, 0, 0, 0.7);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-light .navbar-start > .navbar-item,
	.omni .navbar.is-light .navbar-start .navbar-link,
	.omni .navbar.is-light .navbar-end > .navbar-item,
	.omni .navbar.is-light .navbar-end .navbar-link {
		color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-light .navbar-start > a.navbar-item:focus, .omni .navbar.is-light .navbar-start > a.navbar-item:hover, .omni .navbar.is-light .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-light .navbar-start .navbar-link:focus,
	.omni .navbar.is-light .navbar-start .navbar-link:hover,
	.omni .navbar.is-light .navbar-start .navbar-link.is-active,
	.omni .navbar.is-light .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-light .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-light .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-light .navbar-end .navbar-link:focus,
	.omni .navbar.is-light .navbar-end .navbar-link:hover,
	.omni .navbar.is-light .navbar-end .navbar-link.is-active {
		background-color: var(--color-gray-e8);
		color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-light .navbar-start .navbar-link::after,
	.omni .navbar.is-light .navbar-end .navbar-link::after {
		border-color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-light .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-light .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-light .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: var(--color-gray-e8);
		color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-light .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-whitesmoke);
		color: rgba(0, 0, 0, 0.7);
	}
}

.omni .navbar.is-dark {
	background-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .navbar.is-dark .navbar-brand > .navbar-item,
.omni .navbar.is-dark .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-dark .navbar-brand > a.navbar-item:focus, .omni .navbar.is-dark .navbar-brand > a.navbar-item:hover, .omni .navbar.is-dark .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-dark .navbar-brand .navbar-link:focus,
.omni .navbar.is-dark .navbar-brand .navbar-link:hover,
.omni .navbar.is-dark .navbar-brand .navbar-link.is-active {
	background-color: #292929;
	color: var(--color-white);
}

.omni .navbar.is-dark .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-dark .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-dark .navbar-start > .navbar-item,
	.omni .navbar.is-dark .navbar-start .navbar-link,
	.omni .navbar.is-dark .navbar-end > .navbar-item,
	.omni .navbar.is-dark .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-dark .navbar-start > a.navbar-item:focus, .omni .navbar.is-dark .navbar-start > a.navbar-item:hover, .omni .navbar.is-dark .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-dark .navbar-start .navbar-link:focus,
	.omni .navbar.is-dark .navbar-start .navbar-link:hover,
	.omni .navbar.is-dark .navbar-start .navbar-link.is-active,
	.omni .navbar.is-dark .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-dark .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-dark .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-dark .navbar-end .navbar-link:focus,
	.omni .navbar.is-dark .navbar-end .navbar-link:hover,
	.omni .navbar.is-dark .navbar-end .navbar-link.is-active {
		background-color: #292929;
		color: var(--color-white);
	}

	.omni .navbar.is-dark .navbar-start .navbar-link::after,
	.omni .navbar.is-dark .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-dark .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-dark .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-dark .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: #292929;
		color: var(--color-white);
	}

	.omni .navbar.is-dark .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-gray-36);
		color: var(--color-white);
	}
}

.omni .navbar.is-primary {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .navbar.is-primary .navbar-brand > .navbar-item,
.omni .navbar.is-primary .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-primary .navbar-brand > a.navbar-item:focus, .omni .navbar.is-primary .navbar-brand > a.navbar-item:hover, .omni .navbar.is-primary .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-primary .navbar-brand .navbar-link:focus,
.omni .navbar.is-primary .navbar-brand .navbar-link:hover,
.omni .navbar.is-primary .navbar-brand .navbar-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	color: var(--color-white);
}

.omni .navbar.is-primary .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-primary .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-primary .navbar-start > .navbar-item,
	.omni .navbar.is-primary .navbar-start .navbar-link,
	.omni .navbar.is-primary .navbar-end > .navbar-item,
	.omni .navbar.is-primary .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-primary .navbar-start > a.navbar-item:focus, .omni .navbar.is-primary .navbar-start > a.navbar-item:hover, .omni .navbar.is-primary .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-primary .navbar-start .navbar-link:focus,
	.omni .navbar.is-primary .navbar-start .navbar-link:hover,
	.omni .navbar.is-primary .navbar-start .navbar-link.is-active,
	.omni .navbar.is-primary .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-primary .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-primary .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-primary .navbar-end .navbar-link:focus,
	.omni .navbar.is-primary .navbar-end .navbar-link:hover,
	.omni .navbar.is-primary .navbar-end .navbar-link.is-active {
		background-color: var(--color-electric-blue-darkerer);
		color: var(--color-white);
	}

	.omni .navbar.is-primary .navbar-start .navbar-link::after,
	.omni .navbar.is-primary .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-primary .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-primary .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-primary .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: var(--color-electric-blue-darkerer);
		color: var(--color-white);
	}

	.omni .navbar.is-primary .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-electric-blue);
		color: var(--color-white);
	}
}

.omni .navbar.is-link {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .navbar.is-link .navbar-brand > .navbar-item,
.omni .navbar.is-link .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-link .navbar-brand > a.navbar-item:focus, .omni .navbar.is-link .navbar-brand > a.navbar-item:hover, .omni .navbar.is-link .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-link .navbar-brand .navbar-link:focus,
.omni .navbar.is-link .navbar-brand .navbar-link:hover,
.omni .navbar.is-link .navbar-brand .navbar-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	color: var(--color-white);
}

.omni .navbar.is-link .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-link .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-link .navbar-start > .navbar-item,
	.omni .navbar.is-link .navbar-start .navbar-link,
	.omni .navbar.is-link .navbar-end > .navbar-item,
	.omni .navbar.is-link .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-link .navbar-start > a.navbar-item:focus, .omni .navbar.is-link .navbar-start > a.navbar-item:hover, .omni .navbar.is-link .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-link .navbar-start .navbar-link:focus,
	.omni .navbar.is-link .navbar-start .navbar-link:hover,
	.omni .navbar.is-link .navbar-start .navbar-link.is-active,
	.omni .navbar.is-link .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-link .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-link .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-link .navbar-end .navbar-link:focus,
	.omni .navbar.is-link .navbar-end .navbar-link:hover,
	.omni .navbar.is-link .navbar-end .navbar-link.is-active {
		background-color: var(--color-electric-blue-darkerer);
		color: var(--color-white);
	}

	.omni .navbar.is-link .navbar-start .navbar-link::after,
	.omni .navbar.is-link .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-link .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-link .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-link .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: var(--color-electric-blue-darkerer);
		color: var(--color-white);
	}

	.omni .navbar.is-link .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-electric-blue);
		color: var(--color-white);
	}
}

.omni .navbar.is-info {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .navbar.is-info .navbar-brand > .navbar-item,
.omni .navbar.is-info .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-info .navbar-brand > a.navbar-item:focus, .omni .navbar.is-info .navbar-brand > a.navbar-item:hover, .omni .navbar.is-info .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-info .navbar-brand .navbar-link:focus,
.omni .navbar.is-info .navbar-brand .navbar-link:hover,
.omni .navbar.is-info .navbar-brand .navbar-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	color: var(--color-white);
}

.omni .navbar.is-info .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-info .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-info .navbar-start > .navbar-item,
	.omni .navbar.is-info .navbar-start .navbar-link,
	.omni .navbar.is-info .navbar-end > .navbar-item,
	.omni .navbar.is-info .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-info .navbar-start > a.navbar-item:focus, .omni .navbar.is-info .navbar-start > a.navbar-item:hover, .omni .navbar.is-info .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-info .navbar-start .navbar-link:focus,
	.omni .navbar.is-info .navbar-start .navbar-link:hover,
	.omni .navbar.is-info .navbar-start .navbar-link.is-active,
	.omni .navbar.is-info .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-info .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-info .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-info .navbar-end .navbar-link:focus,
	.omni .navbar.is-info .navbar-end .navbar-link:hover,
	.omni .navbar.is-info .navbar-end .navbar-link.is-active {
		background-color: var(--color-electric-blue-darkerer);
		color: var(--color-white);
	}

	.omni .navbar.is-info .navbar-start .navbar-link::after,
	.omni .navbar.is-info .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-info .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-info .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-info .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: var(--color-electric-blue-darkerer);
		color: var(--color-white);
	}

	.omni .navbar.is-info .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-electric-blue);
		color: var(--color-white);
	}
}

.omni .navbar.is-success {
	background-color: var(--color-mint);
	color: var(--color-white);
}

.omni .navbar.is-success .navbar-brand > .navbar-item,
.omni .navbar.is-success .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-success .navbar-brand > a.navbar-item:focus, .omni .navbar.is-success .navbar-brand > a.navbar-item:hover, .omni .navbar.is-success .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-success .navbar-brand .navbar-link:focus,
.omni .navbar.is-success .navbar-brand .navbar-link:hover,
.omni .navbar.is-success .navbar-brand .navbar-link.is-active {
	background-color: #27af9b;
	color: var(--color-white);
}

.omni .navbar.is-success .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-success .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-success .navbar-start > .navbar-item,
	.omni .navbar.is-success .navbar-start .navbar-link,
	.omni .navbar.is-success .navbar-end > .navbar-item,
	.omni .navbar.is-success .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-success .navbar-start > a.navbar-item:focus, .omni .navbar.is-success .navbar-start > a.navbar-item:hover, .omni .navbar.is-success .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-success .navbar-start .navbar-link:focus,
	.omni .navbar.is-success .navbar-start .navbar-link:hover,
	.omni .navbar.is-success .navbar-start .navbar-link.is-active,
	.omni .navbar.is-success .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-success .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-success .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-success .navbar-end .navbar-link:focus,
	.omni .navbar.is-success .navbar-end .navbar-link:hover,
	.omni .navbar.is-success .navbar-end .navbar-link.is-active {
		background-color: #27af9b;
		color: var(--color-white);
	}

	.omni .navbar.is-success .navbar-start .navbar-link::after,
	.omni .navbar.is-success .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-success .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-success .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-success .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: #27af9b;
		color: var(--color-white);
	}

	.omni .navbar.is-success .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-mint);
		color: var(--color-white);
	}
}

.omni .navbar.is-warning {
	background-color: var(--color-honeycomb);
	color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-warning .navbar-brand > .navbar-item,
.omni .navbar.is-warning .navbar-brand .navbar-link {
	color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-warning .navbar-brand > a.navbar-item:focus, .omni .navbar.is-warning .navbar-brand > a.navbar-item:hover, .omni .navbar.is-warning .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-warning .navbar-brand .navbar-link:focus,
.omni .navbar.is-warning .navbar-brand .navbar-link:hover,
.omni .navbar.is-warning .navbar-brand .navbar-link.is-active {
	background-color: #fed069;
	color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-warning .navbar-brand .navbar-link::after {
	border-color: rgba(0, 0, 0, 0.7);
}

.omni .navbar.is-warning .navbar-burger {
	color: rgba(0, 0, 0, 0.7);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-warning .navbar-start > .navbar-item,
	.omni .navbar.is-warning .navbar-start .navbar-link,
	.omni .navbar.is-warning .navbar-end > .navbar-item,
	.omni .navbar.is-warning .navbar-end .navbar-link {
		color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-warning .navbar-start > a.navbar-item:focus, .omni .navbar.is-warning .navbar-start > a.navbar-item:hover, .omni .navbar.is-warning .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-warning .navbar-start .navbar-link:focus,
	.omni .navbar.is-warning .navbar-start .navbar-link:hover,
	.omni .navbar.is-warning .navbar-start .navbar-link.is-active,
	.omni .navbar.is-warning .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-warning .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-warning .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-warning .navbar-end .navbar-link:focus,
	.omni .navbar.is-warning .navbar-end .navbar-link:hover,
	.omni .navbar.is-warning .navbar-end .navbar-link.is-active {
		background-color: #fed069;
		color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-warning .navbar-start .navbar-link::after,
	.omni .navbar.is-warning .navbar-end .navbar-link::after {
		border-color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-warning .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-warning .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-warning .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: #fed069;
		color: rgba(0, 0, 0, 0.7);
	}

	.omni .navbar.is-warning .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-honeycomb);
		color: rgba(0, 0, 0, 0.7);
	}
}

.omni .navbar.is-danger {
	background-color: var(--color-error);
	color: var(--color-white);
}

.omni .navbar.is-danger .navbar-brand > .navbar-item,
.omni .navbar.is-danger .navbar-brand .navbar-link {
	color: var(--color-white);
}

.omni .navbar.is-danger .navbar-brand > a.navbar-item:focus, .omni .navbar.is-danger .navbar-brand > a.navbar-item:hover, .omni .navbar.is-danger .navbar-brand > a.navbar-item.is-active,
.omni .navbar.is-danger .navbar-brand .navbar-link:focus,
.omni .navbar.is-danger .navbar-brand .navbar-link:hover,
.omni .navbar.is-danger .navbar-brand .navbar-link.is-active {
	background-color: #db4167;
	color: var(--color-white);
}

.omni .navbar.is-danger .navbar-brand .navbar-link::after {
	border-color: var(--color-white);
}

.omni .navbar.is-danger .navbar-burger {
	color: var(--color-white);
}
@media screen and (min-width: 1024px) {
	.omni .navbar.is-danger .navbar-start > .navbar-item,
	.omni .navbar.is-danger .navbar-start .navbar-link,
	.omni .navbar.is-danger .navbar-end > .navbar-item,
	.omni .navbar.is-danger .navbar-end .navbar-link {
		color: var(--color-white);
	}

	.omni .navbar.is-danger .navbar-start > a.navbar-item:focus, .omni .navbar.is-danger .navbar-start > a.navbar-item:hover, .omni .navbar.is-danger .navbar-start > a.navbar-item.is-active,
	.omni .navbar.is-danger .navbar-start .navbar-link:focus,
	.omni .navbar.is-danger .navbar-start .navbar-link:hover,
	.omni .navbar.is-danger .navbar-start .navbar-link.is-active,
	.omni .navbar.is-danger .navbar-end > a.navbar-item:focus,
	.omni .navbar.is-danger .navbar-end > a.navbar-item:hover,
	.omni .navbar.is-danger .navbar-end > a.navbar-item.is-active,
	.omni .navbar.is-danger .navbar-end .navbar-link:focus,
	.omni .navbar.is-danger .navbar-end .navbar-link:hover,
	.omni .navbar.is-danger .navbar-end .navbar-link.is-active {
		background-color: #db4167;
		color: var(--color-white);
	}

	.omni .navbar.is-danger .navbar-start .navbar-link::after,
	.omni .navbar.is-danger .navbar-end .navbar-link::after {
		border-color: var(--color-white);
	}

	.omni .navbar.is-danger .navbar-item.has-dropdown:focus .navbar-link,
	.omni .navbar.is-danger .navbar-item.has-dropdown:hover .navbar-link,
	.omni .navbar.is-danger .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: #db4167;
		color: var(--color-white);
	}

	.omni .navbar.is-danger .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-error);
		color: var(--color-white);
	}
}

.omni .navbar > .container {
	align-items: stretch;
	display: flex;
	min-height: 3.25rem;
	width: 100%;
}

.omni .navbar.has-shadow {
	box-shadow: 0 2px 0 0 var(--color-whitesmoke);
}

.omni .navbar.is-fixed-bottom, .omni .navbar.is-fixed-top {
	left: 0;
	position: fixed;
	right: 0;
	z-index: 30;
}

.omni .navbar.is-fixed-bottom {
	bottom: 0;
}

.omni .navbar.is-fixed-bottom.has-shadow {
	box-shadow: 0 -2px 0 0 var(--color-whitesmoke);
}

.omni .navbar.is-fixed-top {
	top: 0;
}

.omni html.has-navbar-fixed-top,
.omni body.has-navbar-fixed-top {
	padding-top: 3.25rem;
}

.omni html.has-navbar-fixed-bottom,
.omni body.has-navbar-fixed-bottom {
	padding-bottom: 3.25rem;
}

.omni .navbar-brand,
.omni .navbar-tabs {
	align-items: stretch;
	display: flex;
	flex-shrink: 0;
	min-height: 3.25rem;
}

.omni .navbar-brand a.navbar-item:focus, .omni .navbar-brand a.navbar-item:hover {
	background-color: var(--color-transparent);
}

.omni .navbar-tabs {
	-webkit-overflow-scrolling: touch;
	max-width: 100vw;
	overflow-x: auto;
	overflow-y: hidden;
}

.omni .navbar-burger {
	color: var(--color-gray-4a);
	cursor: pointer;
	display: block;
	height: 3.25rem;
	position: relative;
	width: 3.25rem;
	margin-left: auto;
}

.omni .navbar-burger span {
	background-color: currentColor;
	display: block;
	height: 1px;
	left: calc(50% - 8px);
	position: absolute;
	transform-origin: center;
	transition-duration: 86ms;
	transition-property: background-color, opacity, transform;
	transition-timing-function: ease-out;
	width: 16px;
}

.omni .navbar-burger span:nth-child(1) {
	top: calc(50% - 6px);
}

.omni .navbar-burger span:nth-child(2) {
	top: calc(50% - 1px);
}

.omni .navbar-burger span:nth-child(3) {
	top: calc(50% + 4px);
}

.omni .navbar-burger:hover {
	background-color: rgba(0, 0, 0, 0.05);
}

.omni .navbar-burger.is-active span:nth-child(1) {
	transform: translateY(5px) rotate(45deg);
}

.omni .navbar-burger.is-active span:nth-child(2) {
	opacity: 0;
}

.omni .navbar-burger.is-active span:nth-child(3) {
	transform: translateY(-5px) rotate(-45deg);
}

.omni .navbar-menu {
	display: none;
}

.omni .navbar-item,
.omni .navbar-link {
	color: var(--color-gray-4a);
	display: block;
	line-height: 1.5;
	padding: 0.5rem 0.75rem;
	position: relative;
}

.omni .navbar-item .icon:only-child,
.omni .navbar-link .icon:only-child {
	margin-left: -0.25rem;
	margin-right: -0.25rem;
}

.omni a.navbar-item,
.omni .navbar-link {
	cursor: pointer;
}

.omni a.navbar-item:focus, .omni a.navbar-item:focus-within, .omni a.navbar-item:hover, .omni a.navbar-item.is-active,
.omni .navbar-link:focus,
.omni .navbar-link:focus-within,
.omni .navbar-link:hover,
.omni .navbar-link.is-active {
	background-color: #fafafa;
	color: var(--color-electric-blue);
}

.omni .navbar-item {
	flex-grow: 0;
	flex-shrink: 0;
}

.omni .navbar-item img {
	max-height: 1.75rem;
}

.omni .navbar-item.has-dropdown {
	padding: 0;
}

.omni .navbar-item.is-expanded {
	flex-grow: 1;
	flex-shrink: 1;
}

.omni .navbar-item.is-tab {
	border-bottom: 1px solid transparent;
	min-height: 3.25rem;
	padding-bottom: calc(0.5rem - 1px);
}

.omni .navbar-item.is-tab:focus, .omni .navbar-item.is-tab:hover {
	background-color: var(--color-transparent);
	border-bottom-color: var(--color-electric-blue);
}

.omni .navbar-item.is-tab.is-active {
	background-color: var(--color-transparent);
	border-bottom-color: var(--color-electric-blue);
	border-bottom-style: solid;
	border-bottom-width: 3px;
	color: var(--color-electric-blue);
	padding-bottom: calc(0.5rem - 3px);
}

.omni .navbar-content {
	flex-grow: 1;
	flex-shrink: 1;
}

.omni .navbar-link:not(.is-arrowless) {
	padding-right: 2.5em;
}

.omni .navbar-link:not(.is-arrowless)::after {
	border-color: var(--color-electric-blue);
	margin-top: -0.375em;
	right: 1.125em;
}

.omni .navbar-dropdown {
	font-size: 0.875rem;
	padding-bottom: 0.5rem;
	padding-top: 0.5rem;
}

.omni .navbar-dropdown .navbar-item {
	padding-left: 1.5rem;
	padding-right: 1.5rem;
}

.omni .navbar-divider {
	background-color: var(--color-whitesmoke);
	border: none;
	display: none;
	height: 2px;
	margin: 0.5rem 0;
}
@media screen and (max-width: 1023px) {
	.omni .navbar > .container {
		display: block;
	}

	.omni .navbar-brand .navbar-item,
	.omni .navbar-tabs .navbar-item {
		align-items: center;
		display: flex;
	}

	.omni .navbar-link::after {
		display: none;
	}

	.omni .navbar-menu {
		background-color: var(--color-white);
		box-shadow: 0 8px 16px rgba(10, 10, 10, 0.1);
		padding: 0.5rem 0;
	}

	.omni .navbar-menu.is-active {
		display: block;
	}

	.omni .navbar.is-fixed-bottom-touch, .omni .navbar.is-fixed-top-touch {
		left: 0;
		position: fixed;
		right: 0;
		z-index: 30;
	}

	.omni .navbar.is-fixed-bottom-touch {
		bottom: 0;
	}

	.omni .navbar.is-fixed-bottom-touch.has-shadow {
		box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1);
	}

	.omni .navbar.is-fixed-top-touch {
		top: 0;
	}

	.omni .navbar.is-fixed-top .navbar-menu, .omni .navbar.is-fixed-top-touch .navbar-menu {
		-webkit-overflow-scrolling: touch;
		max-height: calc(100vh - 3.25rem);
		overflow: auto;
	}

	.omni html.has-navbar-fixed-top-touch,
	.omni body.has-navbar-fixed-top-touch {
		padding-top: 3.25rem;
	}

	.omni html.has-navbar-fixed-bottom-touch,
	.omni body.has-navbar-fixed-bottom-touch {
		padding-bottom: 3.25rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .navbar,
	.omni .navbar-menu,
	.omni .navbar-start,
	.omni .navbar-end {
		align-items: stretch;
		display: flex;
	}

	.omni .navbar {
		min-height: 3.25rem;
	}

	.omni .navbar.is-spaced {
		padding: 1rem 2rem;
	}

	.omni .navbar.is-spaced .navbar-start,
	.omni .navbar.is-spaced .navbar-end {
		align-items: center;
	}

	.omni .navbar.is-spaced a.navbar-item,
	.omni .navbar.is-spaced .navbar-link {
		border-radius: var(--radius-small);
	}

	.omni .navbar.is-transparent a.navbar-item:focus, .omni .navbar.is-transparent a.navbar-item:hover, .omni .navbar.is-transparent a.navbar-item.is-active,
	.omni .navbar.is-transparent .navbar-link:focus,
	.omni .navbar.is-transparent .navbar-link:hover,
	.omni .navbar.is-transparent .navbar-link.is-active {
		background-color: transparent !important;
	}

	.omni .navbar.is-transparent .navbar-item.has-dropdown.is-active .navbar-link, .omni .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus .navbar-link, .omni .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:focus-within .navbar-link, .omni .navbar.is-transparent .navbar-item.has-dropdown.is-hoverable:hover .navbar-link {
		background-color: transparent !important;
	}

	.omni .navbar.is-transparent .navbar-dropdown a.navbar-item:focus, .omni .navbar.is-transparent .navbar-dropdown a.navbar-item:hover {
		background-color: var(--color-whitesmoke);
		color: var(--color-gray-0a);
	}

	.omni .navbar.is-transparent .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-whitesmoke);
		color: var(--color-electric-blue);
	}

	.omni .navbar-burger {
		display: none;
	}

	.omni .navbar-item,
	.omni .navbar-link {
		align-items: center;
		display: flex;
	}

	.omni .navbar-item.has-dropdown {
		align-items: stretch;
	}

	.omni .navbar-item.has-dropdown-up .navbar-link::after {
		transform: rotate(135deg) translate(0.25em, -0.25em);
	}

	.omni .navbar-item.has-dropdown-up .navbar-dropdown {
		border-bottom: 2px solid var(--color-gray-db);
		border-radius: var(--radius-large) var(--radius-large) 0 0;
		border-top: none;
		bottom: 100%;
		box-shadow: 0 -8px 8px rgba(10, 10, 10, 0.1);
		top: auto;
	}

	.omni .navbar-item.is-active .navbar-dropdown, .omni .navbar-item.is-hoverable:focus .navbar-dropdown, .omni .navbar-item.is-hoverable:focus-within .navbar-dropdown, .omni .navbar-item.is-hoverable:hover .navbar-dropdown {
		display: block;
	}

	.navbar.is-spaced .omni .navbar-item.is-active .navbar-dropdown, .omni .navbar-item.is-active .navbar-dropdown.is-boxed, .navbar.is-spaced .omni .navbar-item.is-hoverable:focus .navbar-dropdown, .omni .navbar-item.is-hoverable:focus .navbar-dropdown.is-boxed, .navbar.is-spaced .omni .navbar-item.is-hoverable:focus-within .navbar-dropdown, .omni .navbar-item.is-hoverable:focus-within .navbar-dropdown.is-boxed, .navbar.is-spaced .omni .navbar-item.is-hoverable:hover .navbar-dropdown, .omni .navbar-item.is-hoverable:hover .navbar-dropdown.is-boxed {
		opacity: 1;
		pointer-events: auto;
		transform: translateY(0);
	}

	.omni .navbar-menu {
		flex-grow: 1;
		flex-shrink: 0;
	}

	.omni .navbar-start {
		justify-content: flex-start;
		margin-right: auto;
	}

	.omni .navbar-end {
		justify-content: flex-end;
		margin-left: auto;
	}

	.omni .navbar-dropdown {
		background-color: var(--color-white);
		border-bottom-left-radius: var(--radius-large);
		border-bottom-right-radius: var(--radius-large);
		border-top: 2px solid var(--color-gray-db);
		box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1);
		display: none;
		font-size: 0.875rem;
		left: 0;
		min-width: 100%;
		position: absolute;
		top: 100%;
		z-index: 20;
	}

	.omni .navbar-dropdown .navbar-item {
		padding: 0.375rem 1rem;
		white-space: nowrap;
	}

	.omni .navbar-dropdown a.navbar-item {
		padding-right: 3rem;
	}

	.omni .navbar-dropdown a.navbar-item:focus, .omni .navbar-dropdown a.navbar-item:hover {
		background-color: var(--color-whitesmoke);
		color: var(--color-gray-0a);
	}

	.omni .navbar-dropdown a.navbar-item.is-active {
		background-color: var(--color-whitesmoke);
		color: var(--color-electric-blue);
	}

	.navbar.is-spaced .omni .navbar-dropdown, .omni .navbar-dropdown.is-boxed {
		border-radius: 6px;
		border-top: none;
		box-shadow: 0 8px 8px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);
		display: block;
		opacity: 0;
		pointer-events: none;
		top: calc(100% + (-4px));
		transform: translateY(-5px);
		transition-duration: 86ms;
		transition-property: opacity, transform;
	}

	.omni .navbar-dropdown.is-right {
		left: auto;
		right: 0;
	}

	.omni .navbar-divider {
		display: block;
	}

	.omni .navbar > .container .navbar-brand,
	.omni .container > .navbar .navbar-brand {
		margin-left: -0.75rem;
	}

	.omni .navbar > .container .navbar-menu,
	.omni .container > .navbar .navbar-menu {
		margin-right: -0.75rem;
	}

	.omni .navbar.is-fixed-bottom-desktop, .omni .navbar.is-fixed-top-desktop {
		left: 0;
		position: fixed;
		right: 0;
		z-index: 30;
	}

	.omni .navbar.is-fixed-bottom-desktop {
		bottom: 0;
	}

	.omni .navbar.is-fixed-bottom-desktop.has-shadow {
		box-shadow: 0 -2px 3px rgba(10, 10, 10, 0.1);
	}

	.omni .navbar.is-fixed-top-desktop {
		top: 0;
	}

	.omni html.has-navbar-fixed-top-desktop,
	.omni body.has-navbar-fixed-top-desktop {
		padding-top: 3.25rem;
	}

	.omni html.has-navbar-fixed-bottom-desktop,
	.omni body.has-navbar-fixed-bottom-desktop {
		padding-bottom: 3.25rem;
	}

	.omni html.has-spaced-navbar-fixed-top,
	.omni body.has-spaced-navbar-fixed-top {
		padding-top: 5.25rem;
	}

	.omni html.has-spaced-navbar-fixed-bottom,
	.omni body.has-spaced-navbar-fixed-bottom {
		padding-bottom: 5.25rem;
	}

	.omni a.navbar-item.is-active,
	.omni .navbar-link.is-active {
		color: var(--color-gray-0a);
	}

	.omni a.navbar-item.is-active:not(:focus):not(:hover),
	.omni .navbar-link.is-active:not(:focus):not(:hover) {
		background-color: var(--color-transparent);
	}

	.omni .navbar-item.has-dropdown:focus .navbar-link, .omni .navbar-item.has-dropdown:hover .navbar-link, .omni .navbar-item.has-dropdown.is-active .navbar-link {
		background-color: #fafafa;
	}
}

.omni .hero.is-fullheight-with-navbar {
	min-height: calc(100vh - 3.25rem);
}

.omni .pagination {
	font-size: var(--size-4);
	margin: -0.25rem;
}

.omni .pagination.is-small {
	font-size: var(--size-7);
}

.omni .pagination.is-medium {
	font-size: var(--size-5);
}

.omni .pagination.is-large {
	font-size: var(--size-4);
}

.omni .pagination.is-rounded .pagination-previous,
.omni .pagination.is-rounded .pagination-next {
	padding-left: 1em;
	padding-right: 1em;
	border-radius: 290486px;
}

.omni .pagination.is-rounded .pagination-link {
	border-radius: 290486px;
}

.omni .pagination,
.omni .pagination-list {
	align-items: center;
	display: flex;
	justify-content: center;
	text-align: center;
}

.omni .pagination-previous,
.omni .pagination-next,
.omni .pagination-link,
.omni .pagination-ellipsis {
	font-size: 1em;
	justify-content: center;
	margin: 0.25rem;
	padding-left: 0.5em;
	padding-right: 0.5em;
	text-align: center;
}

.omni .pagination-previous,
.omni .pagination-next,
.omni .pagination-link {
	border-color: var(--color-gray-db);
	color: var(--color-gray-36);
	min-width: 2.5em;
}

.omni .pagination-previous:hover,
.omni .pagination-next:hover,
.omni .pagination-link:hover {
	border-color: var(--color-gray-b5);
	color: var(--color-gray-36);
}

.omni .pagination-previous:focus,
.omni .pagination-next:focus,
.omni .pagination-link:focus {
	border-color: var(--color-electric-blue);
}

.omni .pagination-previous:active,
.omni .pagination-next:active,
.omni .pagination-link:active {
	box-shadow: inset 0 1px 2px rgba(10, 10, 10, 0.2);
}

.omni .pagination-previous[disabled],
.omni .pagination-next[disabled],
.omni .pagination-link[disabled] {
	background-color: var(--color-gray-db);
	border-color: var(--color-gray-db);
	box-shadow: none;
	color: var(--color-gray-7a);
	opacity: 0.5;
}

.omni .pagination-previous,
.omni .pagination-next {
	padding-left: 0.75em;
	padding-right: 0.75em;
	white-space: nowrap;
}

.omni .pagination-link.is-current {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .pagination-ellipsis {
	color: var(--color-gray-b5);
	pointer-events: none;
}

.omni .pagination-list {
	flex-wrap: wrap;
}
@media screen and (max-width: 768px) {
	.omni .pagination {
		flex-wrap: wrap;
	}

	.omni .pagination-previous,
	.omni .pagination-next {
		flex-grow: 1;
		flex-shrink: 1;
	}

	.omni .pagination-list li {
		flex-grow: 1;
		flex-shrink: 1;
	}
}
@media screen and (min-width: 769px), print {
	.omni .pagination-list {
		flex-grow: 1;
		flex-shrink: 1;
		justify-content: flex-start;
		order: 1;
	}

	.omni .pagination-previous {
		order: 2;
	}

	.omni .pagination-next {
		order: 3;
	}

	.omni .pagination {
		justify-content: space-between;
	}

	.omni .pagination.is-centered .pagination-previous {
		order: 1;
	}

	.omni .pagination.is-centered .pagination-list {
		justify-content: center;
		order: 2;
	}

	.omni .pagination.is-centered .pagination-next {
		order: 3;
	}

	.omni .pagination.is-right .pagination-previous {
		order: 1;
	}

	.omni .pagination.is-right .pagination-next {
		order: 2;
	}

	.omni .pagination.is-right .pagination-list {
		justify-content: flex-end;
		order: 3;
	}
}

.omni .panel {
	border-radius: 6px;
	box-shadow: 0 0.5em 1em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);
	font-size: var(--size-4);
}

.omni .panel:not(:last-child) {
	margin-bottom: 1.5rem;
}

.omni .panel.is-white .panel-heading {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .panel.is-white .panel-tabs a.is-active {
	border-bottom-color: var(--color-white);
}

.omni .panel.is-white .panel-block.is-active .panel-icon {
	color: var(--color-white);
}

.omni .panel.is-black .panel-heading {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .panel.is-black .panel-tabs a.is-active {
	border-bottom-color: var(--color-gray-0a);
}

.omni .panel.is-black .panel-block.is-active .panel-icon {
	color: var(--color-gray-0a);
}

.omni .panel.is-light .panel-heading {
	background-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .panel.is-light .panel-tabs a.is-active {
	border-bottom-color: var(--color-whitesmoke);
}

.omni .panel.is-light .panel-block.is-active .panel-icon {
	color: var(--color-whitesmoke);
}

.omni .panel.is-dark .panel-heading {
	background-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .panel.is-dark .panel-tabs a.is-active {
	border-bottom-color: var(--color-gray-36);
}

.omni .panel.is-dark .panel-block.is-active .panel-icon {
	color: var(--color-gray-36);
}

.omni .panel.is-primary .panel-heading {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .panel.is-primary .panel-tabs a.is-active {
	border-bottom-color: var(--color-electric-blue);
}

.omni .panel.is-primary .panel-block.is-active .panel-icon {
	color: var(--color-electric-blue);
}

.omni .panel.is-link .panel-heading {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .panel.is-link .panel-tabs a.is-active {
	border-bottom-color: var(--color-electric-blue);
}

.omni .panel.is-link .panel-block.is-active .panel-icon {
	color: var(--color-electric-blue);
}

.omni .panel.is-info .panel-heading {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .panel.is-info .panel-tabs a.is-active {
	border-bottom-color: var(--color-electric-blue);
}

.omni .panel.is-info .panel-block.is-active .panel-icon {
	color: var(--color-electric-blue);
}

.omni .panel.is-success .panel-heading {
	background-color: var(--color-mint);
	color: var(--color-white);
}

.omni .panel.is-success .panel-tabs a.is-active {
	border-bottom-color: var(--color-mint);
}

.omni .panel.is-success .panel-block.is-active .panel-icon {
	color: var(--color-mint);
}

.omni .panel.is-warning .panel-heading {
	background-color: var(--color-honeycomb);
	color: rgba(0, 0, 0, 0.7);
}

.omni .panel.is-warning .panel-tabs a.is-active {
	border-bottom-color: var(--color-honeycomb);
}

.omni .panel.is-warning .panel-block.is-active .panel-icon {
	color: var(--color-honeycomb);
}

.omni .panel.is-danger .panel-heading {
	background-color: var(--color-error);
	color: var(--color-white);
}

.omni .panel.is-danger .panel-tabs a.is-active {
	border-bottom-color: var(--color-error);
}

.omni .panel.is-danger .panel-block.is-active .panel-icon {
	color: var(--color-error);
}

.omni .panel-tabs:not(:last-child),
.omni .panel-block:not(:last-child) {
	border-bottom: 1px solid #ededed;
}

.omni .panel-heading {
	background-color: #ededed;
	border-radius: var(--radius-large) var(--radius-large) 0 0;
	color: var(--color-gray-36);
	font-size: 1.25em;
	font-weight: 700;
	line-height: 1.25;
	padding: 0.75em 1em;
}

.omni .panel-tabs {
	align-items: flex-end;
	display: flex;
	font-size: 0.875em;
	justify-content: center;
}

.omni .panel-tabs a {
	border-bottom: 1px solid var(--color-gray-db);
	margin-bottom: -1px;
	padding: 0.5em;
}

.omni .panel-tabs a.is-active {
	border-bottom-color: var(--color-gray-4a);
	color: var(--color-gray-36);
}

.omni .panel-list a {
	color: var(--color-gray-4a);
}

.omni .panel-list a:hover {
	color: var(--color-electric-blue);
}

.omni .panel-block {
	align-items: center;
	color: var(--color-gray-36);
	display: flex;
	justify-content: flex-start;
	padding: 0.5em 0.75em;
}

.omni .panel-block input[type="checkbox"] {
	margin-right: 0.75em;
}

.omni .panel-block > .control {
	flex-grow: 1;
	flex-shrink: 1;
	width: 100%;
}

.omni .panel-block.is-wrapped {
	flex-wrap: wrap;
}

.omni .panel-block.is-active {
	border-left-color: var(--color-electric-blue);
	color: var(--color-gray-36);
}

.omni .panel-block.is-active .panel-icon {
	color: var(--color-electric-blue);
}

.omni .panel-block:last-child {
	border-bottom-left-radius: var(--radius-large);
	border-bottom-right-radius: var(--radius-large);
}

.omni a.panel-block,
.omni label.panel-block {
	cursor: pointer;
}

.omni a.panel-block:hover,
.omni label.panel-block:hover {
	background-color: var(--color-whitesmoke);
}

.omni .panel-icon {
	display: inline-block;
	font-size: 14px;
	height: 1em;
	line-height: 1em;
	text-align: center;
	vertical-align: top;
	width: 1em;
	color: var(--color-gray-7a);
	margin-right: 0.75em;
}

.omni .panel-icon .fa {
	font-size: inherit;
	line-height: inherit;
}

.omni .tabs {
	-webkit-overflow-scrolling: touch;
	align-items: stretch;
	display: flex;
	font-size: var(--size-4);
	justify-content: space-between;
	overflow: hidden;
	overflow-x: auto;
	white-space: nowrap;
}

.omni .tabs a {
	align-items: center;
	border-bottom-color: var(--color-gray-db);
	border-bottom-style: solid;
	border-bottom-width: 1px;
	color: var(--color-gray-4a);
	display: flex;
	justify-content: center;
	margin-bottom: -1px;
	padding: 0.5em 1em;
	vertical-align: top;
}

.omni .tabs a:hover {
	border-bottom-color: var(--color-gray-36);
	color: var(--color-gray-36);
}

.omni .tabs li {
	display: block;
}

.omni .tabs li.is-active a {
	border-bottom-color: var(--color-electric-blue);
	color: var(--color-electric-blue);
}

.omni .tabs ul {
	align-items: center;
	border-bottom-color: var(--color-gray-db);
	border-bottom-style: solid;
	border-bottom-width: 1px;
	display: flex;
	flex-grow: 1;
	flex-shrink: 0;
	justify-content: flex-start;
}

.omni .tabs ul.is-left {
	padding-right: 0.75em;
}

.omni .tabs ul.is-center {
	flex: none;
	justify-content: center;
	padding-left: 0.75em;
	padding-right: 0.75em;
}

.omni .tabs ul.is-right {
	justify-content: flex-end;
	padding-left: 0.75em;
}

.omni .tabs .icon:first-child {
	margin-right: 0.5em;
}

.omni .tabs .icon:last-child {
	margin-left: 0.5em;
}

.omni .tabs.is-centered ul {
	justify-content: center;
}

.omni .tabs.is-right ul {
	justify-content: flex-end;
}

.omni .tabs.is-boxed a {
	border: 1px solid transparent;
	border-radius: var(--radius-small) var(--radius-small) 0 0;
}

.omni .tabs.is-boxed a:hover {
	background-color: var(--color-whitesmoke);
	border-bottom-color: var(--color-gray-db);
}

.omni .tabs.is-boxed li.is-active a {
	background-color: var(--color-white);
	border-color: var(--color-gray-db);
	border-bottom-color: transparent !important;
}

.omni .tabs.is-fullwidth li {
	flex-grow: 1;
	flex-shrink: 0;
}

.omni .tabs.is-toggle a {
	border-color: var(--color-gray-db);
	border-style: solid;
	border-width: 1px;
	margin-bottom: 0;
	position: relative;
}

.omni .tabs.is-toggle a:hover {
	background-color: var(--color-whitesmoke);
	border-color: var(--color-gray-b5);
	z-index: 2;
}

.omni .tabs.is-toggle li + li {
	margin-left: -1px;
}

.omni .tabs.is-toggle li:first-child a {
	border-top-left-radius: var(--radius-small);
	border-bottom-left-radius: var(--radius-small);
}

.omni .tabs.is-toggle li:last-child a {
	border-top-right-radius: var(--radius-small);
	border-bottom-right-radius: var(--radius-small);
}

.omni .tabs.is-toggle li.is-active a {
	background-color: var(--color-electric-blue);
	border-color: var(--color-electric-blue);
	color: var(--color-white);
	z-index: 1;
}

.omni .tabs.is-toggle ul {
	border-bottom: none;
}

.omni .tabs.is-toggle.is-toggle-rounded li:first-child a {
	border-bottom-left-radius: 290486px;
	border-top-left-radius: 290486px;
	padding-left: 1.25em;
}

.omni .tabs.is-toggle.is-toggle-rounded li:last-child a {
	border-bottom-right-radius: 290486px;
	border-top-right-radius: 290486px;
	padding-right: 1.25em;
}

.omni .tabs.is-small {
	font-size: var(--size-small);
}

.omni .tabs.is-medium {
	font-size: var(--size-medium);
}

.omni .tabs.is-large {
	font-size: var(--size-large);
}

.omni .column {
	display: block;
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 1;
	padding: 0.75rem;
}

.columns.is-mobile > .omni .column.is-narrow {
	flex: none;
}

.columns.is-mobile > .omni .column.is-full {
	flex: none;
	width: 100%;
}

.columns.is-mobile > .omni .column.is-three-quarters {
	flex: none;
	width: 75%;
}

.columns.is-mobile > .omni .column.is-two-thirds {
	flex: none;
	width: 66.6666%;
}

.columns.is-mobile > .omni .column.is-half {
	flex: none;
	width: 50%;
}

.columns.is-mobile > .omni .column.is-one-third {
	flex: none;
	width: 33.3333%;
}

.columns.is-mobile > .omni .column.is-one-quarter {
	flex: none;
	width: 25%;
}

.columns.is-mobile > .omni .column.is-one-fifth {
	flex: none;
	width: 20%;
}

.columns.is-mobile > .omni .column.is-two-fifths {
	flex: none;
	width: 40%;
}

.columns.is-mobile > .omni .column.is-three-fifths {
	flex: none;
	width: 60%;
}

.columns.is-mobile > .omni .column.is-four-fifths {
	flex: none;
	width: 80%;
}

.columns.is-mobile > .omni .column.is-offset-three-quarters {
	margin-left: 75%;
}

.columns.is-mobile > .omni .column.is-offset-two-thirds {
	margin-left: 66.6666%;
}

.columns.is-mobile > .omni .column.is-offset-half {
	margin-left: 50%;
}

.columns.is-mobile > .omni .column.is-offset-one-third {
	margin-left: 33.3333%;
}

.columns.is-mobile > .omni .column.is-offset-one-quarter {
	margin-left: 25%;
}

.columns.is-mobile > .omni .column.is-offset-one-fifth {
	margin-left: 20%;
}

.columns.is-mobile > .omni .column.is-offset-two-fifths {
	margin-left: 40%;
}

.columns.is-mobile > .omni .column.is-offset-three-fifths {
	margin-left: 60%;
}

.columns.is-mobile > .omni .column.is-offset-four-fifths {
	margin-left: 80%;
}

.columns.is-mobile > .omni .column.is-0 {
	flex: none;
	width: 0%;
}

.columns.is-mobile > .omni .column.is-offset-0 {
	margin-left: 0%;
}

.columns.is-mobile > .omni .column.is-1 {
	flex: none;
	width: 8.33333%;
}

.columns.is-mobile > .omni .column.is-offset-1 {
	margin-left: 8.33333%;
}

.columns.is-mobile > .omni .column.is-2 {
	flex: none;
	width: 16.66667%;
}

.columns.is-mobile > .omni .column.is-offset-2 {
	margin-left: 16.66667%;
}

.columns.is-mobile > .omni .column.is-3 {
	flex: none;
	width: 25%;
}

.columns.is-mobile > .omni .column.is-offset-3 {
	margin-left: 25%;
}

.columns.is-mobile > .omni .column.is-4 {
	flex: none;
	width: 33.33333%;
}

.columns.is-mobile > .omni .column.is-offset-4 {
	margin-left: 33.33333%;
}

.columns.is-mobile > .omni .column.is-5 {
	flex: none;
	width: 41.66667%;
}

.columns.is-mobile > .omni .column.is-offset-5 {
	margin-left: 41.66667%;
}

.columns.is-mobile > .omni .column.is-6 {
	flex: none;
	width: 50%;
}

.columns.is-mobile > .omni .column.is-offset-6 {
	margin-left: 50%;
}

.columns.is-mobile > .omni .column.is-7 {
	flex: none;
	width: 58.33333%;
}

.columns.is-mobile > .omni .column.is-offset-7 {
	margin-left: 58.33333%;
}

.columns.is-mobile > .omni .column.is-8 {
	flex: none;
	width: 66.66667%;
}

.columns.is-mobile > .omni .column.is-offset-8 {
	margin-left: 66.66667%;
}

.columns.is-mobile > .omni .column.is-9 {
	flex: none;
	width: 75%;
}

.columns.is-mobile > .omni .column.is-offset-9 {
	margin-left: 75%;
}

.columns.is-mobile > .omni .column.is-10 {
	flex: none;
	width: 83.33333%;
}

.columns.is-mobile > .omni .column.is-offset-10 {
	margin-left: 83.33333%;
}

.columns.is-mobile > .omni .column.is-11 {
	flex: none;
	width: 91.66667%;
}

.columns.is-mobile > .omni .column.is-offset-11 {
	margin-left: 91.66667%;
}

.columns.is-mobile > .omni .column.is-12 {
	flex: none;
	width: 100%;
}

.columns.is-mobile > .omni .column.is-offset-12 {
	margin-left: 100%;
}
@media screen and (max-width: 768px) {
	.omni .column.is-narrow-mobile {
		flex: none;
	}

	.omni .column.is-full-mobile {
		flex: none;
		width: 100%;
	}

	.omni .column.is-three-quarters-mobile {
		flex: none;
		width: 75%;
	}

	.omni .column.is-two-thirds-mobile {
		flex: none;
		width: 66.6666%;
	}

	.omni .column.is-half-mobile {
		flex: none;
		width: 50%;
	}

	.omni .column.is-one-third-mobile {
		flex: none;
		width: 33.3333%;
	}

	.omni .column.is-one-quarter-mobile {
		flex: none;
		width: 25%;
	}

	.omni .column.is-one-fifth-mobile {
		flex: none;
		width: 20%;
	}

	.omni .column.is-two-fifths-mobile {
		flex: none;
		width: 40%;
	}

	.omni .column.is-three-fifths-mobile {
		flex: none;
		width: 60%;
	}

	.omni .column.is-four-fifths-mobile {
		flex: none;
		width: 80%;
	}

	.omni .column.is-offset-three-quarters-mobile {
		margin-left: 75%;
	}

	.omni .column.is-offset-two-thirds-mobile {
		margin-left: 66.6666%;
	}

	.omni .column.is-offset-half-mobile {
		margin-left: 50%;
	}

	.omni .column.is-offset-one-third-mobile {
		margin-left: 33.3333%;
	}

	.omni .column.is-offset-one-quarter-mobile {
		margin-left: 25%;
	}

	.omni .column.is-offset-one-fifth-mobile {
		margin-left: 20%;
	}

	.omni .column.is-offset-two-fifths-mobile {
		margin-left: 40%;
	}

	.omni .column.is-offset-three-fifths-mobile {
		margin-left: 60%;
	}

	.omni .column.is-offset-four-fifths-mobile {
		margin-left: 80%;
	}

	.omni .column.is-0-mobile {
		flex: none;
		width: 0%;
	}

	.omni .column.is-offset-0-mobile {
		margin-left: 0%;
	}

	.omni .column.is-1-mobile {
		flex: none;
		width: 8.33333%;
	}

	.omni .column.is-offset-1-mobile {
		margin-left: 8.33333%;
	}

	.omni .column.is-2-mobile {
		flex: none;
		width: 16.66667%;
	}

	.omni .column.is-offset-2-mobile {
		margin-left: 16.66667%;
	}

	.omni .column.is-3-mobile {
		flex: none;
		width: 25%;
	}

	.omni .column.is-offset-3-mobile {
		margin-left: 25%;
	}

	.omni .column.is-4-mobile {
		flex: none;
		width: 33.33333%;
	}

	.omni .column.is-offset-4-mobile {
		margin-left: 33.33333%;
	}

	.omni .column.is-5-mobile {
		flex: none;
		width: 41.66667%;
	}

	.omni .column.is-offset-5-mobile {
		margin-left: 41.66667%;
	}

	.omni .column.is-6-mobile {
		flex: none;
		width: 50%;
	}

	.omni .column.is-offset-6-mobile {
		margin-left: 50%;
	}

	.omni .column.is-7-mobile {
		flex: none;
		width: 58.33333%;
	}

	.omni .column.is-offset-7-mobile {
		margin-left: 58.33333%;
	}

	.omni .column.is-8-mobile {
		flex: none;
		width: 66.66667%;
	}

	.omni .column.is-offset-8-mobile {
		margin-left: 66.66667%;
	}

	.omni .column.is-9-mobile {
		flex: none;
		width: 75%;
	}

	.omni .column.is-offset-9-mobile {
		margin-left: 75%;
	}

	.omni .column.is-10-mobile {
		flex: none;
		width: 83.33333%;
	}

	.omni .column.is-offset-10-mobile {
		margin-left: 83.33333%;
	}

	.omni .column.is-11-mobile {
		flex: none;
		width: 91.66667%;
	}

	.omni .column.is-offset-11-mobile {
		margin-left: 91.66667%;
	}

	.omni .column.is-12-mobile {
		flex: none;
		width: 100%;
	}

	.omni .column.is-offset-12-mobile {
		margin-left: 100%;
	}
}
@media screen and (min-width: 769px), print {
	.omni .column.is-narrow, .omni .column.is-narrow-tablet {
		flex: none;
	}

	.omni .column.is-full, .omni .column.is-full-tablet {
		flex: none;
		width: 100%;
	}

	.omni .column.is-three-quarters, .omni .column.is-three-quarters-tablet {
		flex: none;
		width: 75%;
	}

	.omni .column.is-two-thirds, .omni .column.is-two-thirds-tablet {
		flex: none;
		width: 66.6666%;
	}

	.omni .column.is-half, .omni .column.is-half-tablet {
		flex: none;
		width: 50%;
	}

	.omni .column.is-one-third, .omni .column.is-one-third-tablet {
		flex: none;
		width: 33.3333%;
	}

	.omni .column.is-one-quarter, .omni .column.is-one-quarter-tablet {
		flex: none;
		width: 25%;
	}

	.omni .column.is-one-fifth, .omni .column.is-one-fifth-tablet {
		flex: none;
		width: 20%;
	}

	.omni .column.is-two-fifths, .omni .column.is-two-fifths-tablet {
		flex: none;
		width: 40%;
	}

	.omni .column.is-three-fifths, .omni .column.is-three-fifths-tablet {
		flex: none;
		width: 60%;
	}

	.omni .column.is-four-fifths, .omni .column.is-four-fifths-tablet {
		flex: none;
		width: 80%;
	}

	.omni .column.is-offset-three-quarters, .omni .column.is-offset-three-quarters-tablet {
		margin-left: 75%;
	}

	.omni .column.is-offset-two-thirds, .omni .column.is-offset-two-thirds-tablet {
		margin-left: 66.6666%;
	}

	.omni .column.is-offset-half, .omni .column.is-offset-half-tablet {
		margin-left: 50%;
	}

	.omni .column.is-offset-one-third, .omni .column.is-offset-one-third-tablet {
		margin-left: 33.3333%;
	}

	.omni .column.is-offset-one-quarter, .omni .column.is-offset-one-quarter-tablet {
		margin-left: 25%;
	}

	.omni .column.is-offset-one-fifth, .omni .column.is-offset-one-fifth-tablet {
		margin-left: 20%;
	}

	.omni .column.is-offset-two-fifths, .omni .column.is-offset-two-fifths-tablet {
		margin-left: 40%;
	}

	.omni .column.is-offset-three-fifths, .omni .column.is-offset-three-fifths-tablet {
		margin-left: 60%;
	}

	.omni .column.is-offset-four-fifths, .omni .column.is-offset-four-fifths-tablet {
		margin-left: 80%;
	}

	.omni .column.is-0, .omni .column.is-0-tablet {
		flex: none;
		width: 0%;
	}

	.omni .column.is-offset-0, .omni .column.is-offset-0-tablet {
		margin-left: 0%;
	}

	.omni .column.is-1, .omni .column.is-1-tablet {
		flex: none;
		width: 8.33333%;
	}

	.omni .column.is-offset-1, .omni .column.is-offset-1-tablet {
		margin-left: 8.33333%;
	}

	.omni .column.is-2, .omni .column.is-2-tablet {
		flex: none;
		width: 16.66667%;
	}

	.omni .column.is-offset-2, .omni .column.is-offset-2-tablet {
		margin-left: 16.66667%;
	}

	.omni .column.is-3, .omni .column.is-3-tablet {
		flex: none;
		width: 25%;
	}

	.omni .column.is-offset-3, .omni .column.is-offset-3-tablet {
		margin-left: 25%;
	}

	.omni .column.is-4, .omni .column.is-4-tablet {
		flex: none;
		width: 33.33333%;
	}

	.omni .column.is-offset-4, .omni .column.is-offset-4-tablet {
		margin-left: 33.33333%;
	}

	.omni .column.is-5, .omni .column.is-5-tablet {
		flex: none;
		width: 41.66667%;
	}

	.omni .column.is-offset-5, .omni .column.is-offset-5-tablet {
		margin-left: 41.66667%;
	}

	.omni .column.is-6, .omni .column.is-6-tablet {
		flex: none;
		width: 50%;
	}

	.omni .column.is-offset-6, .omni .column.is-offset-6-tablet {
		margin-left: 50%;
	}

	.omni .column.is-7, .omni .column.is-7-tablet {
		flex: none;
		width: 58.33333%;
	}

	.omni .column.is-offset-7, .omni .column.is-offset-7-tablet {
		margin-left: 58.33333%;
	}

	.omni .column.is-8, .omni .column.is-8-tablet {
		flex: none;
		width: 66.66667%;
	}

	.omni .column.is-offset-8, .omni .column.is-offset-8-tablet {
		margin-left: 66.66667%;
	}

	.omni .column.is-9, .omni .column.is-9-tablet {
		flex: none;
		width: 75%;
	}

	.omni .column.is-offset-9, .omni .column.is-offset-9-tablet {
		margin-left: 75%;
	}

	.omni .column.is-10, .omni .column.is-10-tablet {
		flex: none;
		width: 83.33333%;
	}

	.omni .column.is-offset-10, .omni .column.is-offset-10-tablet {
		margin-left: 83.33333%;
	}

	.omni .column.is-11, .omni .column.is-11-tablet {
		flex: none;
		width: 91.66667%;
	}

	.omni .column.is-offset-11, .omni .column.is-offset-11-tablet {
		margin-left: 91.66667%;
	}

	.omni .column.is-12, .omni .column.is-12-tablet {
		flex: none;
		width: 100%;
	}

	.omni .column.is-offset-12, .omni .column.is-offset-12-tablet {
		margin-left: 100%;
	}
}
@media screen and (max-width: 1023px) {
	.omni .column.is-narrow-touch {
		flex: none;
	}

	.omni .column.is-full-touch {
		flex: none;
		width: 100%;
	}

	.omni .column.is-three-quarters-touch {
		flex: none;
		width: 75%;
	}

	.omni .column.is-two-thirds-touch {
		flex: none;
		width: 66.6666%;
	}

	.omni .column.is-half-touch {
		flex: none;
		width: 50%;
	}

	.omni .column.is-one-third-touch {
		flex: none;
		width: 33.3333%;
	}

	.omni .column.is-one-quarter-touch {
		flex: none;
		width: 25%;
	}

	.omni .column.is-one-fifth-touch {
		flex: none;
		width: 20%;
	}

	.omni .column.is-two-fifths-touch {
		flex: none;
		width: 40%;
	}

	.omni .column.is-three-fifths-touch {
		flex: none;
		width: 60%;
	}

	.omni .column.is-four-fifths-touch {
		flex: none;
		width: 80%;
	}

	.omni .column.is-offset-three-quarters-touch {
		margin-left: 75%;
	}

	.omni .column.is-offset-two-thirds-touch {
		margin-left: 66.6666%;
	}

	.omni .column.is-offset-half-touch {
		margin-left: 50%;
	}

	.omni .column.is-offset-one-third-touch {
		margin-left: 33.3333%;
	}

	.omni .column.is-offset-one-quarter-touch {
		margin-left: 25%;
	}

	.omni .column.is-offset-one-fifth-touch {
		margin-left: 20%;
	}

	.omni .column.is-offset-two-fifths-touch {
		margin-left: 40%;
	}

	.omni .column.is-offset-three-fifths-touch {
		margin-left: 60%;
	}

	.omni .column.is-offset-four-fifths-touch {
		margin-left: 80%;
	}

	.omni .column.is-0-touch {
		flex: none;
		width: 0%;
	}

	.omni .column.is-offset-0-touch {
		margin-left: 0%;
	}

	.omni .column.is-1-touch {
		flex: none;
		width: 8.33333%;
	}

	.omni .column.is-offset-1-touch {
		margin-left: 8.33333%;
	}

	.omni .column.is-2-touch {
		flex: none;
		width: 16.66667%;
	}

	.omni .column.is-offset-2-touch {
		margin-left: 16.66667%;
	}

	.omni .column.is-3-touch {
		flex: none;
		width: 25%;
	}

	.omni .column.is-offset-3-touch {
		margin-left: 25%;
	}

	.omni .column.is-4-touch {
		flex: none;
		width: 33.33333%;
	}

	.omni .column.is-offset-4-touch {
		margin-left: 33.33333%;
	}

	.omni .column.is-5-touch {
		flex: none;
		width: 41.66667%;
	}

	.omni .column.is-offset-5-touch {
		margin-left: 41.66667%;
	}

	.omni .column.is-6-touch {
		flex: none;
		width: 50%;
	}

	.omni .column.is-offset-6-touch {
		margin-left: 50%;
	}

	.omni .column.is-7-touch {
		flex: none;
		width: 58.33333%;
	}

	.omni .column.is-offset-7-touch {
		margin-left: 58.33333%;
	}

	.omni .column.is-8-touch {
		flex: none;
		width: 66.66667%;
	}

	.omni .column.is-offset-8-touch {
		margin-left: 66.66667%;
	}

	.omni .column.is-9-touch {
		flex: none;
		width: 75%;
	}

	.omni .column.is-offset-9-touch {
		margin-left: 75%;
	}

	.omni .column.is-10-touch {
		flex: none;
		width: 83.33333%;
	}

	.omni .column.is-offset-10-touch {
		margin-left: 83.33333%;
	}

	.omni .column.is-11-touch {
		flex: none;
		width: 91.66667%;
	}

	.omni .column.is-offset-11-touch {
		margin-left: 91.66667%;
	}

	.omni .column.is-12-touch {
		flex: none;
		width: 100%;
	}

	.omni .column.is-offset-12-touch {
		margin-left: 100%;
	}
}
@media screen and (min-width: 1024px) {
	.omni .column.is-narrow-desktop {
		flex: none;
	}

	.omni .column.is-full-desktop {
		flex: none;
		width: 100%;
	}

	.omni .column.is-three-quarters-desktop {
		flex: none;
		width: 75%;
	}

	.omni .column.is-two-thirds-desktop {
		flex: none;
		width: 66.6666%;
	}

	.omni .column.is-half-desktop {
		flex: none;
		width: 50%;
	}

	.omni .column.is-one-third-desktop {
		flex: none;
		width: 33.3333%;
	}

	.omni .column.is-one-quarter-desktop {
		flex: none;
		width: 25%;
	}

	.omni .column.is-one-fifth-desktop {
		flex: none;
		width: 20%;
	}

	.omni .column.is-two-fifths-desktop {
		flex: none;
		width: 40%;
	}

	.omni .column.is-three-fifths-desktop {
		flex: none;
		width: 60%;
	}

	.omni .column.is-four-fifths-desktop {
		flex: none;
		width: 80%;
	}

	.omni .column.is-offset-three-quarters-desktop {
		margin-left: 75%;
	}

	.omni .column.is-offset-two-thirds-desktop {
		margin-left: 66.6666%;
	}

	.omni .column.is-offset-half-desktop {
		margin-left: 50%;
	}

	.omni .column.is-offset-one-third-desktop {
		margin-left: 33.3333%;
	}

	.omni .column.is-offset-one-quarter-desktop {
		margin-left: 25%;
	}

	.omni .column.is-offset-one-fifth-desktop {
		margin-left: 20%;
	}

	.omni .column.is-offset-two-fifths-desktop {
		margin-left: 40%;
	}

	.omni .column.is-offset-three-fifths-desktop {
		margin-left: 60%;
	}

	.omni .column.is-offset-four-fifths-desktop {
		margin-left: 80%;
	}

	.omni .column.is-0-desktop {
		flex: none;
		width: 0%;
	}

	.omni .column.is-offset-0-desktop {
		margin-left: 0%;
	}

	.omni .column.is-1-desktop {
		flex: none;
		width: 8.33333%;
	}

	.omni .column.is-offset-1-desktop {
		margin-left: 8.33333%;
	}

	.omni .column.is-2-desktop {
		flex: none;
		width: 16.66667%;
	}

	.omni .column.is-offset-2-desktop {
		margin-left: 16.66667%;
	}

	.omni .column.is-3-desktop {
		flex: none;
		width: 25%;
	}

	.omni .column.is-offset-3-desktop {
		margin-left: 25%;
	}

	.omni .column.is-4-desktop {
		flex: none;
		width: 33.33333%;
	}

	.omni .column.is-offset-4-desktop {
		margin-left: 33.33333%;
	}

	.omni .column.is-5-desktop {
		flex: none;
		width: 41.66667%;
	}

	.omni .column.is-offset-5-desktop {
		margin-left: 41.66667%;
	}

	.omni .column.is-6-desktop {
		flex: none;
		width: 50%;
	}

	.omni .column.is-offset-6-desktop {
		margin-left: 50%;
	}

	.omni .column.is-7-desktop {
		flex: none;
		width: 58.33333%;
	}

	.omni .column.is-offset-7-desktop {
		margin-left: 58.33333%;
	}

	.omni .column.is-8-desktop {
		flex: none;
		width: 66.66667%;
	}

	.omni .column.is-offset-8-desktop {
		margin-left: 66.66667%;
	}

	.omni .column.is-9-desktop {
		flex: none;
		width: 75%;
	}

	.omni .column.is-offset-9-desktop {
		margin-left: 75%;
	}

	.omni .column.is-10-desktop {
		flex: none;
		width: 83.33333%;
	}

	.omni .column.is-offset-10-desktop {
		margin-left: 83.33333%;
	}

	.omni .column.is-11-desktop {
		flex: none;
		width: 91.66667%;
	}

	.omni .column.is-offset-11-desktop {
		margin-left: 91.66667%;
	}

	.omni .column.is-12-desktop {
		flex: none;
		width: 100%;
	}

	.omni .column.is-offset-12-desktop {
		margin-left: 100%;
	}
}
@media screen and (min-width: 1216px) {
	.omni .column.is-narrow-widescreen {
		flex: none;
	}

	.omni .column.is-full-widescreen {
		flex: none;
		width: 100%;
	}

	.omni .column.is-three-quarters-widescreen {
		flex: none;
		width: 75%;
	}

	.omni .column.is-two-thirds-widescreen {
		flex: none;
		width: 66.6666%;
	}

	.omni .column.is-half-widescreen {
		flex: none;
		width: 50%;
	}

	.omni .column.is-one-third-widescreen {
		flex: none;
		width: 33.3333%;
	}

	.omni .column.is-one-quarter-widescreen {
		flex: none;
		width: 25%;
	}

	.omni .column.is-one-fifth-widescreen {
		flex: none;
		width: 20%;
	}

	.omni .column.is-two-fifths-widescreen {
		flex: none;
		width: 40%;
	}

	.omni .column.is-three-fifths-widescreen {
		flex: none;
		width: 60%;
	}

	.omni .column.is-four-fifths-widescreen {
		flex: none;
		width: 80%;
	}

	.omni .column.is-offset-three-quarters-widescreen {
		margin-left: 75%;
	}

	.omni .column.is-offset-two-thirds-widescreen {
		margin-left: 66.6666%;
	}

	.omni .column.is-offset-half-widescreen {
		margin-left: 50%;
	}

	.omni .column.is-offset-one-third-widescreen {
		margin-left: 33.3333%;
	}

	.omni .column.is-offset-one-quarter-widescreen {
		margin-left: 25%;
	}

	.omni .column.is-offset-one-fifth-widescreen {
		margin-left: 20%;
	}

	.omni .column.is-offset-two-fifths-widescreen {
		margin-left: 40%;
	}

	.omni .column.is-offset-three-fifths-widescreen {
		margin-left: 60%;
	}

	.omni .column.is-offset-four-fifths-widescreen {
		margin-left: 80%;
	}

	.omni .column.is-0-widescreen {
		flex: none;
		width: 0%;
	}

	.omni .column.is-offset-0-widescreen {
		margin-left: 0%;
	}

	.omni .column.is-1-widescreen {
		flex: none;
		width: 8.33333%;
	}

	.omni .column.is-offset-1-widescreen {
		margin-left: 8.33333%;
	}

	.omni .column.is-2-widescreen {
		flex: none;
		width: 16.66667%;
	}

	.omni .column.is-offset-2-widescreen {
		margin-left: 16.66667%;
	}

	.omni .column.is-3-widescreen {
		flex: none;
		width: 25%;
	}

	.omni .column.is-offset-3-widescreen {
		margin-left: 25%;
	}

	.omni .column.is-4-widescreen {
		flex: none;
		width: 33.33333%;
	}

	.omni .column.is-offset-4-widescreen {
		margin-left: 33.33333%;
	}

	.omni .column.is-5-widescreen {
		flex: none;
		width: 41.66667%;
	}

	.omni .column.is-offset-5-widescreen {
		margin-left: 41.66667%;
	}

	.omni .column.is-6-widescreen {
		flex: none;
		width: 50%;
	}

	.omni .column.is-offset-6-widescreen {
		margin-left: 50%;
	}

	.omni .column.is-7-widescreen {
		flex: none;
		width: 58.33333%;
	}

	.omni .column.is-offset-7-widescreen {
		margin-left: 58.33333%;
	}

	.omni .column.is-8-widescreen {
		flex: none;
		width: 66.66667%;
	}

	.omni .column.is-offset-8-widescreen {
		margin-left: 66.66667%;
	}

	.omni .column.is-9-widescreen {
		flex: none;
		width: 75%;
	}

	.omni .column.is-offset-9-widescreen {
		margin-left: 75%;
	}

	.omni .column.is-10-widescreen {
		flex: none;
		width: 83.33333%;
	}

	.omni .column.is-offset-10-widescreen {
		margin-left: 83.33333%;
	}

	.omni .column.is-11-widescreen {
		flex: none;
		width: 91.66667%;
	}

	.omni .column.is-offset-11-widescreen {
		margin-left: 91.66667%;
	}

	.omni .column.is-12-widescreen {
		flex: none;
		width: 100%;
	}

	.omni .column.is-offset-12-widescreen {
		margin-left: 100%;
	}
}
@media screen and (min-width: 1408px) {
	.omni .column.is-narrow-fullhd {
		flex: none;
	}

	.omni .column.is-full-fullhd {
		flex: none;
		width: 100%;
	}

	.omni .column.is-three-quarters-fullhd {
		flex: none;
		width: 75%;
	}

	.omni .column.is-two-thirds-fullhd {
		flex: none;
		width: 66.6666%;
	}

	.omni .column.is-half-fullhd {
		flex: none;
		width: 50%;
	}

	.omni .column.is-one-third-fullhd {
		flex: none;
		width: 33.3333%;
	}

	.omni .column.is-one-quarter-fullhd {
		flex: none;
		width: 25%;
	}

	.omni .column.is-one-fifth-fullhd {
		flex: none;
		width: 20%;
	}

	.omni .column.is-two-fifths-fullhd {
		flex: none;
		width: 40%;
	}

	.omni .column.is-three-fifths-fullhd {
		flex: none;
		width: 60%;
	}

	.omni .column.is-four-fifths-fullhd {
		flex: none;
		width: 80%;
	}

	.omni .column.is-offset-three-quarters-fullhd {
		margin-left: 75%;
	}

	.omni .column.is-offset-two-thirds-fullhd {
		margin-left: 66.6666%;
	}

	.omni .column.is-offset-half-fullhd {
		margin-left: 50%;
	}

	.omni .column.is-offset-one-third-fullhd {
		margin-left: 33.3333%;
	}

	.omni .column.is-offset-one-quarter-fullhd {
		margin-left: 25%;
	}

	.omni .column.is-offset-one-fifth-fullhd {
		margin-left: 20%;
	}

	.omni .column.is-offset-two-fifths-fullhd {
		margin-left: 40%;
	}

	.omni .column.is-offset-three-fifths-fullhd {
		margin-left: 60%;
	}

	.omni .column.is-offset-four-fifths-fullhd {
		margin-left: 80%;
	}

	.omni .column.is-0-fullhd {
		flex: none;
		width: 0%;
	}

	.omni .column.is-offset-0-fullhd {
		margin-left: 0%;
	}

	.omni .column.is-1-fullhd {
		flex: none;
		width: 8.33333%;
	}

	.omni .column.is-offset-1-fullhd {
		margin-left: 8.33333%;
	}

	.omni .column.is-2-fullhd {
		flex: none;
		width: 16.66667%;
	}

	.omni .column.is-offset-2-fullhd {
		margin-left: 16.66667%;
	}

	.omni .column.is-3-fullhd {
		flex: none;
		width: 25%;
	}

	.omni .column.is-offset-3-fullhd {
		margin-left: 25%;
	}

	.omni .column.is-4-fullhd {
		flex: none;
		width: 33.33333%;
	}

	.omni .column.is-offset-4-fullhd {
		margin-left: 33.33333%;
	}

	.omni .column.is-5-fullhd {
		flex: none;
		width: 41.66667%;
	}

	.omni .column.is-offset-5-fullhd {
		margin-left: 41.66667%;
	}

	.omni .column.is-6-fullhd {
		flex: none;
		width: 50%;
	}

	.omni .column.is-offset-6-fullhd {
		margin-left: 50%;
	}

	.omni .column.is-7-fullhd {
		flex: none;
		width: 58.33333%;
	}

	.omni .column.is-offset-7-fullhd {
		margin-left: 58.33333%;
	}

	.omni .column.is-8-fullhd {
		flex: none;
		width: 66.66667%;
	}

	.omni .column.is-offset-8-fullhd {
		margin-left: 66.66667%;
	}

	.omni .column.is-9-fullhd {
		flex: none;
		width: 75%;
	}

	.omni .column.is-offset-9-fullhd {
		margin-left: 75%;
	}

	.omni .column.is-10-fullhd {
		flex: none;
		width: 83.33333%;
	}

	.omni .column.is-offset-10-fullhd {
		margin-left: 83.33333%;
	}

	.omni .column.is-11-fullhd {
		flex: none;
		width: 91.66667%;
	}

	.omni .column.is-offset-11-fullhd {
		margin-left: 91.66667%;
	}

	.omni .column.is-12-fullhd {
		flex: none;
		width: 100%;
	}

	.omni .column.is-offset-12-fullhd {
		margin-left: 100%;
	}
}

.omni .columns {
	margin-left: -0.75rem;
	margin-right: -0.75rem;
	margin-top: -0.75rem;
}

.omni .columns:last-child {
	margin-bottom: -0.75rem;
}

.omni .columns:not(:last-child) {
	margin-bottom: calc(1.5rem - 0.75rem);
}

.omni .columns.is-centered {
	justify-content: center;
}

.omni .columns.is-gapless {
	margin-left: 0;
	margin-right: 0;
	margin-top: 0;
}

.omni .columns.is-gapless > .column {
	margin: 0;
	padding: 0 !important;
}

.omni .columns.is-gapless:not(:last-child) {
	margin-bottom: 1.5rem;
}

.omni .columns.is-gapless:last-child {
	margin-bottom: 0;
}

.omni .columns.is-mobile {
	display: flex;
}

.omni .columns.is-multiline {
	flex-wrap: wrap;
}

.omni .columns.is-vcentered {
	align-items: center;
}
@media screen and (min-width: 769px), print {
	.omni .columns:not(.is-desktop) {
		display: flex;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-desktop {
		display: flex;
	}
}

.omni .columns.is-variable {
	--columnGap: 0.75rem;
	margin-left: calc(-1 * var(--columnGap));
	margin-right: calc(-1 * var(--columnGap));
}

.omni .columns.is-variable .column {
	padding-left: var(--columnGap);
	padding-right: var(--columnGap);
}

.omni .columns.is-variable.is-0 {
	--columnGap: 0rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-0-mobile {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-0-tablet {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-0-tablet-only {
		--columnGap: 0rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-0-touch {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-0-desktop {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-0-desktop-only {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-0-widescreen {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-0-widescreen-only {
		--columnGap: 0rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-0-fullhd {
		--columnGap: 0rem;
	}
}

.omni .columns.is-variable.is-1 {
	--columnGap: 0.25rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-1-mobile {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-1-tablet {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-1-tablet-only {
		--columnGap: 0.25rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-1-touch {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-1-desktop {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-1-desktop-only {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-1-widescreen {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-1-widescreen-only {
		--columnGap: 0.25rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-1-fullhd {
		--columnGap: 0.25rem;
	}
}

.omni .columns.is-variable.is-2 {
	--columnGap: 0.5rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-2-mobile {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-2-tablet {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-2-tablet-only {
		--columnGap: 0.5rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-2-touch {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-2-desktop {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-2-desktop-only {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-2-widescreen {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-2-widescreen-only {
		--columnGap: 0.5rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-2-fullhd {
		--columnGap: 0.5rem;
	}
}

.omni .columns.is-variable.is-3 {
	--columnGap: 0.75rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-3-mobile {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-3-tablet {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-3-tablet-only {
		--columnGap: 0.75rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-3-touch {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-3-desktop {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-3-desktop-only {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-3-widescreen {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-3-widescreen-only {
		--columnGap: 0.75rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-3-fullhd {
		--columnGap: 0.75rem;
	}
}

.omni .columns.is-variable.is-4 {
	--columnGap: 1rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-4-mobile {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-4-tablet {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-4-tablet-only {
		--columnGap: 1rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-4-touch {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-4-desktop {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-4-desktop-only {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-4-widescreen {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-4-widescreen-only {
		--columnGap: 1rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-4-fullhd {
		--columnGap: 1rem;
	}
}

.omni .columns.is-variable.is-5 {
	--columnGap: 1.25rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-5-mobile {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-5-tablet {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-5-tablet-only {
		--columnGap: 1.25rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-5-touch {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-5-desktop {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-5-desktop-only {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-5-widescreen {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-5-widescreen-only {
		--columnGap: 1.25rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-5-fullhd {
		--columnGap: 1.25rem;
	}
}

.omni .columns.is-variable.is-6 {
	--columnGap: 1.5rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-6-mobile {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-6-tablet {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-6-tablet-only {
		--columnGap: 1.5rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-6-touch {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-6-desktop {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-6-desktop-only {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-6-widescreen {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-6-widescreen-only {
		--columnGap: 1.5rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-6-fullhd {
		--columnGap: 1.5rem;
	}
}

.omni .columns.is-variable.is-7 {
	--columnGap: 1.75rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-7-mobile {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-7-tablet {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-7-tablet-only {
		--columnGap: 1.75rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-7-touch {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-7-desktop {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-7-desktop-only {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-7-widescreen {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-7-widescreen-only {
		--columnGap: 1.75rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-7-fullhd {
		--columnGap: 1.75rem;
	}
}

.omni .columns.is-variable.is-8 {
	--columnGap: 2rem;
}
@media screen and (max-width: 768px) {
	.omni .columns.is-variable.is-8-mobile {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .columns.is-variable.is-8-tablet {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .columns.is-variable.is-8-tablet-only {
		--columnGap: 2rem;
	}
}
@media screen and (max-width: 1023px) {
	.omni .columns.is-variable.is-8-touch {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 1024px) {
	.omni .columns.is-variable.is-8-desktop {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .columns.is-variable.is-8-desktop-only {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 1216px) {
	.omni .columns.is-variable.is-8-widescreen {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .columns.is-variable.is-8-widescreen-only {
		--columnGap: 2rem;
	}
}
@media screen and (min-width: 1408px) {
	.omni .columns.is-variable.is-8-fullhd {
		--columnGap: 2rem;
	}
}

.omni .tile {
	align-items: stretch;
	display: block;
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 1;
	min-height: min-content;
}

.omni .tile.is-ancestor {
	margin-left: -0.75rem;
	margin-right: -0.75rem;
	margin-top: -0.75rem;
}

.omni .tile.is-ancestor:last-child {
	margin-bottom: -0.75rem;
}

.omni .tile.is-ancestor:not(:last-child) {
	margin-bottom: 0.75rem;
}

.omni .tile.is-child {
	margin: 0 !important;
}

.omni .tile.is-parent {
	padding: 0.75rem;
}

.omni .tile.is-vertical {
	flex-direction: column;
}

.omni .tile.is-vertical > .tile.is-child:not(:last-child) {
	margin-bottom: 1.5rem !important;
}
@media screen and (min-width: 769px), print {
	.omni .tile:not(.is-child) {
		display: flex;
	}

	.omni .tile.is-1 {
		flex: none;
		width: 8.33333%;
	}

	.omni .tile.is-2 {
		flex: none;
		width: 16.66667%;
	}

	.omni .tile.is-3 {
		flex: none;
		width: 25%;
	}

	.omni .tile.is-4 {
		flex: none;
		width: 33.33333%;
	}

	.omni .tile.is-5 {
		flex: none;
		width: 41.66667%;
	}

	.omni .tile.is-6 {
		flex: none;
		width: 50%;
	}

	.omni .tile.is-7 {
		flex: none;
		width: 58.33333%;
	}

	.omni .tile.is-8 {
		flex: none;
		width: 66.66667%;
	}

	.omni .tile.is-9 {
		flex: none;
		width: 75%;
	}

	.omni .tile.is-10 {
		flex: none;
		width: 83.33333%;
	}

	.omni .tile.is-11 {
		flex: none;
		width: 91.66667%;
	}

	.omni .tile.is-12 {
		flex: none;
		width: 100%;
	}
}

.omni .has-text-white {
	color: var(--color-white) !important;
}

.omni a.has-text-white:hover, .omni a.has-text-white:focus {
	color: #e6e6e6 !important;
}

.omni .has-background-white {
	background-color: var(--color-white) !important;
}

.omni .has-text-black {
	color: var(--color-gray-0a) !important;
}

.omni a.has-text-black:hover, .omni a.has-text-black:focus {
	color: black !important;
}

.omni .has-background-black {
	background-color: var(--color-gray-0a) !important;
}

.omni .has-text-light {
	color: var(--color-whitesmoke) !important;
}

.omni a.has-text-light:hover, .omni a.has-text-light:focus {
	color: var(--color-gray-db) !important;
}

.omni .has-background-light {
	background-color: var(--color-whitesmoke) !important;
}

.omni .has-text-dark {
	color: var(--color-gray-36) !important;
}

.omni a.has-text-dark:hover, .omni a.has-text-dark:focus {
	color: #1c1c1c !important;
}

.omni .has-background-dark {
	background-color: var(--color-gray-36) !important;
}

.omni .has-text-primary {
	color: var(--color-electric-blue) !important;
}

.omni a.has-text-primary:hover, .omni a.has-text-primary:focus {
	color: #007a9f !important;
}

.omni .has-background-primary {
	background-color: var(--color-electric-blue) !important;
}

.omni .has-text-primary-light {
	color: var(--color-blue-ultralight) !important;
}

.omni a.has-text-primary-light:hover, .omni a.has-text-primary-light:focus {
	color: #b8eeff !important;
}

.omni .has-background-primary-light {
	background-color: var(--color-blue-ultralight) !important;
}

.omni .has-text-primary-dark {
	color: var(--color-blue-disappointment) !important;
}

.omni a.has-text-primary-dark:hover, .omni a.has-text-primary-dark:focus {
	color: #00bcf5 !important;
}

.omni .has-background-primary-dark {
	background-color: var(--color-blue-disappointment) !important;
}

.omni .has-text-link {
	color: var(--color-electric-blue) !important;
}

.omni a.has-text-link:hover, .omni a.has-text-link:focus {
	color: #007a9f !important;
}

.omni .has-background-link {
	background-color: var(--color-electric-blue) !important;
}

.omni .has-text-link-light {
	color: var(--color-blue-ultralight) !important;
}

.omni a.has-text-link-light:hover, .omni a.has-text-link-light:focus {
	color: #b8eeff !important;
}

.omni .has-background-link-light {
	background-color: var(--color-blue-ultralight) !important;
}

.omni .has-text-link-dark {
	color: var(--color-blue-disappointment) !important;
}

.omni a.has-text-link-dark:hover, .omni a.has-text-link-dark:focus {
	color: #00bcf5 !important;
}

.omni .has-background-link-dark {
	background-color: var(--color-blue-disappointment) !important;
}

.omni .has-text-info {
	color: var(--color-electric-blue) !important;
}

.omni a.has-text-info:hover, .omni a.has-text-info:focus {
	color: #007a9f !important;
}

.omni .has-background-info {
	background-color: var(--color-electric-blue) !important;
}

.omni .has-text-info-light {
	color: var(--color-blue-ultralight) !important;
}

.omni a.has-text-info-light:hover, .omni a.has-text-info-light:focus {
	color: #b8eeff !important;
}

.omni .has-background-info-light {
	background-color: var(--color-blue-ultralight) !important;
}

.omni .has-text-info-dark {
	color: var(--color-blue-disappointment) !important;
}

.omni a.has-text-info-dark:hover, .omni a.has-text-info-dark:focus {
	color: #00bcf5 !important;
}

.omni .has-background-info-dark {
	background-color: var(--color-blue-disappointment) !important;
}

.omni .has-text-success {
	color: var(--color-mint) !important;
}

.omni a.has-text-success:hover, .omni a.has-text-success:focus {
	color: #239a88 !important;
}

.omni .has-background-success {
	background-color: var(--color-mint) !important;
}

.omni .has-text-success-light {
	color: #eefbf9 !important;
}

.omni a.has-text-success-light:hover, .omni a.has-text-success-light:focus {
	color: #c5f2eb !important;
}

.omni .has-background-success-light {
	background-color: #eefbf9 !important;
}

.omni .has-text-success-dark {
	color: #1e8576 !important;
}

.omni a.has-text-success-dark:hover, .omni a.has-text-success-dark:focus {
	color: #27af9a !important;
}

.omni .has-background-success-dark {
	background-color: #1e8576 !important;
}

.omni .has-text-warning {
	color: var(--color-honeycomb) !important;
}

.omni a.has-text-warning:hover, .omni a.has-text-warning:focus {
	color: #fec84f !important;
}

.omni .has-background-warning {
	background-color: var(--color-honeycomb) !important;
}

.omni .has-text-warning-light {
	color: #fff9eb !important;
}

.omni a.has-text-warning-light:hover, .omni a.has-text-warning-light:focus {
	color: #fee9b8 !important;
}

.omni .has-background-warning-light {
	background-color: #fff9eb !important;
}

.omni .has-text-warning-dark {
	color: #936601 !important;
}

.omni a.has-text-warning-dark:hover, .omni a.has-text-warning-dark:focus {
	color: #c58902 !important;
}

.omni .has-background-warning-dark {
	background-color: #936601 !important;
}

.omni .has-text-danger {
	color: var(--color-error) !important;
}

.omni a.has-text-danger:hover, .omni a.has-text-danger:focus {
	color: #d72b56 !important;
}

.omni .has-background-danger {
	background-color: var(--color-error) !important;
}

.omni .has-text-danger-light {
	color: #fceef1 !important;
}

.omni a.has-text-danger-light:hover, .omni a.has-text-danger-light:focus {
	color: #f4c3cf !important;
}

.omni .has-background-danger-light {
	background-color: #fceef1 !important;
}

.omni .has-text-danger-dark {
	color: #b42246 !important;
}

.omni a.has-text-danger-dark:hover, .omni a.has-text-danger-dark:focus {
	color: #d8315b !important;
}

.omni .has-background-danger-dark {
	background-color: #b42246 !important;
}

.omni .has-text-black-bis {
	color: #121212 !important;
}

.omni .has-background-black-bis {
	background-color: #121212 !important;
}

.omni .has-text-black-ter {
	color: #242424 !important;
}

.omni .has-background-black-ter {
	background-color: #242424 !important;
}

.omni .has-text-grey-darker {
	color: var(--color-gray-36) !important;
}

.omni .has-background-grey-darker {
	background-color: var(--color-gray-36) !important;
}

.omni .has-text-grey-dark {
	color: var(--color-gray-4a) !important;
}

.omni .has-background-grey-dark {
	background-color: var(--color-gray-4a) !important;
}

.omni .has-text-grey {
	color: var(--color-gray-7a) !important;
}

.omni .has-background-grey {
	background-color: var(--color-gray-7a) !important;
}

.omni .has-text-grey-light {
	color: var(--color-gray-b5) !important;
}

.omni .has-background-grey-light {
	background-color: var(--color-gray-b5) !important;
}

.omni .has-text-grey-lighter {
	color: var(--color-gray-db) !important;
}

.omni .has-background-grey-lighter {
	background-color: var(--color-gray-db) !important;
}

.omni .has-text-white-ter {
	color: var(--color-whitesmoke) !important;
}

.omni .has-background-white-ter {
	background-color: var(--color-whitesmoke) !important;
}

.omni .has-text-white-bis {
	color: #fafafa !important;
}

.omni .has-background-white-bis {
	background-color: #fafafa !important;
}

.omni .is-flex-direction-row {
	flex-direction: row !important;
}

.omni .is-flex-direction-row-reverse {
	flex-direction: row-reverse !important;
}

.omni .is-flex-direction-column {
	flex-direction: column !important;
}

.omni .is-flex-direction-column-reverse {
	flex-direction: column-reverse !important;
}

.omni .is-flex-wrap-nowrap {
	flex-wrap: nowrap !important;
}

.omni .is-flex-wrap-wrap {
	flex-wrap: wrap !important;
}

.omni .is-flex-wrap-wrap-reverse {
	flex-wrap: wrap-reverse !important;
}

.omni .is-justify-content-flex-start {
	justify-content: flex-start !important;
}

.omni .is-justify-content-flex-end {
	justify-content: flex-end !important;
}

.omni .is-justify-content-center {
	justify-content: center !important;
}

.omni .is-justify-content-space-between {
	justify-content: space-between !important;
}

.omni .is-justify-content-space-around {
	justify-content: space-around !important;
}

.omni .is-justify-content-space-evenly {
	justify-content: space-evenly !important;
}

.omni .is-justify-content-start {
	justify-content: start !important;
}

.omni .is-justify-content-end {
	justify-content: end !important;
}

.omni .is-justify-content-left {
	justify-content: left !important;
}

.omni .is-justify-content-right {
	justify-content: right !important;
}

.omni .is-align-content-flex-start {
	align-content: flex-start !important;
}

.omni .is-align-content-flex-end {
	align-content: flex-end !important;
}

.omni .is-align-content-center {
	align-content: center !important;
}

.omni .is-align-content-space-between {
	align-content: space-between !important;
}

.omni .is-align-content-space-around {
	align-content: space-around !important;
}

.omni .is-align-content-space-evenly {
	align-content: space-evenly !important;
}

.omni .is-align-content-stretch {
	align-content: stretch !important;
}

.omni .is-align-content-start {
	align-content: start !important;
}

.omni .is-align-content-end {
	align-content: end !important;
}

.omni .is-align-content-baseline {
	align-content: baseline !important;
}

.omni .is-align-items-stretch {
	align-items: stretch !important;
}

.omni .is-align-items-flex-start {
	align-items: flex-start !important;
}

.omni .is-align-items-flex-end {
	align-items: flex-end !important;
}

.omni .is-align-items-center {
	align-items: center !important;
}

.omni .is-align-items-baseline {
	align-items: baseline !important;
}

.omni .is-align-items-start {
	align-items: start !important;
}

.omni .is-align-items-end {
	align-items: end !important;
}

.omni .is-align-items-self-start {
	align-items: self-start !important;
}

.omni .is-align-items-self-end {
	align-items: self-end !important;
}

.omni .is-align-self-auto {
	align-self: auto !important;
}

.omni .is-align-self-flex-start {
	align-self: flex-start !important;
}

.omni .is-align-self-flex-end {
	align-self: flex-end !important;
}

.omni .is-align-self-center {
	align-self: center !important;
}

.omni .is-align-self-baseline {
	align-self: baseline !important;
}

.omni .is-align-self-stretch {
	align-self: stretch !important;
}

.omni .is-flex-grow-0 {
	flex-grow: 0 !important;
}

.omni .is-flex-grow-1 {
	flex-grow: 1 !important;
}

.omni .is-flex-grow-2 {
	flex-grow: 2 !important;
}

.omni .is-flex-grow-3 {
	flex-grow: 3 !important;
}

.omni .is-flex-grow-4 {
	flex-grow: 4 !important;
}

.omni .is-flex-grow-5 {
	flex-grow: 5 !important;
}

.omni .is-flex-shrink-0 {
	flex-shrink: 0 !important;
}

.omni .is-flex-shrink-1 {
	flex-shrink: 1 !important;
}

.omni .is-flex-shrink-2 {
	flex-shrink: 2 !important;
}

.omni .is-flex-shrink-3 {
	flex-shrink: 3 !important;
}

.omni .is-flex-shrink-4 {
	flex-shrink: 4 !important;
}

.omni .is-flex-shrink-5 {
	flex-shrink: 5 !important;
}

.omni .is-clearfix::after {
	clear: both;
	content: " ";
	display: table;
}

.omni .is-pulled-left {
	float: left !important;
}

.omni .is-pulled-right {
	float: right !important;
}

.omni .is-radiusless {
	border-radius: 0 !important;
}

.omni .is-shadowless {
	box-shadow: none !important;
}

.omni .is-clickable {
	cursor: pointer !important;
}

.omni .is-clipped {
	overflow: hidden !important;
}

.omni .is-relative {
	position: relative !important;
}

.omni .is-marginless {
	margin: 0 !important;
}

.omni .is-paddingless {
	padding: 0 !important;
}

.omni .m-0 {
	margin: 0 !important;
}

.omni .mt-0 {
	margin-top: 0 !important;
}

.omni .mr-0 {
	margin-right: 0 !important;
}

.omni .mb-0 {
	margin-bottom: 0 !important;
}

.omni .ml-0 {
	margin-left: 0 !important;
}

.omni .mx-0 {
	margin-left: 0 !important;
	margin-right: 0 !important;
}

.omni .my-0 {
	margin-top: 0 !important;
	margin-bottom: 0 !important;
}

.omni .m-1 {
	margin: 0.25rem !important;
}

.omni .mt-1 {
	margin-top: 0.25rem !important;
}

.omni .mr-1 {
	margin-right: 0.25rem !important;
}

.omni .mb-1 {
	margin-bottom: 0.25rem !important;
}

.omni .ml-1 {
	margin-left: 0.25rem !important;
}

.omni .mx-1 {
	margin-left: 0.25rem !important;
	margin-right: 0.25rem !important;
}

.omni .my-1 {
	margin-top: 0.25rem !important;
	margin-bottom: 0.25rem !important;
}

.omni .m-2 {
	margin: 0.5rem !important;
}

.omni .mt-2 {
	margin-top: 0.5rem !important;
}

.omni .mr-2 {
	margin-right: 0.5rem !important;
}

.omni .mb-2 {
	margin-bottom: 0.5rem !important;
}

.omni .ml-2 {
	margin-left: 0.5rem !important;
}

.omni .mx-2 {
	margin-left: 0.5rem !important;
	margin-right: 0.5rem !important;
}

.omni .my-2 {
	margin-top: 0.5rem !important;
	margin-bottom: 0.5rem !important;
}

.omni .m-3 {
	margin: 0.75rem !important;
}

.omni .mt-3 {
	margin-top: 0.75rem !important;
}

.omni .mr-3 {
	margin-right: 0.75rem !important;
}

.omni .mb-3 {
	margin-bottom: 0.75rem !important;
}

.omni .ml-3 {
	margin-left: 0.75rem !important;
}

.omni .mx-3 {
	margin-left: 0.75rem !important;
	margin-right: 0.75rem !important;
}

.omni .my-3 {
	margin-top: 0.75rem !important;
	margin-bottom: 0.75rem !important;
}

.omni .m-4 {
	margin: 1rem !important;
}

.omni .mt-4 {
	margin-top: 1rem !important;
}

.omni .mr-4 {
	margin-right: 1rem !important;
}

.omni .mb-4 {
	margin-bottom: 1rem !important;
}

.omni .ml-4 {
	margin-left: 1rem !important;
}

.omni .mx-4 {
	margin-left: 1rem !important;
	margin-right: 1rem !important;
}

.omni .my-4 {
	margin-top: 1rem !important;
	margin-bottom: 1rem !important;
}

.omni .m-5 {
	margin: 1.5rem !important;
}

.omni .mt-5 {
	margin-top: 1.5rem !important;
}

.omni .mr-5 {
	margin-right: 1.5rem !important;
}

.omni .mb-5 {
	margin-bottom: 1.5rem !important;
}

.omni .ml-5 {
	margin-left: 1.5rem !important;
}

.omni .mx-5 {
	margin-left: 1.5rem !important;
	margin-right: 1.5rem !important;
}

.omni .my-5 {
	margin-top: 1.5rem !important;
	margin-bottom: 1.5rem !important;
}

.omni .m-6 {
	margin: 3rem !important;
}

.omni .mt-6 {
	margin-top: 3rem !important;
}

.omni .mr-6 {
	margin-right: 3rem !important;
}

.omni .mb-6 {
	margin-bottom: 3rem !important;
}

.omni .ml-6 {
	margin-left: 3rem !important;
}

.omni .mx-6 {
	margin-left: 3rem !important;
	margin-right: 3rem !important;
}

.omni .my-6 {
	margin-top: 3rem !important;
	margin-bottom: 3rem !important;
}

.omni .p-0 {
	padding: 0 !important;
}

.omni .pt-0 {
	padding-top: 0 !important;
}

.omni .pr-0 {
	padding-right: 0 !important;
}

.omni .pb-0 {
	padding-bottom: 0 !important;
}

.omni .pl-0 {
	padding-left: 0 !important;
}

.omni .px-0 {
	padding-left: 0 !important;
	padding-right: 0 !important;
}

.omni .py-0 {
	padding-top: 0 !important;
	padding-bottom: 0 !important;
}

.omni .p-1 {
	padding: 0.25rem !important;
}

.omni .pt-1 {
	padding-top: 0.25rem !important;
}

.omni .pr-1 {
	padding-right: 0.25rem !important;
}

.omni .pb-1 {
	padding-bottom: 0.25rem !important;
}

.omni .pl-1 {
	padding-left: 0.25rem !important;
}

.omni .px-1 {
	padding-left: 0.25rem !important;
	padding-right: 0.25rem !important;
}

.omni .py-1 {
	padding-top: 0.25rem !important;
	padding-bottom: 0.25rem !important;
}

.omni .p-2 {
	padding: 0.5rem !important;
}

.omni .pt-2 {
	padding-top: 0.5rem !important;
}

.omni .pr-2 {
	padding-right: 0.5rem !important;
}

.omni .pb-2 {
	padding-bottom: 0.5rem !important;
}

.omni .pl-2 {
	padding-left: 0.5rem !important;
}

.omni .px-2 {
	padding-left: 0.5rem !important;
	padding-right: 0.5rem !important;
}

.omni .py-2 {
	padding-top: 0.5rem !important;
	padding-bottom: 0.5rem !important;
}

.omni .p-3 {
	padding: 0.75rem !important;
}

.omni .pt-3 {
	padding-top: 0.75rem !important;
}

.omni .pr-3 {
	padding-right: 0.75rem !important;
}

.omni .pb-3 {
	padding-bottom: 0.75rem !important;
}

.omni .pl-3 {
	padding-left: 0.75rem !important;
}

.omni .px-3 {
	padding-left: 0.75rem !important;
	padding-right: 0.75rem !important;
}

.omni .py-3 {
	padding-top: 0.75rem !important;
	padding-bottom: 0.75rem !important;
}

.omni .p-4 {
	padding: 1rem !important;
}

.omni .pt-4 {
	padding-top: 1rem !important;
}

.omni .pr-4 {
	padding-right: 1rem !important;
}

.omni .pb-4 {
	padding-bottom: 1rem !important;
}

.omni .pl-4 {
	padding-left: 1rem !important;
}

.omni .px-4 {
	padding-left: 1rem !important;
	padding-right: 1rem !important;
}

.omni .py-4 {
	padding-top: 1rem !important;
	padding-bottom: 1rem !important;
}

.omni .p-5 {
	padding: 1.5rem !important;
}

.omni .pt-5 {
	padding-top: 1.5rem !important;
}

.omni .pr-5 {
	padding-right: 1.5rem !important;
}

.omni .pb-5 {
	padding-bottom: 1.5rem !important;
}

.omni .pl-5 {
	padding-left: 1.5rem !important;
}

.omni .px-5 {
	padding-left: 1.5rem !important;
	padding-right: 1.5rem !important;
}

.omni .py-5 {
	padding-top: 1.5rem !important;
	padding-bottom: 1.5rem !important;
}

.omni .p-6 {
	padding: 3rem !important;
}

.omni .pt-6 {
	padding-top: 3rem !important;
}

.omni .pr-6 {
	padding-right: 3rem !important;
}

.omni .pb-6 {
	padding-bottom: 3rem !important;
}

.omni .pl-6 {
	padding-left: 3rem !important;
}

.omni .px-6 {
	padding-left: 3rem !important;
	padding-right: 3rem !important;
}

.omni .py-6 {
	padding-top: 3rem !important;
	padding-bottom: 3rem !important;
}

.omni .is-size-1 {
	font-size: var(--size-1) !important;
}

.omni .is-size-2 {
	font-size: var(--size-2) !important;
}

.omni .is-size-3 {
	font-size: var(--size-3) !important;
}

.omni .is-size-4 {
	font-size: var(--size-4) !important;
}

.omni .is-size-5 {
	font-size: var(--size-5) !important;
}

.omni .is-size-6 {
	font-size: var(--size-6) !important;
}

.omni .is-size-7 {
	font-size: var(--size-7) !important;
}
@media screen and (max-width: 768px) {
	.omni .is-size-1-mobile {
		font-size: var(--size-1) !important;
	}

	.omni .is-size-2-mobile {
		font-size: var(--size-2) !important;
	}

	.omni .is-size-3-mobile {
		font-size: var(--size-3) !important;
	}

	.omni .is-size-4-mobile {
		font-size: var(--size-4) !important;
	}

	.omni .is-size-5-mobile {
		font-size: var(--size-5) !important;
	}

	.omni .is-size-6-mobile {
		font-size: var(--size-6) !important;
	}

	.omni .is-size-7-mobile {
		font-size: var(--size-7) !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-size-1-tablet {
		font-size: var(--size-1) !important;
	}

	.omni .is-size-2-tablet {
		font-size: var(--size-2) !important;
	}

	.omni .is-size-3-tablet {
		font-size: var(--size-3) !important;
	}

	.omni .is-size-4-tablet {
		font-size: var(--size-4) !important;
	}

	.omni .is-size-5-tablet {
		font-size: var(--size-5) !important;
	}

	.omni .is-size-6-tablet {
		font-size: var(--size-6) !important;
	}

	.omni .is-size-7-tablet {
		font-size: var(--size-7) !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-size-1-touch {
		font-size: var(--size-1) !important;
	}

	.omni .is-size-2-touch {
		font-size: var(--size-2) !important;
	}

	.omni .is-size-3-touch {
		font-size: var(--size-3) !important;
	}

	.omni .is-size-4-touch {
		font-size: var(--size-4) !important;
	}

	.omni .is-size-5-touch {
		font-size: var(--size-5) !important;
	}

	.omni .is-size-6-touch {
		font-size: var(--size-6) !important;
	}

	.omni .is-size-7-touch {
		font-size: var(--size-7) !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-size-1-desktop {
		font-size: var(--size-1) !important;
	}

	.omni .is-size-2-desktop {
		font-size: var(--size-2) !important;
	}

	.omni .is-size-3-desktop {
		font-size: var(--size-3) !important;
	}

	.omni .is-size-4-desktop {
		font-size: var(--size-4) !important;
	}

	.omni .is-size-5-desktop {
		font-size: var(--size-5) !important;
	}

	.omni .is-size-6-desktop {
		font-size: var(--size-6) !important;
	}

	.omni .is-size-7-desktop {
		font-size: var(--size-7) !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-size-1-widescreen {
		font-size: var(--size-1) !important;
	}

	.omni .is-size-2-widescreen {
		font-size: var(--size-2) !important;
	}

	.omni .is-size-3-widescreen {
		font-size: var(--size-3) !important;
	}

	.omni .is-size-4-widescreen {
		font-size: var(--size-4) !important;
	}

	.omni .is-size-5-widescreen {
		font-size: var(--size-5) !important;
	}

	.omni .is-size-6-widescreen {
		font-size: var(--size-6) !important;
	}

	.omni .is-size-7-widescreen {
		font-size: var(--size-7) !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-size-1-fullhd {
		font-size: var(--size-1) !important;
	}

	.omni .is-size-2-fullhd {
		font-size: var(--size-2) !important;
	}

	.omni .is-size-3-fullhd {
		font-size: var(--size-3) !important;
	}

	.omni .is-size-4-fullhd {
		font-size: var(--size-4) !important;
	}

	.omni .is-size-5-fullhd {
		font-size: var(--size-5) !important;
	}

	.omni .is-size-6-fullhd {
		font-size: var(--size-6) !important;
	}

	.omni .is-size-7-fullhd {
		font-size: var(--size-7) !important;
	}
}

.omni .has-text-centered {
	text-align: center !important;
}

.omni .has-text-justified {
	text-align: justify !important;
}

.omni .has-text-left {
	text-align: left !important;
}

.omni .has-text-right {
	text-align: right !important;
}
@media screen and (max-width: 768px) {
	.omni .has-text-centered-mobile {
		text-align: center !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .has-text-centered-tablet {
		text-align: center !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .has-text-centered-tablet-only {
		text-align: center !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .has-text-centered-touch {
		text-align: center !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .has-text-centered-desktop {
		text-align: center !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .has-text-centered-desktop-only {
		text-align: center !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .has-text-centered-widescreen {
		text-align: center !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .has-text-centered-widescreen-only {
		text-align: center !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .has-text-centered-fullhd {
		text-align: center !important;
	}
}
@media screen and (max-width: 768px) {
	.omni .has-text-justified-mobile {
		text-align: justify !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .has-text-justified-tablet {
		text-align: justify !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .has-text-justified-tablet-only {
		text-align: justify !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .has-text-justified-touch {
		text-align: justify !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .has-text-justified-desktop {
		text-align: justify !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .has-text-justified-desktop-only {
		text-align: justify !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .has-text-justified-widescreen {
		text-align: justify !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .has-text-justified-widescreen-only {
		text-align: justify !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .has-text-justified-fullhd {
		text-align: justify !important;
	}
}
@media screen and (max-width: 768px) {
	.omni .has-text-left-mobile {
		text-align: left !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .has-text-left-tablet {
		text-align: left !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .has-text-left-tablet-only {
		text-align: left !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .has-text-left-touch {
		text-align: left !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .has-text-left-desktop {
		text-align: left !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .has-text-left-desktop-only {
		text-align: left !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .has-text-left-widescreen {
		text-align: left !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .has-text-left-widescreen-only {
		text-align: left !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .has-text-left-fullhd {
		text-align: left !important;
	}
}
@media screen and (max-width: 768px) {
	.omni .has-text-right-mobile {
		text-align: right !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .has-text-right-tablet {
		text-align: right !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .has-text-right-tablet-only {
		text-align: right !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .has-text-right-touch {
		text-align: right !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .has-text-right-desktop {
		text-align: right !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .has-text-right-desktop-only {
		text-align: right !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .has-text-right-widescreen {
		text-align: right !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .has-text-right-widescreen-only {
		text-align: right !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .has-text-right-fullhd {
		text-align: right !important;
	}
}

.omni .is-capitalized {
	text-transform: capitalize !important;
}

.omni .is-lowercase {
	text-transform: lowercase !important;
}

.omni .is-uppercase {
	text-transform: uppercase !important;
}

.omni .is-italic {
	font-style: italic !important;
}

.omni .has-text-weight-light {
	font-weight: 300 !important;
}

.omni .has-text-weight-normal {
	font-weight: 400 !important;
}

.omni .has-text-weight-medium {
	font-weight: 500 !important;
}

.omni .has-text-weight-semibold {
	font-weight: 600 !important;
}

.omni .has-text-weight-bold {
	font-weight: 700 !important;
}

.omni .is-family-primary {
	font-family: var(--family-sans-serif) !important;
}

.omni .is-family-secondary {
	font-family: var(--family-sans-serif) !important;
}

.omni .is-family-sans-serif {
	font-family: var(--family-sans-serif) !important;
}

.omni .is-family-monospace {
	font-family: var(--family-monospace) !important;
}

.omni .is-family-code {
	font-family: var(--family-monospace) !important;
}

.omni .is-block {
	display: block !important;
}
@media screen and (max-width: 768px) {
	.omni .is-block-mobile {
		display: block !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-block-tablet {
		display: block !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-block-tablet-only {
		display: block !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-block-touch {
		display: block !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-block-desktop {
		display: block !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-block-desktop-only {
		display: block !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-block-widescreen {
		display: block !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-block-widescreen-only {
		display: block !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-block-fullhd {
		display: block !important;
	}
}

.omni .is-flex {
	display: flex !important;
}
@media screen and (max-width: 768px) {
	.omni .is-flex-mobile {
		display: flex !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-flex-tablet {
		display: flex !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-flex-tablet-only {
		display: flex !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-flex-touch {
		display: flex !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-flex-desktop {
		display: flex !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-flex-desktop-only {
		display: flex !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-flex-widescreen {
		display: flex !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-flex-widescreen-only {
		display: flex !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-flex-fullhd {
		display: flex !important;
	}
}

.omni .is-inline {
	display: inline !important;
}
@media screen and (max-width: 768px) {
	.omni .is-inline-mobile {
		display: inline !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-inline-tablet {
		display: inline !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-inline-tablet-only {
		display: inline !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-inline-touch {
		display: inline !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-inline-desktop {
		display: inline !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-inline-desktop-only {
		display: inline !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-inline-widescreen {
		display: inline !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-inline-widescreen-only {
		display: inline !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-inline-fullhd {
		display: inline !important;
	}
}

.omni .is-inline-block {
	display: inline-block !important;
}
@media screen and (max-width: 768px) {
	.omni .is-inline-block-mobile {
		display: inline-block !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-inline-block-tablet {
		display: inline-block !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-inline-block-tablet-only {
		display: inline-block !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-inline-block-touch {
		display: inline-block !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-inline-block-desktop {
		display: inline-block !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-inline-block-desktop-only {
		display: inline-block !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-inline-block-widescreen {
		display: inline-block !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-inline-block-widescreen-only {
		display: inline-block !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-inline-block-fullhd {
		display: inline-block !important;
	}
}

.omni .is-inline-flex {
	display: inline-flex !important;
}
@media screen and (max-width: 768px) {
	.omni .is-inline-flex-mobile {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-inline-flex-tablet {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-inline-flex-tablet-only {
		display: inline-flex !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-inline-flex-touch {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-inline-flex-desktop {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-inline-flex-desktop-only {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-inline-flex-widescreen {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-inline-flex-widescreen-only {
		display: inline-flex !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-inline-flex-fullhd {
		display: inline-flex !important;
	}
}

.omni .is-hidden {
	display: none !important;
}

.omni .is-sr-only {
	border: none !important;
	clip: rect(0, 0, 0, 0) !important;
	height: 0.01em !important;
	overflow: hidden !important;
	padding: 0 !important;
	position: absolute !important;
	white-space: nowrap !important;
	width: 0.01em !important;
}
@media screen and (max-width: 768px) {
	.omni .is-hidden-mobile {
		display: none !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-hidden-tablet {
		display: none !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-hidden-tablet-only {
		display: none !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-hidden-touch {
		display: none !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-hidden-desktop {
		display: none !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-hidden-desktop-only {
		display: none !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-hidden-widescreen {
		display: none !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-hidden-widescreen-only {
		display: none !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-hidden-fullhd {
		display: none !important;
	}
}

.omni .is-invisible {
	visibility: hidden !important;
}
@media screen and (max-width: 768px) {
	.omni .is-invisible-mobile {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 769px), print {
	.omni .is-invisible-tablet {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 769px) and (max-width: 1023px) {
	.omni .is-invisible-tablet-only {
		visibility: hidden !important;
	}
}
@media screen and (max-width: 1023px) {
	.omni .is-invisible-touch {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 1024px) {
	.omni .is-invisible-desktop {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 1024px) and (max-width: 1215px) {
	.omni .is-invisible-desktop-only {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 1216px) {
	.omni .is-invisible-widescreen {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 1216px) and (max-width: 1407px) {
	.omni .is-invisible-widescreen-only {
		visibility: hidden !important;
	}
}
@media screen and (min-width: 1408px) {
	.omni .is-invisible-fullhd {
		visibility: hidden !important;
	}
}

.omni .hero {
	align-items: stretch;
	display: flex;
	flex-direction: column;
	justify-content: space-between;
}

.omni .hero .navbar {
	background: none;
}

.omni .hero .tabs ul {
	border-bottom: none;
}

.omni .hero.is-white {
	background-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .hero.is-white a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-white strong {
	color: inherit;
}

.omni .hero.is-white .title {
	color: var(--color-gray-0a);
}

.omni .hero.is-white .subtitle {
	color: rgba(10, 10, 10, 0.9);
}

.omni .hero.is-white .subtitle a:not(.button),
.omni .hero.is-white .subtitle strong {
	color: var(--color-gray-0a);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-white .navbar-menu {
		background-color: var(--color-white);
	}
}

.omni .hero.is-white .navbar-item,
.omni .hero.is-white .navbar-link {
	color: rgba(10, 10, 10, 0.7);
}

.omni .hero.is-white a.navbar-item:hover, .omni .hero.is-white a.navbar-item.is-active,
.omni .hero.is-white .navbar-link:hover,
.omni .hero.is-white .navbar-link.is-active {
	background-color: var(--color-gray-f2);
	color: var(--color-gray-0a);
}

.omni .hero.is-white .tabs a {
	color: var(--color-gray-0a);
	opacity: 0.9;
}

.omni .hero.is-white .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-white .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-white .tabs.is-boxed a, .omni .hero.is-white .tabs.is-toggle a {
	color: var(--color-gray-0a);
}

.omni .hero.is-white .tabs.is-boxed a:hover, .omni .hero.is-white .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-white .tabs.is-boxed li.is-active a, .omni .hero.is-white .tabs.is-boxed li.is-active a:hover, .omni .hero.is-white .tabs.is-toggle li.is-active a, .omni .hero.is-white .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-gray-0a);
	border-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .hero.is-white.is-bold {
	background-image: linear-gradient(141deg, #e6e6e6 0%, var(--color-white) 71%, var(--color-white) 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-white.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #e6e6e6 0%, var(--color-white) 71%, var(--color-white) 100%);
	}
}

.omni .hero.is-black {
	background-color: var(--color-gray-0a);
	color: var(--color-white);
}

.omni .hero.is-black a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-black strong {
	color: inherit;
}

.omni .hero.is-black .title {
	color: var(--color-white);
}

.omni .hero.is-black .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-black .subtitle a:not(.button),
.omni .hero.is-black .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-black .navbar-menu {
		background-color: var(--color-gray-0a);
	}
}

.omni .hero.is-black .navbar-item,
.omni .hero.is-black .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-black a.navbar-item:hover, .omni .hero.is-black a.navbar-item.is-active,
.omni .hero.is-black .navbar-link:hover,
.omni .hero.is-black .navbar-link.is-active {
	background-color: black;
	color: var(--color-white);
}

.omni .hero.is-black .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-black .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-black .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-black .tabs.is-boxed a, .omni .hero.is-black .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-black .tabs.is-boxed a:hover, .omni .hero.is-black .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-black .tabs.is-boxed li.is-active a, .omni .hero.is-black .tabs.is-boxed li.is-active a:hover, .omni .hero.is-black .tabs.is-toggle li.is-active a, .omni .hero.is-black .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-gray-0a);
}

.omni .hero.is-black.is-bold {
	background-image: linear-gradient(141deg, black 0%, var(--color-gray-0a) 71%, #181616 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-black.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, black 0%, var(--color-gray-0a) 71%, #181616 100%);
	}
}

.omni .hero.is-light {
	background-color: var(--color-whitesmoke);
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-light a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-light strong {
	color: inherit;
}

.omni .hero.is-light .title {
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-light .subtitle {
	color: rgba(0, 0, 0, 0.9);
}

.omni .hero.is-light .subtitle a:not(.button),
.omni .hero.is-light .subtitle strong {
	color: rgba(0, 0, 0, 0.7);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-light .navbar-menu {
		background-color: var(--color-whitesmoke);
	}
}

.omni .hero.is-light .navbar-item,
.omni .hero.is-light .navbar-link {
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-light a.navbar-item:hover, .omni .hero.is-light a.navbar-item.is-active,
.omni .hero.is-light .navbar-link:hover,
.omni .hero.is-light .navbar-link.is-active {
	background-color: var(--color-gray-e8);
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-light .tabs a {
	color: rgba(0, 0, 0, 0.7);
	opacity: 0.9;
}

.omni .hero.is-light .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-light .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-light .tabs.is-boxed a, .omni .hero.is-light .tabs.is-toggle a {
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-light .tabs.is-boxed a:hover, .omni .hero.is-light .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-light .tabs.is-boxed li.is-active a, .omni .hero.is-light .tabs.is-boxed li.is-active a:hover, .omni .hero.is-light .tabs.is-toggle li.is-active a, .omni .hero.is-light .tabs.is-toggle li.is-active a:hover {
	background-color: rgba(0, 0, 0, 0.7);
	border-color: rgba(0, 0, 0, 0.7);
	color: var(--color-whitesmoke);
}

.omni .hero.is-light.is-bold {
	background-image: linear-gradient(141deg, #dfd8d9 0%, var(--color-whitesmoke) 71%, var(--color-white) 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-light.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #dfd8d9 0%, var(--color-whitesmoke) 71%, var(--color-white) 100%);
	}
}

.omni .hero.is-dark {
	background-color: var(--color-gray-36);
	color: var(--color-white);
}

.omni .hero.is-dark a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-dark strong {
	color: inherit;
}

.omni .hero.is-dark .title {
	color: var(--color-white);
}

.omni .hero.is-dark .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-dark .subtitle a:not(.button),
.omni .hero.is-dark .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-dark .navbar-menu {
		background-color: var(--color-gray-36);
	}
}

.omni .hero.is-dark .navbar-item,
.omni .hero.is-dark .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-dark a.navbar-item:hover, .omni .hero.is-dark a.navbar-item.is-active,
.omni .hero.is-dark .navbar-link:hover,
.omni .hero.is-dark .navbar-link.is-active {
	background-color: #292929;
	color: var(--color-white);
}

.omni .hero.is-dark .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-dark .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-dark .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-dark .tabs.is-boxed a, .omni .hero.is-dark .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-dark .tabs.is-boxed a:hover, .omni .hero.is-dark .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-dark .tabs.is-boxed li.is-active a, .omni .hero.is-dark .tabs.is-boxed li.is-active a:hover, .omni .hero.is-dark .tabs.is-toggle li.is-active a, .omni .hero.is-dark .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-gray-36);
}

.omni .hero.is-dark.is-bold {
	background-image: linear-gradient(141deg, #1f191a 0%, var(--color-gray-36) 71%, #46403f 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-dark.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #1f191a 0%, var(--color-gray-36) 71%, #46403f 100%);
	}
}

.omni .hero.is-primary {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .hero.is-primary a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-primary strong {
	color: inherit;
}

.omni .hero.is-primary .title {
	color: var(--color-white);
}

.omni .hero.is-primary .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-primary .subtitle a:not(.button),
.omni .hero.is-primary .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-primary .navbar-menu {
		background-color: var(--color-electric-blue);
	}
}

.omni .hero.is-primary .navbar-item,
.omni .hero.is-primary .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-primary a.navbar-item:hover, .omni .hero.is-primary a.navbar-item.is-active,
.omni .hero.is-primary .navbar-link:hover,
.omni .hero.is-primary .navbar-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	color: var(--color-white);
}

.omni .hero.is-primary .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-primary .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-primary .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-primary .tabs.is-boxed a, .omni .hero.is-primary .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-primary .tabs.is-boxed a:hover, .omni .hero.is-primary .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-primary .tabs.is-boxed li.is-active a, .omni .hero.is-primary .tabs.is-boxed li.is-active a:hover, .omni .hero.is-primary .tabs.is-toggle li.is-active a, .omni .hero.is-primary .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-electric-blue);
}

.omni .hero.is-primary.is-bold {
	background-image: linear-gradient(141deg, #00949f 0%, var(--color-electric-blue) 71%, #008dec 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-primary.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #00949f 0%, var(--color-electric-blue) 71%, #008dec 100%);
	}
}

.omni .hero.is-link {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .hero.is-link a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-link strong {
	color: inherit;
}

.omni .hero.is-link .title {
	color: var(--color-white);
}

.omni .hero.is-link .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-link .subtitle a:not(.button),
.omni .hero.is-link .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-link .navbar-menu {
		background-color: var(--color-electric-blue);
	}
}

.omni .hero.is-link .navbar-item,
.omni .hero.is-link .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-link a.navbar-item:hover, .omni .hero.is-link a.navbar-item.is-active,
.omni .hero.is-link .navbar-link:hover,
.omni .hero.is-link .navbar-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	color: var(--color-white);
}

.omni .hero.is-link .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-link .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-link .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-link .tabs.is-boxed a, .omni .hero.is-link .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-link .tabs.is-boxed a:hover, .omni .hero.is-link .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-link .tabs.is-boxed li.is-active a, .omni .hero.is-link .tabs.is-boxed li.is-active a:hover, .omni .hero.is-link .tabs.is-toggle li.is-active a, .omni .hero.is-link .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-electric-blue);
}

.omni .hero.is-link.is-bold {
	background-image: linear-gradient(141deg, #00949f 0%, var(--color-electric-blue) 71%, #008dec 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-link.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #00949f 0%, var(--color-electric-blue) 71%, #008dec 100%);
	}
}

.omni .hero.is-info {
	background-color: var(--color-electric-blue);
	color: var(--color-white);
}

.omni .hero.is-info a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-info strong {
	color: inherit;
}

.omni .hero.is-info .title {
	color: var(--color-white);
}

.omni .hero.is-info .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-info .subtitle a:not(.button),
.omni .hero.is-info .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-info .navbar-menu {
		background-color: var(--color-electric-blue);
	}
}

.omni .hero.is-info .navbar-item,
.omni .hero.is-info .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-info a.navbar-item:hover, .omni .hero.is-info a.navbar-item.is-active,
.omni .hero.is-info .navbar-link:hover,
.omni .hero.is-info .navbar-link.is-active {
	background-color: var(--color-electric-blue-darkerer);
	color: var(--color-white);
}

.omni .hero.is-info .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-info .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-info .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-info .tabs.is-boxed a, .omni .hero.is-info .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-info .tabs.is-boxed a:hover, .omni .hero.is-info .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-info .tabs.is-boxed li.is-active a, .omni .hero.is-info .tabs.is-boxed li.is-active a:hover, .omni .hero.is-info .tabs.is-toggle li.is-active a, .omni .hero.is-info .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-electric-blue);
}

.omni .hero.is-info.is-bold {
	background-image: linear-gradient(141deg, #00949f 0%, var(--color-electric-blue) 71%, #008dec 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-info.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #00949f 0%, var(--color-electric-blue) 71%, #008dec 100%);
	}
}

.omni .hero.is-success {
	background-color: var(--color-mint);
	color: var(--color-white);
}

.omni .hero.is-success a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-success strong {
	color: inherit;
}

.omni .hero.is-success .title {
	color: var(--color-white);
}

.omni .hero.is-success .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-success .subtitle a:not(.button),
.omni .hero.is-success .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-success .navbar-menu {
		background-color: var(--color-mint);
	}
}

.omni .hero.is-success .navbar-item,
.omni .hero.is-success .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-success a.navbar-item:hover, .omni .hero.is-success a.navbar-item.is-active,
.omni .hero.is-success .navbar-link:hover,
.omni .hero.is-success .navbar-link.is-active {
	background-color: #27af9b;
	color: var(--color-white);
}

.omni .hero.is-success .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-success .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-success .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-success .tabs.is-boxed a, .omni .hero.is-success .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-success .tabs.is-boxed a:hover, .omni .hero.is-success .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-success .tabs.is-boxed li.is-active a, .omni .hero.is-success .tabs.is-boxed li.is-active a:hover, .omni .hero.is-success .tabs.is-toggle li.is-active a, .omni .hero.is-success .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-mint);
}

.omni .hero.is-success.is-bold {
	background-image: linear-gradient(141deg, #19a478 0%, var(--color-mint) 71%, #31d6d8 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-success.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #19a478 0%, var(--color-mint) 71%, #31d6d8 100%);
	}
}

.omni .hero.is-warning {
	background-color: var(--color-honeycomb);
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-warning a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-warning strong {
	color: inherit;
}

.omni .hero.is-warning .title {
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-warning .subtitle {
	color: rgba(0, 0, 0, 0.9);
}

.omni .hero.is-warning .subtitle a:not(.button),
.omni .hero.is-warning .subtitle strong {
	color: rgba(0, 0, 0, 0.7);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-warning .navbar-menu {
		background-color: var(--color-honeycomb);
	}
}

.omni .hero.is-warning .navbar-item,
.omni .hero.is-warning .navbar-link {
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-warning a.navbar-item:hover, .omni .hero.is-warning a.navbar-item.is-active,
.omni .hero.is-warning .navbar-link:hover,
.omni .hero.is-warning .navbar-link.is-active {
	background-color: #fed069;
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-warning .tabs a {
	color: rgba(0, 0, 0, 0.7);
	opacity: 0.9;
}

.omni .hero.is-warning .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-warning .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-warning .tabs.is-boxed a, .omni .hero.is-warning .tabs.is-toggle a {
	color: rgba(0, 0, 0, 0.7);
}

.omni .hero.is-warning .tabs.is-boxed a:hover, .omni .hero.is-warning .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-warning .tabs.is-boxed li.is-active a, .omni .hero.is-warning .tabs.is-boxed li.is-active a:hover, .omni .hero.is-warning .tabs.is-toggle li.is-active a, .omni .hero.is-warning .tabs.is-toggle li.is-active a:hover {
	background-color: rgba(0, 0, 0, 0.7);
	border-color: rgba(0, 0, 0, 0.7);
	color: var(--color-honeycomb);
}

.omni .hero.is-warning.is-bold {
	background-image: linear-gradient(141deg, #ffab4e 0%, var(--color-honeycomb) 71%, #fff19b 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-warning.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #ffab4e 0%, var(--color-honeycomb) 71%, #fff19b 100%);
	}
}

.omni .hero.is-danger {
	background-color: var(--color-error);
	color: var(--color-white);
}

.omni .hero.is-danger a:not(.button):not(.dropdown-item):not(.tag):not(.pagination-link.is-current),
.omni .hero.is-danger strong {
	color: inherit;
}

.omni .hero.is-danger .title {
	color: var(--color-white);
}

.omni .hero.is-danger .subtitle {
	color: rgba(255, 255, 255, 0.9);
}

.omni .hero.is-danger .subtitle a:not(.button),
.omni .hero.is-danger .subtitle strong {
	color: var(--color-white);
}
@media screen and (max-width: 1023px) {
	.omni .hero.is-danger .navbar-menu {
		background-color: var(--color-error);
	}
}

.omni .hero.is-danger .navbar-item,
.omni .hero.is-danger .navbar-link {
	color: rgba(255, 255, 255, 0.7);
}

.omni .hero.is-danger a.navbar-item:hover, .omni .hero.is-danger a.navbar-item.is-active,
.omni .hero.is-danger .navbar-link:hover,
.omni .hero.is-danger .navbar-link.is-active {
	background-color: #db4167;
	color: var(--color-white);
}

.omni .hero.is-danger .tabs a {
	color: var(--color-white);
	opacity: 0.9;
}

.omni .hero.is-danger .tabs a:hover {
	opacity: 1;
}

.omni .hero.is-danger .tabs li.is-active a {
	opacity: 1;
}

.omni .hero.is-danger .tabs.is-boxed a, .omni .hero.is-danger .tabs.is-toggle a {
	color: var(--color-white);
}

.omni .hero.is-danger .tabs.is-boxed a:hover, .omni .hero.is-danger .tabs.is-toggle a:hover {
	background-color: rgba(10, 10, 10, 0.1);
}

.omni .hero.is-danger .tabs.is-boxed li.is-active a, .omni .hero.is-danger .tabs.is-boxed li.is-active a:hover, .omni .hero.is-danger .tabs.is-toggle li.is-active a, .omni .hero.is-danger .tabs.is-toggle li.is-active a:hover {
	background-color: var(--color-white);
	border-color: var(--color-white);
	color: var(--color-error);
}

.omni .hero.is-danger.is-bold {
	background-image: linear-gradient(141deg, #e31f70 0%, var(--color-error) 71%, #e76772 100%);
}
@media screen and (max-width: 768px) {
	.omni .hero.is-danger.is-bold .navbar-menu {
		background-image: linear-gradient(141deg, #e31f70 0%, var(--color-error) 71%, #e76772 100%);
	}
}

.omni .hero.is-small .hero-body {
	padding: 1.5rem;
}
@media screen and (min-width: 769px), print {
	.omni .hero.is-medium .hero-body {
		padding: 9rem 1.5rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .hero.is-large .hero-body {
		padding: 18rem 1.5rem;
	}
}

.omni .hero.is-halfheight .hero-body, .omni .hero.is-fullheight .hero-body, .omni .hero.is-fullheight-with-navbar .hero-body {
	align-items: center;
	display: flex;
}

.omni .hero.is-halfheight .hero-body > .container, .omni .hero.is-fullheight .hero-body > .container, .omni .hero.is-fullheight-with-navbar .hero-body > .container {
	flex-grow: 1;
	flex-shrink: 1;
}

.omni .hero.is-halfheight {
	min-height: 50vh;
}

.omni .hero.is-fullheight {
	min-height: 100vh;
}

.omni .hero-video {
	overflow: hidden;
}

.omni .hero-video video {
	left: 50%;
	min-height: 100%;
	min-width: 100%;
	position: absolute;
	top: 50%;
	transform: translate3d(-50%, -50%, 0);
}

.omni .hero-video.is-transparent {
	opacity: 0.3;
}
@media screen and (max-width: 768px) {
	.omni .hero-video {
		display: none;
	}
}

.omni .hero-buttons {
	margin-top: 1.5rem;
}
@media screen and (max-width: 768px) {
	.omni .hero-buttons .button {
		display: flex;
	}

	.omni .hero-buttons .button:not(:last-child) {
		margin-bottom: 0.75rem;
	}
}
@media screen and (min-width: 769px), print {
	.omni .hero-buttons {
		display: flex;
		justify-content: center;
	}

	.omni .hero-buttons .button:not(:last-child) {
		margin-right: 1.5rem;
	}
}

.omni .hero-head,
.omni .hero-foot {
	flex-grow: 0;
	flex-shrink: 0;
}

.omni .hero-body {
	flex-grow: 1;
	flex-shrink: 0;
	padding: 3rem 1.5rem;
}

.omni .section {
	padding: 3rem 1.5rem;
}
@media screen and (min-width: 1024px) {
	.omni .section.is-medium {
		padding: 9rem 1.5rem;
	}

	.omni .section.is-large {
		padding: 18rem 1.5rem;
	}
}

.omni .footer {
	background-color: #fafafa;
	padding: 3rem 1.5rem 6rem;
}

html.omni {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

html.omni {
	background-color: var(--body-background-color);
	font-size: var(--body-size);
	-moz-osx-font-smoothing: grayscale;
	-webkit-font-smoothing: antialiased;
	min-width: var(--body-min-width);
	overflow-x: var(--body-overflow-x);
	overflow-y: var(--body-overflow-y);
	text-rendering: var(--body-rendering);
	text-size-adjust: 100%;
}

html.omni.is-clipped {
	overflow: hidden !important;
}

html:not(.omni) .omni {
	box-sizing: border-box;
}

.omni {
	letter-spacing: 0.31px;
/* make toolbar dropmenu pop out of overflow hidden */ }
.omni .title {
	color: var(--color-almost-black);
	line-height: 1.33;
	letter-spacing: 0.4px;
	text-transform: capitalize;
	font-size: var(--size-2);
}

.omni .title.is-1 {
	font-size: var(--size-1);
	letter-spacing: 0.47px;
}

.omni .title.is-2 {
	font-size: var(--size-2);
}

.omni .title.is-3 {
	font-size: var(--size-3);
}

.omni .title.is-4 {
	font-size: var(--size-4);
	letter-spacing: 0.31px;
}

.omni .title.is-5 {
	font-size: var(--size-5);
}

.omni .title.is-6 {
	font-size: var(--size-6);
}

.omni .subtitle {
	color: var(--color-almost-black);
	opacity: 0.5;
	font-size: var(--size-7);
	letter-spacing: 0.24px;
	font-weight: normal;
}

.omni .level:not(:last-child) {
	margin-bottom: 0;
}

.omni .level:not(:last-child) .title {
	margin-bottom: 0;
}

.omni .box {
	box-shadow: 0 10px 60px -5px rgba(1, 33, 78, 0.1);
	margin-bottom: 0;
	padding: 24px;
	border-radius: 10px;
}

.omni :is(button, .button) omni-icon {
	transition: fill .25s ease;
}

.omni .button omni-icon:only-child {
	margin: 0 -.7em;
}

.omni .button .is-sr-only:first-child + omni-icon:last-child {
	margin: 0 -.7em;
}

.omni .button * + * {
	margin-left: .6em;
}

.omni .button.is-small {
	border-radius: var(--radius);
}

.omni .button.is-primary omni-icon {
	fill: var(--color-white);
}

.omni .button.is-primary:disabled omni-icon, .omni .button.is-primary[disabled] omni-icon {
	fill: var(--color-core-medium);
}

.omni .button.is-outlined {
	background-color: transparent !important;
	border-color: var(--color-primary);
	color: var(--color-primary);
	transition: background-image 0.2s ease-in-out;
}

.omni .button.is-outlined omni-icon {
	fill: var(--color-primary);
}

.omni .button.is-outlined.is-success omni-icon {
	fill: var(--color-success);
}

.omni .button.is-outlined.is-warning {
	border-color: var(--color-almost-black);
	color: var(--color-almost-black);
}

.omni .button.is-outlined.is-warning omni-icon {
	fill: var(--color-almost-black) !important;
}

.omni .button.is-outlined.is-danger omni-icon {
	fill: var(--danger);
}

.omni .button.is-outlined:hover, .omni .button.is-outlined.is-hovered, .omni .button.is-outlined:focus, .omni .button.is-outlined.is-focused {
  background-color: none;
  background-image: var(--gradient-primary);
  box-shadow: var(--button-shadow-dark);
	color: var(--color-white);
}

.omni .button.is-outlined:hover omni-icon, .omni .button.is-outlined.is-hovered omni-icon, .omni .button.is-outlined:focus omni-icon, .omni .button.is-outlined.is-focused omni-icon {
	fill: var(--color-white);
}

.omni .button.is-outlined:active, .omni .button.is-outlined.is-active {
	background-image: linear-gradient(135deg, rgb(var(--rgb-primary), 0.75) 0, rgb(var(--rgb-secondary), 0.75) 100%);
	border-color: rgb(var(--rgb-primary), 0.75);
  color: var(--color-core-light);
}

.omni .button.is-outlined:hover.is-warning, .omni .button.is-outlined.is-hovered.is-warning, .omni .button.is-outlined:focus.is-warning, .omni .button.is-outlined.is-focused.is-warning {
	color: var(--color-white);
	border-color: var(--color-almost-black);
	background-image: linear-gradient(160deg, var(--color-blue-ui1) 11%, var(--color-blue-ui2) 85%);
}

.omni .button.is-outlined:hover.is-warning omni-icon, .omni .button.is-outlined.is-hovered.is-warning omni-icon, .omni .button.is-outlined:focus.is-warning omni-icon, .omni .button.is-outlined.is-focused.is-warning omni-icon {
	fill: var(--color-white) !important;
}

.omni .button.is-outlined:active.is-info, .omni .button.is-outlined.is-active.is-info {
	background-image: linear-gradient(160deg, var(--color-info) 11%, var(--color-info) 85%);
}

.omni .button.is-outlined:active.is-success, .omni .button.is-outlined.is-active.is-success {
	background-image: linear-gradient(160deg, var(--color-mint) 11%, #00e3ae 85%);
}

.omni .button.is-outlined:active.is-warning, .omni .button.is-outlined.is-active.is-warning {
	background-image: linear-gradient(160deg, var(--color-blue-ui1) 11%, var(--color-blue-ui2) 85%);
}

.omni .button.is-outlined:active.is-danger, .omni .button.is-outlined.is-active.is-danger {
	background-image: linear-gradient(160deg, var(--color-error) 11%, #f56c8e 85%);
}

.omni .button.is-outlined:disabled,
.omni .button.is-outlined[disabled],
fieldset[disabled] .omni .button.is-outlined {
  background-color: var(--color-transparent);
	border-color: var(--color-core-medium);
	color: var(--color-core-medium);
}

.omni .button.is-outlined:disabled omni-icon, .omni .button.is-outlined[disabled] omni-icon {
	fill: var(--color-almost-black) !important;
}

.omni .button.is-text.is-warning {
	color: var(--color-almost-black);
}

.omni .button.is-text.is-warning omni-icon {
	fill: var(--color-almost-black);
}

.omni .button.is-text.is-success omni-icon {
  fill: var(--color-success);
}

.omni .button.is-text.is-danger omni-icon {
	fill: var(--color-error);
}

.omni input,
.omni .input {
	border-radius: 6px;
	border: solid 1px #edf0f5;
	background-color: #f2f5fa;
}

.omni textarea:focus-visible,
.omni input:focus-visible,
.omni .textarea:focus-visible,
.omni .input:focus-visible {
	background-color: var(--color-white);
}

.omni input:disabled, .omni input[disabled],
.omni .input:disabled, .omni .input[disabled] {
	opacity: 0.5;
}

.omni .field-body > .field {
	width: auto;
}

.omni label > .control {
	margin-top: .5em;
}

.omni .card {
	border-radius: var(--radius);
	box-shadow: 0 1px 10px -3px rgba(1, 33, 78, 0.15), 0 15px 12px -9px rgba(1, 33, 78, 0.18);
	overflow: visible;
}

.omni .card-header {
	box-shadow: none;
}

.omni .modal-card {
	background-color: var(--color-white);
}

.omni .modal-card-head {
	border-top-left-radius: var(--radius);
	border-top-right-radius: var(--radius);
}

.omni .modal-card-head,
.omni .modal-card-foot {
	border-top: 0;
	border-bottom: 0;
	background-color: var(--color-transparent);
}

.omni .delete,
.omni .modal-close {
	background-color: var(--color-primary);
}

.omni .select:not(.is-multiple):not(.is-loading)::after {
	border-color: #4d5161;
}

.select[multiple]::after,
select[multiple]::after{
		display:none !important;
}

.omni omni-toolbar .dropdown {
	position: static !important;
}

.omni omni-toolbar .dropdown .dropdown-menu {
	left: auto;
}

.omni .dropdown-menu.has-nested-menu {
	z-index: initial;
}

.omni .dropdown-menu.has-nested-menu .dropdown-menu {
	z-index: initial;
}

.omni .dropdown-content {
	outline: none;
}

.omni .dropdown-item {
	outline: none;
}

.omni a.dropdown-item:active, .omni a.dropdown-item.is-active,
.omni button.dropdown-item:active,
.omni button.dropdown-item.is-active {
	background-color: var(--color-blue-true80);
	color: var(--color-green-dark);
}

.omni .media-content {
	overflow-y: hidden;
}

.omni .menu {
	display: flex;
	flex-direction: column;
	padding: 40px 0;
	font-weight: 400;
	font-size: 14px;
}

.omni .menu.is-dark .menu-label {
	color: rgba(237, 240, 245, 0.75);
}

.omni .menu.is-dark .menu-list a,
.omni .menu.is-dark .menu-list a:hover,
.omni .menu.is-dark .menu-list summary,
.omni .menu.is-dark .menu-list summary:hover {
	color: rgba(237, 240, 245, 0.7);
}

.omni .menu.is-dark .menu-list a.is-active,
.omni .menu.is-dark .menu-list summary.is-active {
	color: #edf0f5;
}

.omni .menu-label {
	margin: 20px 0 0;
	padding: 0 0 0 36px;
	line-height: 30px;
	letter-spacing: 1px;
	font-size: 11px;
}

.omni .menu-label:not(:last-child) {
	margin-bottom: 4px;
}

.omni .menu-label:not(:first-child) {
	margin-top: 0;
}

.omni .menu-list:not(:last-of-type) {
	margin-bottom: 20px;
}

.omni .menu-list li {
	padding: 3px 0;
}

.omni .menu-list a,
.omni .menu-list summary {
	font-weight: 600;
	padding: 0 0 0 36px;
	margin: 0 20px 0 0;
	min-height: 42px;
	position: relative;
	border-radius: 0 var(--radius) var(--radius) 0;
	display: flex;
	align-items: center;
}

.omni .menu-list a:not(.is-active)::before,
.omni .menu-list summary:not(.is-active)::before {
	border-radius: 0 var(--radius) var(--radius) 0;
	content: "";
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	opacity: 0;
	transition: opacity .25s ease;
	background-color: var(--color-transparent);
	background-image: var(--gradient-electric-blue);
}

.omni .menu-list a:not(.is-active):hover::before,
.omni .menu-list summary:not(.is-active):hover::before {
	opacity: .35;
}

.omni .menu-list a > div:only-child,
.omni .menu-list summary > div:only-child {
	min-height: 42px;
}

.omni .menu-list a.is-active,
.omni .menu-list summary.is-active {
	background-image: var(--gradient-electric-blue);
}

.omni .menu-list a,
.omni .menu-list a:hover,
.omni .menu-list summary,
.omni .menu-list summary:hover {
	background-color: var(--color-transparent);
}

.omni .menu-list li ul {
	border: 0;
	margin: 0;
	padding: 0;
}

.omni .menu-list li ul li a,
.omni .menu-list li ul li summary {
	padding: 0 0 0 94px;
}

.omni .menu-break {
	margin-top: auto !important;
}

.omni .menu.is-dark .menu-list a omni-icon,
.omni .menu.is-dark .menu-list a:hover omni-icon,
.omni .menu.is-dark .menu-list summary omni-icon,
.omni .menu.is-dark .menu-list summary:hover omni-icon {
	fill: rgba(237, 240, 245, 0.7);
}

.omni .menu.is-dark .menu-list a.is-active omni-icon,
.omni .menu.is-dark .menu-list summary.is-active omni-icon {
	fill: #edf0f5;
}

.omni .menu-list summary {
	list-style: none;
	outline: none;
}

.omni .menu-list summary > div {
	display: flex;
	align-items: center;
}

.omni .menu-list summary omni-icon:first-of-type {
	margin: 0 0 0 -16px;
}

.omni .menu-list summary::-webkit-details-marker {
	display: none;
}

.omni .menu-list a.is-active omni-icon,
.omni .menu-list summary.is-active omni-icon {
	fill: var(--color-white);
}

.omni .menu-list a omni-icon,
.omni .menu-list summary omni-icon {
	margin-right: 18px;
}

.omni .modal-background {
	background-color: rgba(20, 32, 51, 0.85);
}

.omni .modal-background.is-info, .omni .modal-background.is-success {
	background-color: rgba(255, 255, 255, 0.85);
}

.omni .modal-content,
.omni .modal-card {
	box-shadow: 0 17px 50px 0 rgba(1, 33, 78, 0.25);
	border-radius: var(--radius);
}

.omni .modal-content {
	border: none;
}

.omni .message {
	background-color: var(--color-white) !important;
}

.omni .message .message-header {
	font-size: var(--size-2);
}

.omni .message .message-body {
	color: inherit !important;
}

.omni .message .message-header {
	padding: 1rem 1rem 1rem 60px;
}

.omni .message .message-body {
	padding: 18px 34px 34px 60px;
}

.omni .message .message-footer {
	padding: 0 24px 24px;
}

.omni .notification {
	padding: 34px 34px 34px 60px;
}

.omni .notification.is-info,
.omni .message.is-info .message-header {
	background-image: var(--gradient-info);
}

.omni .notification.is-success,
.omni .message.is-success .message-header {
	background-image: var(--gradient-success);
}

.omni .notification.is-warning,
.omni .message.is-warning .message-header {
	background-image: var(--gradient-alert);
}

.omni .notification.is-danger,
.omni .message.is-danger .message-header {
	background-image: var(--gradient-error);
}

.omni .notification .delete,
.omni .message .delete {
	background-color: var(--color-transparent);
	min-height: 2.4rem;
	min-width: 2.6rem;
}

.omni .notification .delete:hover, .omni .notification .delete.is-hovered, .omni .notification .delete:focus, .omni .notification .delete.is-focused,
.omni .message .delete:hover,
.omni .message .delete.is-hovered,
.omni .message .delete:focus,
.omni .message .delete.is-focused {
	background-color: rgba(255, 255, 255, 0.4);
	border-radius: var(--radius-small);
}

.omni .notification.is-warning .delete::before,
.omni .notification.is-warning .delete::after,
.omni .message.is-warning .delete::before,
.omni .message.is-warning .delete::after {
	background-color: var(--color-almost-black);
}

.omni .notification omni-icon {
	font-size: 1.8rem !important;
	position: absolute;
	left: 20px;
	fill: var(--color-white);
}

.omni .notification.is-warning omni-icon {
	fill: var(--color-almost-black);
}

.omni .message .message-header omni-icon {
	font-size: 1.8rem !important;
	position: absolute;
	left: 20px;
	fill: var(--color-white);
}

.omni .message.is-warning .message-header omni-icon {
	fill: var(--color-almost-black);
}

.omni .table {
	padding: 0 1.2rem .6rem;
	border-collapse: separate;
	border-spacing: 0 4px;
}

.omni .table:not(:last-child) {
	margin-bottom: 0;
}

.omni .table th, .omni .table td {
	white-space: nowrap;
	vertical-align: middle;
}

.omni .table th {
	font-weight: normal;
	height: 44px;
	text-align: left;
}

.omni .table td {
	height: 60px;
}

.omni .table tbody tr {
	border-radius: var(--table-row-border-radius);
	transition: box-shadow .25s ease;
}

.omni .table tbody tr:last-child td {
	border-bottom-width: var(--table-cell-border-width);
}

.omni .table tbody tr td {
	background-color: var(--color-white);
}

.omni .table tbody tr td:first-child {
	border-right: 0;
	border-top-left-radius: var(--table-row-border-radius);
	border-bottom-left-radius: var(--table-row-border-radius);
}

.omni .table tbody tr td:last-child {
	border-left: 0;
	border-top-right-radius: var(--table-row-border-radius);
	border-bottom-right-radius: var(--table-row-border-radius);
}

.omni .table tbody tr td:not(:first-child):not(:last-child) {
	border-width: var(--table-cell-border-width) 0;
}
@supports (-webkit-hyphens: none) {
	.omni .table tbody tr td {
		transition: box-shadow .25s ease;
	}
}

.omni .table:not(.is-shadowless) tbody {
	transform-style: preserve-3d;
}

.omni .table:not(.is-shadowless) tbody tr:hover, .omni .table:not(.is-shadowless) tbody tr.is-hovered {
	box-shadow: 0 17px 50px -10px rgba(1, 33, 78, 0.19);
	transform: translateZ(1px);
}
@supports (-webkit-hyphens: none) {
	.omni .table:not(.is-shadowless) tbody tr:hover td, .omni .table:not(.is-shadowless) tbody tr.is-hovered td {
		box-shadow: 0 17px 50px -10px rgba(1, 33, 78, 0.19);
	}
}

.omni .has-background-almost-black {
	background-color: var(--color-almost-black);
}

.omni .has-background-electric-blue {
	background-color: var(--color-electric-blue);
}

.omni .has-background-honeycomb {
	background-color: var(--color-honeycomb);
}

.omni .has-background-mint {
	background-color: var(--color-mint);
}

.omni .has-background-melon {
	background-color: var(--color-melon);
}

.omni .has-background-teal {
	background-color: var(--color-teal);
}

.omni .has-background-shark {
	background-color: var(--color-shark);
}

.omni .has-background-pale-grey {
	background-color: var(--color-pale-grey);
}

.omni .has-background-pale-grey-two {
	background-color: var(--color-pale-grey-two);
}

.omni .has-background-deep-blue {
	background-color: var(--color-visualization-deep-blue);
}

.omni .has-background-persian-blue {
	background-color: var(--color-visualization-persian-blue);
}

.omni .has-background-mid-blue {
	background-color: var(--color-visualization-mid-blue);
}

.omni .has-background-royal-blue {
	background-color: var(--color-visualization-royal-blue);
}

.omni .has-background-violet {
	background-color: var(--color-visualization-violet);
}

.omni .has-background-plum {
	background-color: var(--color-visualization-plum);
}

.omni .has-background-rose {
	background-color: var(--color-visualization-rose);
}

.omni .has-background-deep-coral {
	background-color: var(--color-visualization-deep-coral);
}

.omni .has-background-tangerine {
	background-color: var(--color-visualization-tangerine);
}

.omni .has-background-light-orange {
	background-color: var(--color-visualization-light-orange);
}

.omni .has-background-light-blue {
	background-color: var(--color-visualization-light-blue);
}

.omni .has-background-periwinkle {
	background-color: var(--color-visualization-periwinkle);
}

.omni .has-background-lilac {
	background-color: var(--color-visualization-lilac);
}

.omni .has-background-medium-purple {
	background-color: var(--color-visualization-medium-purple);
}

.omni .has-background-bubble-gum {
	background-color: var(--color-visualization-bubble-gum);
}

.omni .has-background-pink {
	background-color: var(--color-visualization-pink);
}

.omni .has-background-sea-buckthorn {
	background-color: var(--color-visualization-sea-buckthorn);
}

.omni .has-background-light-coral {
	background-color: var(--color-visualization-light-coral);
}

.omni .has-background-light-tangerine {
	background-color: var(--color-visualization-light-tangerine);
}

.omni .has-background-sandy-brown {
	background-color: var(--color-visualization-sandy-brown);
}

.omni .has-background-sea-foam {
	background-color: var(--color-visualization-sea-foam);
}

.omni .has-background-pastel-green {
	background-color: var(--color-visualization-pastel-green);
}

.omni .has-background-neutral {
	background-color: var(--color-visualization-neutral);
}

.omni .has-background-gradient-electric-blue {
	background-image: var(--gradient-electric-blue);
}

.omni .has-background-gradient-mint {
	background-image: var(--gradient-mint);
}

.omni .has-background-gradient-melon {
	background-image: var(--gradient-melon);
}

.omni .has-background-gradient-honeycomb {
	background-image: var(--gradient-honeycomb);
}

.omni .has-background-gradient-black {
	background-image: var(--gradient-black);
}

.omni .has-text-primary {
	color: var(--color-primary) !important;
	fill: var(--color-primary) !important;
}

.omni .has-text-electric-blue {
	color: var(--color-electric-blue) !important;
	fill: var(--color-electric-blue) !important;
}

.omni .has-text-shark {
	color: var(--color-shark) !important;
	fill: var(--color-shark) !important;
}

.omni .has-text-almost-black {
	color: var(--color-almost-black) !important;
	fill: var(--color-almost-black) !important;
}

.omni .skeleton {
	position: relative;
}

.omni .skeleton::after {
	content: "";
	display: block;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	z-index: 5;
	border-radius: var(--radius);
	background-color: #eff1f4;
	background-image: linear-gradient(90deg, rgba(255, 255, 255, 0) 0, rgba(255, 255, 255, 0.8) 50%, rgba(255, 255, 255, 0) 100%);
	background-size: 50% 100%;
	background-position: -200% 0;
	background-repeat: no-repeat;
	color: var(--color-pale-grey);
	animation: skeleton-shimmer 1.25s ease infinite;
}

.omni .is-clamped {
	padding: 0;
	overflow: hidden;
	text-overflow: ellipsis;
	display: -webkit-box;
	-webkit-line-clamp: 1;
	-webkit-box-orient: vertical;
}

.omni .is-clamped.clamp-2 {
	-webkit-line-clamp: 2;
}

.omni .is-clamped.clamp-3 {
	-webkit-line-clamp: 3;
}

.omni .is-clamped.clamp-4 {
	-webkit-line-clamp: 4;
}

.omni .button.is-rounded {
	width: 0;
}

.omni .button.is-rounded::before {
	border-radius: 50%;
}

.omni .toolbar-divider {
	flex-shrink: 0;
	width: 1px;
	height: 27px;
	align-self: center;
	background-color: #cecece;
}

.omni {
/* SHARED */
/* FADE */
/* RAISE */
/* COLOR-PRIMARY */
/* BG-PRIMARY, BG-SECONDARY */ }
.omni .button::before,
.omni .transition-raise-target::before,
.omni .transition-bg-primary-target::before,
.omni .transition-bg-secondary-target::before,
.omni .transition-raise-hover::before,
.omni .transition-bg-primary-hover::before,
.omni .transition-bg-secondary-hover::before {
	content: "";
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	opacity: 0;
	transition: opacity .25s ease;
}

.omni .transition-fade-target {
	transition: opacity .25s ease .15s;
}

.omni .transition-fade-target:not(.transition-fade) {
	opacity: 1;
}

.omni .transition-fade-target.transition-fade {
	opacity: 0;
}

.omni .transition-raise-target::before,
.omni .transition-raise-hover::before {
	box-shadow: 0 2px 9px -1px rgba(1, 33, 78, 0.1), 0 24px 31px -6px rgba(1, 33, 78, 0.37);
}

.omni .button:hover::before,
.omni .button.is-hovered::before,
.omni .button:focus::before,
.omni .button.is-focused::before,
.omni .transition-raise::before,
.omni .transition-raise-hover:hover::before {
	opacity: 1;
}

.omni .card.transition-raise-target::before, .omni .card.transition-raise-hover::before {
	border-radius: var(--radius);
}

.omni .button::before {
	border-radius: var(--radius);
	box-shadow: 0 4px 6px 0 rgba(59, 62, 63, 0.1);
	transform: translateZ(-1px);
}

.omni .button.is-primary::before {
	box-shadow: 0 4px 6px 0 rgba(17, 155, 235, 0.25);
}

.omni .button.is-outlined::before {
	margin: -1px;
	box-shadow: var(--button-shadow-dark);
}

.omni .button.is-outlined.is-success::before {
	background-image: var(--gradient-success);
	box-shadow: 0 3px 5px 0 rgba(59, 62, 63, 0.1);
}

.omni .button.is-outlined.is-warning::before {
	background-image: linear-gradient(160deg, var(--color-blue-ui1) 11%, var(--color-blue-ui2) 85%);
	box-shadow: 0 3px 5px 0 rgba(59, 62, 63, 0.1);
}

.omni .button.is-outlined.is-danger::before {
	background-image: var(--gradient-error);
	box-shadow: 0 3px 5px 0 rgba(59, 62, 63, 0.1);
}

.omni .button:active::before, .omni .button.is-active::before {
	opacity: 0;
}

.omni .button.is-outlined:active::before, .omni .button.is-outlined.is-active::before {
	opacity: 1;
	box-shadow: none;
}

.omni .button.is-shadowless::before {
	box-shadow: none;
}

.omni .transition-color-primary-target,
.omni .transition-color-primary-hover,
.omni .transition-color-white-target,
.omni .transition-color-white-hover {
	transition: color .25s ease;
}

.omni .transition-color-primary,
.omni .transition-color-primary-hover:hover {
	color: var(--color-primary);
}

.omni .transition-color-white,
.omni .transition-color-white-hover:hover {
	color: var(--white);
}

.omni .transition-bg-primary-target,
.omni .transition-bg-secondary-target,
.omni .transition-bg-primary-hover,
.omni .transition-bg-secondary-hover {
	position: relative;
	overflow: hidden;
}

.omni .transition-bg-primary-target::before,
.omni .transition-bg-primary-hover::before {
	background: var(--gradient-electric-blue);
}

.omni .transition-bg-secondary-target::before,
.omni .transition-bg-secondary-hover::before {
	background: var(--gradient-mint);
}

.omni .transition-bg-primary-target *,
.omni .transition-bg-secondary-target *,
.omni .transition-bg-primary-hover *,
.omni .transition-bg-secondary-hover * {
	z-index: 0;
	position: relative;
}

.omni .transition-bg-primary::before,
.omni .transition-bg-secondary::before,
.omni .transition-bg-primary-hover:hover::before,
.omni .transition-bg-secondary-hover:hover::before {
	opacity: 1;
}

.omni .animation-wobble {
	display: inline-block;
	animation: wobble .5s linear 2s;
}

@keyframes wobble {
	25% {
		transform: rotate(15deg);
	}
	50% {
		transform: rotate(0);
	}
	75% {
		transform: rotate(15deg);
	}
	100% {
		transform: rotate(0);
	}
}

@keyframes skeleton-shimmer {
	to {
		background-position: 200% 0;
	}
}
`;

// node_modules/omni-ui/dist/styles.js
var _a;
var htmlStyleVariables = ((_a = stylesheet.match(/(?:\bhtml[^{]*{)([^}]+)}/)) == null ? void 0 : _a[1]) ?? "";
var _a2;
var omniStyleVariables = ((_a2 = stylesheet.match(/(?:\.omni[^{]*{)([^}]+)}/)) == null ? void 0 : _a2[1]) ?? "";
var variables = css`
  ${css([`${htmlStyleVariables} ${omniStyleVariables}`])}
  --font-family-serif: Georgia, Cambria, serif;
  --font-family-sans: BlinkMacSystemFont, 'Calibri', 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Roboto', sans-serif;
  --font-family-monospace: ui-monospace, 'Cascadia Mono', 'Segoe UI Mono', 'Ubuntu Mono', 'Roboto Mono', Menlo, Monaco,
    Consolas, monospace;

  /* TODO
	--form-bgimg-off: linear-gradient(135deg,rgba(0, 0, 0, 0) 0,var(0,0,0,0) 100%);

	provide a context for changing styles to form elements without side effects
	*/
  --form-font-size: 1rem;
  --form-bg: var(--color-pale-grey-two, #ddd);
  --form-bg-on: var(--color-blue-true80, #dfd);
  --form-border: var(--form-bg);
  --form-border-on: var(--form-bg);
  --form-bgimg-off: none;
  --form-bgimg: var(--gradient-electric-blue);
  --form-bgimg-on: var(--gradient-electric-blue);
  --form-fg: var(--color-almost-black, #111);
  --form-fg-on: var(--color-green-dark, #120);
  --form-focused: var(--blue);
`;
var forms = css`
  omni-option,
  :host(omni-option),
  input,
  button,
  select,
  option,
  textarea {
    font-family: inherit;
    font-size: var(--form-font-size, 1rem);
    line-height: 1.5;
    margin: 0;
    background-color: var(--form-bg);
    border: thin solid var(--form-bg);
    border-radius: var(--radius, 0.5em);
    padding: 0 1.4em;
    position: relative;
    box-sizing: border-box;
  }

  omni-select,
  :host(omni-select),
  omni-dropdown,
  :host(omni-dropdown),
  select {
    outline: none;
  }

  input:where([type='button'], [type='reset'], [type='submit']),
  button {
    display: inline-flex;
    align-items: center;
    text-align: center;
    white-space: nowrap;
    background-color: var(--form-bg);
    background-image: var(--form-bgimg-off);
    border-color: var(--form-border);
    border-width: thin;
    color: var(--form-fg, #333);
    cursor: pointer;
    font-weight: 600;
    letter-spacing: 0.014em;
    line-height: 1;
    height: 2.2em;
    transition: background-color background-image border-color color 0.25s;
    user-select: none;
  }
  /*
*/
  input:where([type='button'], [type='reset'], [type='submit']):focus-visible,
  button:focus-visible {
    box-shadow:
      rgb(59 62 63 / 10%) 0px 4px 6px 0px,
      0 0 0 0.125em var(--form-focused);
    outline: 0;
  }

  /* special visual overrides
	.is-text
	.is-outlined
	.is-
 * */
  .is-text input:where([type='button'], [type='reset'], [type='submit']),
  input:where([type='button'], [type='reset'], [type='submit']).is-text,
  .is-text button,
  button.is-text {
    --form-border: transparent;
    --form-bg: transparent;
    --form-bg-on: var(--color-pale-grey-two);
    --form-fg: var(--primary);
    --form-fg-on: var(--color-green-dark);
    text-decoration: none;
  }

  input:where([type='button'], [type='reset'], [type='submit']):where(:active, :hover, :focus),
  button:where(:active, :hover, :focus) {
    box-shadow: rgb(59 62 63 / 10%) 0px 4px 6px 0px;
    background-color: var(--form-bg-on);
    border-color: var(--form-border-on);
    color: var(--form-fg-on, #000);
    outline: 0;
  }

  .is-outlined input:where([type='button'], [type='reset'], [type='submit']),
  input:where([type='button'], [type='reset'], [type='submit']).is-outlined,
  .is-outlined button,
  button.is-outlined {
    --form-bg: transparent;
    --form-bg-on: var(--color-electric-blue-between);
    --form-bgimg-on: var(--form-bgimg);
    --form-fg: var(--primary);
    --form-border: var(--primary);
    --form-fg-on: var(--white);
    --form-border: var(--primary);
    --form-border-on: var(--primary);
  }
  .is-outlined input:where([type='button'], [type='reset'], [type='submit']):where(:active, :hover, :focus),
  input:where([type='button'], [type='reset'], [type='submit']).is-outlined:where(:active, :hover, :focus),
  .is-outlined button:where(:active, :hover, :focus),
  button.is-outlined:where(:active, :hover, :focus) {
    --form-fg-on: var(--white);
  }
`;
var all = css`
  :host {
    ${variables}
  }
  ${forms}
`;

// node_modules/omni-ui/dist/omni-element.js
var defaultDispatchNewEventOptions = {
  bubbles: true,
  composed: true,
  cancelable: true
};
var OmniElement = class _OmniElement extends LitElement {
  /**
   * Sensible default styles for a new custom element
   */
  static get styles() {
    const styles29 = [
      css`
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }

        *,
        *::before,
        *::after,
        .omni *,
        .omni *::before,
        .omni *::after {
          box-sizing: border-box;
        }
      `
    ];
    if (super.styles)
      styles29.unshift(super.styles);
    return styles29;
  }
  /**
   * Static method for defining a custom element with the registry. Explicit registration
   * makes the module side-effect free enabling apps to tree-shake unused components.
   *
   * @param  {String=}   name        Tag name for the new custom element
   * @param  {Function=} constructor Constructor for the new custom element
   * @param  {Object=}   [options]   Control how the element is defined
   */
  static register(name = "", constructor = null, options2 = {}) {
    if (!(name && constructor)) {
      return;
    }
    const existing = customElements.get(name);
    if (!existing) {
      customElements.define(name, constructor, options2);
    }
  }
  /** (iterator) utility for finding/filtering CSS selector (as 'this') matches node
   * @internal
   * @returns { boolean } indicates matches selector
   */
  static _nodeMatches(node) {
    return node.matches ? node.matches(this) : false;
  }
  /** event path utility for finding or filtering nodes
   @param { object } event - an Event object
   @param { string } cssSelector - 
    a valid CSS selector to match against, if falsy the path array of nodes is returned
   @param { boolean } collectFilter - 
    true (truthy) returns filtered array of nodes matching cssSelector
    false (default) returns array with the first node matching cssSelector
   @returns { Array } - array of 0 or more nodes
   */
  static pathfinder(event, cssSelector = "", collectFilter) {
    const path = event.composedPath();
    if (cssSelector) {
      if (collectFilter) {
        return path.filter(this._nodeMatches, cssSelector);
      }
      const node = path.find(this._nodeMatches, cssSelector);
      return node ? [node] : [];
    }
    return path;
  }
  /** @internal */
  pathfinder(event, cssSelector = "", collectFilter) {
    return _OmniElement.pathfinder(event, cssSelector, collectFilter);
  }
  /**
   * @internal
   * @deprecated
   * deprecate with warning and remove in a future version */
  get __dispatchNewEvent() {
    console.warn(
      "replace `__dispatchNewEvent` with `dispatchNewEvent`, __dispatchNewEvent will be deprecated in a future release"
    );
    return this.dispatchNewEvent;
  }
  /**
   * Convenience method for creating and dispatching an event in a single call
   *
   * @param  {String}  type      Event's type
   * @param  {Object}  [options] Event creation option overrides
   *                               (see defaultDispatchNewEventOptions)
   * @param  {Element} [target]  Event target (defaults to this)
   * @return {CustomEvent & {cancelled: boolean}}             Event object decorated with cancelled boolean flag
   * @note previously returned Array[event, wasNotCancelled result of dispatchEvent]
   */
  dispatchNewEvent(type, optionOverrides = {}, target = this) {
    const options2 = { ...defaultDispatchNewEventOptions, ...optionOverrides };
    const event = new CustomEvent(type, options2);
    if (super.dispatchNewEvent)
      super.dispatchNewEvent(type, options2, target);
    const wasNotCancelled = target.dispatchEvent(event);
    event.cancelled = !wasNotCancelled;
    return event;
  }
  render() {
    return html`<slot></slot>`;
  }
};
OmniElement.register("omni-element", OmniElement);

// node_modules/omni-ui/dist/omni-util.js
function mergekeyvalue(to, [key, value]) {
  const orig = to[key];
  if (orig && typeof orig === "object" && typeof value === "object") {
    merger(orig, value);
  } else {
    to[key] = value;
  }
  return to;
}
function merger(to, from) {
  if (Array.isArray(to) && Array.isArray(from)) {
    to.push(...from);
  } else if (from) {
    let source;
    try {
      source = structuredClone(from);
    } catch (e) {
      source = from;
    }
    Object.entries(source).reduce(mergekeyvalue, to);
  }
  return to;
}
function merge(to, ...from) {
  const copyTarget = structuredClone(to);
  return from.reduce(merger, copyTarget ?? {});
}
var baseDateFormat = { month: "short", day: "numeric", year: "numeric" };
var baseTimeFormat = { hour: "numeric", minute: "numeric" };
var baseRelTimeFormatOptions = { numeric: "auto" };
var timeUnits = {
  year: 24 * 60 * 60 * 1e3 * 365,
  month: 24 * 60 * 60 * 1e3 * 365 / 12,
  day: 24 * 60 * 60 * 1e3,
  hour: 60 * 60 * 1e3,
  minute: 60 * 1e3,
  second: 1e3
};
function dateToString(date, formatOverrides = {}) {
  return date.toLocaleDateString("default", merge(baseDateFormat, formatOverrides));
}
function dateToTimeString(date, formatOverrides = {}) {
  return date.toLocaleTimeString("default", merge(baseTimeFormat, formatOverrides));
}
function dateToRelativeTimeString(d1, d2 = /* @__PURE__ */ new Date(), locale = "en", optionOverrides) {
  let isRelativeTimeSupported = false;
  try {
    new Intl.RelativeTimeFormat("en", { numeric: "auto" });
    isRelativeTimeSupported = true;
  } catch (err) {
    console.log("Falling back to a regular date/time string due to Intl.RelativeTimeFormat not being supported.");
  }
  let result;
  if (isRelativeTimeSupported) {
    const rtf = new Intl.RelativeTimeFormat(locale, merge(baseRelTimeFormatOptions, optionOverrides));
    const elapsed = d1 - d2;
    Object.entries(timeUnits).some((unitEntry) => {
      if (Math.abs(elapsed) > unitEntry[1] || unitEntry[0] === "second") {
        result = capitalizeFirstWord(rtf.format(Math.round(elapsed / unitEntry[1]), unitEntry[0]));
        return true;
      }
      return false;
    });
  } else {
    result = dateToString(new Date(d1));
  }
  return result;
}
var baseCompareOptions = { sensitivity: "base" };
function sortString(a, b, locale, options2 = baseCompareOptions) {
  const d = a.localeCompare(b, locale, options2);
  return d < 0 ? -1 : d > 0 ? 1 : 0;
}
function sortNumber(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
function sort(arry, locale = "en", options2 = {}, fn = (a, b) => sortString(a, b, locale, options2)) {
  const merged = { ...baseCompareOptions, ...options2 };
  Object.assign(options2, merged);
  return [...arry].sort(fn);
}
function sortObjects(arry, key, locale = "en", options2 = {}, fn = (a, b) => sortString(a[key], b[key], locale, options2)) {
  return sort(arry, locale, options2, fn);
}
var responseForCode = {
  204: () => null
};
function responseOK(res) {
  if (res.ok) {
    if (res.status in responseForCode) {
      res.json = responseForCode[res.status];
    }
    return res;
  }
  return Promise.reject(res);
}
function fetching(resource, options2) {
  return fetch(resource, options2).then(responseOK);
}
var baseFetchOptions = {
  headers: {
    Accept: "application/json",
    "Content-Type": "application/json"
  },
  cache: "no-store"
};
function fetchJSON(url, options2) {
  return fetching(url, merge(baseFetchOptions, options2)).then((res) => res.json());
}
function fetchText(url, options2) {
  return fetching(url, merge(baseFetchOptions, { headers: { Accept: "text/plain" } }, options2)).then((res) => res.text());
}
function fetchCSS(url, options2) {
  return fetching(url, merge(baseFetchOptions, { headers: { Accept: "text/css" } }, options2)).then((res) => res.text());
}
var cssImportAtRulePtn = /\s*@import\s+(?:"|')([^"')]+)(?:"|')\s*/;
function styleSheetReplaceImport(sheet, importOrCSS) {
  const matches = cssImportAtRulePtn.exec(importOrCSS);
  if (!matches)
    return sheet.replace(importOrCSS);
  return fetchCSS(matches[1]).then((css2) => sheet.replace(css2));
}
function capitalizeFirstWord(phrase) {
  return phrase.replace(/^\w/, (c) => c.toUpperCase());
}
var trailingSlashesPathReplacePtn = /\/+$/;
function areUrlsEqualish(url1, url2) {
  const u1 = new URL(url1);
  const u2 = new URL(url2);
  const pathsimilar = u1.pathname.replace(trailingSlashesPathReplacePtn, "") === u2.pathname.replace(trailingSlashesPathReplacePtn, "");
  return u1.origin === u2.origin && pathsimilar && u1.search === u2.search;
}
function memoize(fn) {
  return new Proxy(fn, {
    //@ts-ignore
    cache: /* @__PURE__ */ new Map(),
    apply(target, thisArg, argsList) {
      const cacheKey = JSON.stringify(argsList);
      if (!this.cache.has(cacheKey))
        this.cache.set(cacheKey, target.apply(thisArg, argsList));
      return this.cache.get(cacheKey);
    }
  });
}
function debounce(func, wait, immediate = false) {
  let timeout;
  return (...args) => {
    const callNow = immediate && !timeout;
    const later = () => {
      timeout = null;
      if (!immediate)
        func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow)
      func(...args);
  };
}
function truncateFilename(filename, truncateAt = 10) {
  if (!filename.includes("."))
    return filename;
  const split = filename.split(".");
  if (split[0].length - 3 <= truncateAt)
    return filename;
  const first = filename.slice(0, truncateAt);
  const end = split[0].slice(split[0].length - 3, split[0].length);
  split.shift();
  const result = `${first}...${end}.${split.join(".")}`;
  if (result.length > filename.length)
    return filename;
  return result;
}
async function hashString(string, algorithm = "SHA-256") {
  const bufferIn = new TextEncoder().encode(string);
  const bufferOut = await crypto.subtle.digest(algorithm, bufferIn);
  return [...new Uint8Array(bufferOut)].map((bytes) => bytes.toString(16).padStart(2, "0")).join("");
}
function querySelectorDeep(tagName, id = null, rootNode = document) {
  function traverseNodes(nodeList) {
    for (const node of nodeList) {
      if (node.localName === tagName && (id ? id === node.id : true)) {
        return node;
      }
      if (node.shadowRoot) {
        const found = traverseNodes(node.shadowRoot.querySelectorAll("*"));
        if (found) {
          return found;
        }
      }
    }
  }
  return traverseNodes(rootNode.querySelectorAll("*"));
}
function resizeImage(url, options2) {
  const arr = url.split("/");
  const encodedStr = arr[arr.length - 1].split("#")[0];
  const decodedObj = JSON.parse(atob(encodedStr));
  const newOption = {
    key: decodedObj.key,
    edits: options2.edits
  };
  const encodeObj = btoa(JSON.stringify(newOption));
  arr.splice(arr.length - 1, 1);
  return arr.join("/") + "/" + encodeObj;
}
function getElementSize(element, includeMargin = true) {
  let { width, height } = element.getBoundingClientRect();
  if (includeMargin) {
    const computedStyle = getComputedStyle(element);
    width += parseInt(computedStyle.marginLeft) + parseInt(computedStyle.marginRight);
    height += parseInt(computedStyle.marginTop) + parseInt(computedStyle.marginBottom);
  }
  return {
    width: Math.trunc(width),
    height: Math.trunc(height)
  };
}
var ssoEnv = (env) => env === "local" ? "dev" : env;
var ssoHost = (env, host) => {
  let prefix = ssoEnv(env);
  if (prefix === "prod")
    prefix = "";
  return `${prefix}${host}`;
};
var fetchOmni = async (env, path, options2) => {
  const url = `https://${ssoHost(env, "omni.annalect.com")}${path}`;
  const response = await fetch(url, options2);
  return response.json();
};
var generateToken = async (env, clientId, sid, typeKey) => (await fetchOmni(env, `/api/jwt/${clientId}/?ANsid=${sid}`, {
  method: "POST",
  body: JSON.stringify({
    omniTypeKeys: [typeKey],
    withRoles: true
  })
})).jwt;
var parseJWT = (token) => {
  const base64Url = token.split(".")[1];
  const base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
  const jsonPayload = decodeURIComponent(
    window.atob(base64).split("").map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`).join("")
  );
  return JSON.parse(jsonPayload);
};
var userHasRole = (jwt, typeKey, requiredRoles = []) => {
  var _a7;
  try {
    const { omniTypeKeys, roles } = parseJWT(jwt);
    const appIndex = omniTypeKeys == null ? void 0 : omniTypeKeys.indexOf(typeKey);
    const userRoles = ((_a7 = roles == null ? void 0 : roles[appIndex]) == null ? void 0 : _a7.split(",")) ?? [];
    const matches = userRoles.filter((x) => requiredRoles.includes(x));
    return matches.length > 0;
  } catch {
    return false;
  }
};

// node_modules/omni-ui/dist/omni-stylesheets.js
var omniStyleSheets = [];
var omniStandardStyleSheet;
try {
  omniStandardStyleSheet = new CSSStyleSheet();
} catch (e) {
  console.error(
    `Omni UI: missing Constructable Style Sheets polyfill for Safari and Firefox. See https://www.npmjs.com/package/construct-style-sheets-polyfill`
  );
  throw e;
}
styleSheetReplaceImport(omniStandardStyleSheet, stylesheet).catch((e) => console.error(`omniStyleSheets error (${e})`));
omniStyleSheets.push(omniStandardStyleSheet);

// node_modules/omni-ui/dist/document-element-clip-controller.js
var DocumentElementClipController = class {
  constructor() {
    this.clipRefCount = 0;
  }
  clip() {
    document.documentElement.classList.add("is-clipped");
    this.clipRefCount += 1;
  }
  unclip() {
    this.clipRefCount = Math.max(0, this.clipRefCount - 1);
    if (this.clipRefCount === 0) {
      document.documentElement.classList.remove("is-clipped");
    }
  }
};
var documentElementClipController = new DocumentElementClipController();

// node_modules/omni-ui/dist/scroll-reset-mixin.js
var scrollToDefaultOptions = {
  top: 0,
  left: 0
};
var ScrollResetMixin = (superClass) => {
  class ScrollResetEl extends superClass {
    // eslint-disable-next-line class-methods-use-this
    scrollResetDocument(options2) {
      this.scrollResetElement(window, options2);
    }
    scrollResetElement(el = this, options2) {
      requestAnimationFrame(() => {
        el.scrollTo({ ...scrollToDefaultOptions, ...options2 });
      });
    }
  }
  return ScrollResetEl;
};

// node_modules/omni-ui/dist/document-element-clip-mixin.js
var DocumentElementClipMixin = (superClass) => {
  class DocumentElementClipEl extends superClass {
    constructor() {
      super();
      this.__docElClipRefCount = 0;
    }
    disconnectedCallback() {
      documentElementClipController.unclip();
    }
    _clipDocumentElement() {
      documentElementClipController.clip();
      this.__docElClipRefCount += 1;
    }
    _unclipDocumentElement() {
      const prevDocElClipRefCount = this.__docElClipRefCount;
      this.__docElClipRefCount = Math.max(0, this.__docElClipRefCount - 1);
      if (this.__docElClipRefCount === prevDocElClipRefCount)
        return;
      documentElementClipController.unclip();
    }
  }
  return DocumentElementClipEl;
};

// node_modules/omni-ui/dist/draggable-mixin.js
var DraggableMixin = (superClass) => {
  class DraggableMixinEl extends superClass {
    static get styles() {
      return [
        // @ts-ignore
        super.styles,
        css`
          /* NOTE this requires explicit properties to work as expected
					 * possibly a combination of left-min/max width/height, -top/-left initial values
					 * also note z variables below
					 */
          :host,
          [drag-able] {
            margin: 0;
            --drag-left-min: 0vw;
            --drag-left: auto;
            --drag-left-max: calc(100vw - 4rem);
            --drag-top-min: 0vh;
            --drag-top: auto;
            --drag-top-max: calc(100vh - 4rem);
            /* NOTE can adjust per content */
            --drag-top-max: calc(100vh - var(--drag-height));
            --drag-left-max: calc(100vw - var(--drag-width));
          }
          :host([drag-able]),
          ::slotted([drag-able]),
          :is([drag-able]) {
            position: fixed;
            cursor: move;
            top: clamp(
              var(--drag-top-min, 0vh),
              var(--drag-top, 0),
              var(--drag-top-max, calc(100vh - var(--drag-height, 50px)))
            );
            left: clamp(
              var(--drag-left-min, 0vw),
              var(--drag-left, 0),
              var(--drag-left-max, calc(100vw - var(--drag-width, 20px)))
            );
            z-index: var(--drag-able-z, auto);
          }
          :host(:is([drag-able][active])),
          ::slotted(:is([drag-able][active])),
          :is([drag-able][active]) {
            /* below Bulma modal (40) above omni-tooltip (38) */
            z-index: var(--drag-z, 39);
          }
        `
      ];
    }
    static get properties() {
      return { dragable: { type: Boolean, attribute: "drag-able" } };
    }
    constructor() {
      super();
      this.addEventListener("pointerdown", this._dragstart);
      this._dragend = this._dragend.bind(this);
      this._dragmove = this._dragmove.bind(this);
      console.warn("The DraggableMixin is deprecated and will be removed in the upcoming Omni-UI 8.0 release. Please use the DraggableController instead. https://omni-ui.annalect.com/draggable-controller");
    }
    /* Supports host or element in shadowRoot */
    _draggable(el = this) {
      if (!el.dragable) {
        el.dragable = true;
        if (el === this) {
          return;
        }
        el.setAttribute("drag-able", "");
      }
      el._dragposition = this._dragposition;
      el._dragend = this.constructor.prototype._dragend.bind(el);
      el._dragmove = this.constructor.prototype._dragmove.bind(el);
      el.addEventListener("pointerdown", this._dragstart);
    }
    _undraggable(el = this) {
      el.dragable = false;
      el._dragend();
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this._dragend();
    }
    _dragend() {
      this.removeAttribute("active");
      this.removeEventListener("drag", this._dragposition);
      const { ownerDocument } = this;
      ownerDocument.removeEventListener("pointermove", this._dragmove);
      ownerDocument.removeEventListener("pointerup", this._dragend);
      ownerDocument.removeEventListener("pointerout", this._dragend);
      ownerDocument.removeEventListener("mouseleave", this._dragend);
      ownerDocument.removeEventListener("mouseout", this._dragend);
      this.dispatchEvent(new CustomEvent("dragend", { bubbles: true, composed: true, detail: this._position }));
    }
    _dragstart(event) {
      const { pageX, pageY, ctrlKey, button } = event;
      if (!this.dragable || ctrlKey || button)
        return;
      this.setAttribute("active", "");
      this.addEventListener("drag", this._dragposition);
      const { left, top, width, height } = this.getBoundingClientRect();
      const { innerWidth, innerHeight } = self;
      const offsetX = pageX - left;
      const offsetY = pageY - top;
      this._position = {
        left,
        top,
        offsetX,
        offsetY,
        width,
        height,
        availableWidth: innerWidth,
        availableHeight: innerHeight
      };
      this.dispatchEvent(new CustomEvent("dragstart", { bubbles: true, composed: true, detail: this._position }));
      const { ownerDocument } = this;
      ownerDocument.addEventListener("mouseleave", this._dragend);
      ownerDocument.addEventListener("mouseout", this._dragend);
      ownerDocument.addEventListener("pointerout", this._dragend);
      ownerDocument.addEventListener("pointerup", this._dragend);
      ownerDocument.addEventListener("pointermove", this._dragmove);
      this._dragmove(event);
    }
    _dragposition() {
      cancelAnimationFrame(this._dragrender);
      this._dragrender = requestAnimationFrame(() => {
        const { style: style2, _position } = this;
        const { left, top, width, height } = _position;
        style2.setProperty("--drag-left", `${Math.round(left)}px`);
        style2.setProperty("--drag-top", `${Math.round(top)}px`);
        style2.setProperty("--drag-width", `${Math.round(width)}px`);
        style2.setProperty("--drag-height", `${Math.round(height)}px`);
      });
    }
    _dragrender(_dragrender) {
      throw new Error("Method not implemented.");
    }
    _dragmove(event) {
      event.preventDefault();
      const { pageX, pageY } = event;
      const { _position } = this;
      const { offsetX, offsetY } = _position;
      const left = pageX - offsetX;
      const top = pageY - offsetY;
      _position.left = left;
      _position.top = top;
      this.dispatchEvent(new CustomEvent("drag", { bubbles: true, composed: true, detail: _position }));
    }
  }
  return DraggableMixinEl;
};

// node_modules/omni-ui/dist/api/image-api.js
var originsByEnv = {
  local: "https://devimages.annalect.com",
  dev: "https://devimages.annalect.com",
  qa: "https://qaimages.annalect.com",
  stg: "https://stgimages.annalect.com",
  prod: "https://images.annalect.com"
};
var ImageAPI = class {
  constructor(token, env = "prod") {
    this.token = token;
    this.env = env;
    this.origin = originsByEnv[env];
    this.fetchOptions = {
      // NOTE: API currently only supports ANsid tokens
      headers: { version: "v2", ANsid: token }
    };
  }
  /**
   * Create a hosted image URL
   * @param  {File} file image file to upload (e.g. obtained via <omni-file-input>)
   * @return {Promise<string>}   a Promise for an image URL
   */
  createImageURL(file) {
    const url = new URL(`/images`, this.origin);
    const formData = new FormData();
    formData.append("environment", this.env);
    formData.append(file.name, file);
    const options2 = merge(this.fetchOptions, {
      method: "POST",
      body: formData
    });
    delete options2["Content-Type"];
    return fetchJSON(url, options2).then(([imgData]) => encodeImageURL(this.origin, imgData.key, imgData.originalFileName)).catch((res) => {
      console.warn(`error with request`, { url, options: options2, res });
      return Promise.reject(res);
    });
  }
};
function encodeImageURL(origin, key, filename) {
  const encodedKey = encodeURI(btoa(JSON.stringify({ key })));
  const encodedFilename = encodeURIComponent(filename);
  return `${origin}/images/${encodedKey}#${encodedFilename}`;
}

// node_modules/lit-html/development/directive.js
var PartType = {
  ATTRIBUTE: 1,
  CHILD: 2,
  PROPERTY: 3,
  BOOLEAN_ATTRIBUTE: 4,
  EVENT: 5,
  ELEMENT: 6
};
var directive = (c) => (...values) => ({
  // This property needs to remain unminified.
  ["_$litDirective$"]: c,
  values
});
var Directive = class {
  constructor(_partInfo) {
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  /** @internal */
  _$initialize(part, parent, attributeIndex) {
    this.__part = part;
    this._$parent = parent;
    this.__attributeIndex = attributeIndex;
  }
  /** @internal */
  _$resolve(part, props) {
    return this.update(part, props);
  }
  update(_part, props) {
    return this.render(...props);
  }
};

// node_modules/lit-html/development/directives/class-map.js
var ClassMapDirective = class extends Directive {
  constructor(partInfo) {
    var _a7;
    super(partInfo);
    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== "class" || ((_a7 = partInfo.strings) === null || _a7 === void 0 ? void 0 : _a7.length) > 2) {
      throw new Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
    }
  }
  render(classInfo) {
    return " " + Object.keys(classInfo).filter((key) => classInfo[key]).join(" ") + " ";
  }
  update(part, [classInfo]) {
    var _a7, _b2;
    if (this._previousClasses === void 0) {
      this._previousClasses = /* @__PURE__ */ new Set();
      if (part.strings !== void 0) {
        this._staticClasses = new Set(part.strings.join(" ").split(/\s/).filter((s) => s !== ""));
      }
      for (const name in classInfo) {
        if (classInfo[name] && !((_a7 = this._staticClasses) === null || _a7 === void 0 ? void 0 : _a7.has(name))) {
          this._previousClasses.add(name);
        }
      }
      return this.render(classInfo);
    }
    const classList = part.element.classList;
    this._previousClasses.forEach((name) => {
      if (!(name in classInfo)) {
        classList.remove(name);
        this._previousClasses.delete(name);
      }
    });
    for (const name in classInfo) {
      const value = !!classInfo[name];
      if (value !== this._previousClasses.has(name) && !((_b2 = this._staticClasses) === null || _b2 === void 0 ? void 0 : _b2.has(name))) {
        if (value) {
          classList.add(name);
          this._previousClasses.add(name);
        } else {
          classList.remove(name);
          this._previousClasses.delete(name);
        }
      }
    }
    return noChange;
  }
};
var classMap = directive(ClassMapDirective);

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/custom-element.js
var legacyCustomElement = (tagName, clazz) => {
  customElements.define(tagName, clazz);
  return clazz;
};
var standardCustomElement = (tagName, descriptor) => {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    // This callback is called once the class is otherwise fully defined
    finisher(clazz) {
      customElements.define(tagName, clazz);
    }
  };
};
var customElement = (tagName) => (classOrDescriptor) => typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/property.js
var standardProperty = (options2, element) => {
  if (element.kind === "method" && element.descriptor && !("value" in element.descriptor)) {
    return {
      ...element,
      finisher(clazz) {
        clazz.createProperty(element.key, options2);
      }
    };
  } else {
    return {
      kind: "field",
      key: Symbol(),
      placement: "own",
      descriptor: {},
      // store the original key so subsequent decorators have access to it.
      originalKey: element.key,
      // When @babel/plugin-proposal-decorators implements initializers,
      // do this instead of the initializer below. See:
      // https://github.com/babel/babel/issues/9260 extras: [
      //   {
      //     kind: 'initializer',
      //     placement: 'own',
      //     initializer: descriptor.initializer,
      //   }
      // ],
      initializer() {
        if (typeof element.initializer === "function") {
          this[element.key] = element.initializer.call(this);
        }
      },
      finisher(clazz) {
        clazz.createProperty(element.key, options2);
      }
    };
  }
};
var legacyProperty = (options2, proto, name) => {
  proto.constructor.createProperty(name, options2);
};
function property(options2) {
  return (protoOrDescriptor, name) => name !== void 0 ? legacyProperty(options2, protoOrDescriptor, name) : standardProperty(options2, protoOrDescriptor);
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/state.js
function state(options2) {
  return property({
    ...options2,
    state: true
  });
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/base.js
var decorateProperty = ({ finisher, descriptor }) => (protoOrDescriptor, name) => {
  var _a7;
  if (name !== void 0) {
    const ctor = protoOrDescriptor.constructor;
    if (descriptor !== void 0) {
      Object.defineProperty(protoOrDescriptor, name, descriptor(name));
    }
    finisher === null || finisher === void 0 ? void 0 : finisher(ctor, name);
  } else {
    const key = (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (_a7 = protoOrDescriptor.originalKey) !== null && _a7 !== void 0 ? _a7 : protoOrDescriptor.key
    );
    const info = descriptor != void 0 ? {
      kind: "method",
      placement: "prototype",
      key,
      descriptor: descriptor(protoOrDescriptor.key)
    } : { ...protoOrDescriptor, key };
    if (finisher != void 0) {
      info.finisher = function(ctor) {
        finisher(ctor, key);
      };
    }
    return info;
  }
};

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/event-options.js
function eventOptions(options2) {
  return decorateProperty({
    finisher: (ctor, name) => {
      Object.assign(
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        ctor.prototype[name],
        options2
      );
    }
  });
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/query.js
function query(selector, cache2) {
  return decorateProperty({
    descriptor: (name) => {
      const descriptor = {
        get() {
          var _a7, _b2;
          return (_b2 = (_a7 = this.renderRoot) === null || _a7 === void 0 ? void 0 : _a7.querySelector(selector)) !== null && _b2 !== void 0 ? _b2 : null;
        },
        enumerable: true,
        configurable: true
      };
      if (cache2) {
        const key = typeof name === "symbol" ? Symbol() : `__${name}`;
        descriptor.get = function() {
          var _a7, _b2;
          if (this[key] === void 0) {
            this[key] = (_b2 = (_a7 = this.renderRoot) === null || _a7 === void 0 ? void 0 : _a7.querySelector(selector)) !== null && _b2 !== void 0 ? _b2 : null;
          }
          return this[key];
        };
      }
      return descriptor;
    }
  });
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/query-all.js
function queryAll(selector) {
  return decorateProperty({
    descriptor: (_name) => ({
      get() {
        var _a7, _b2;
        return (_b2 = (_a7 = this.renderRoot) === null || _a7 === void 0 ? void 0 : _a7.querySelectorAll(selector)) !== null && _b2 !== void 0 ? _b2 : [];
      },
      enumerable: true,
      configurable: true
    })
  });
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/query-async.js
function queryAsync(selector) {
  return decorateProperty({
    descriptor: (_name) => ({
      async get() {
        var _a7;
        await this.updateComplete;
        return (_a7 = this.renderRoot) === null || _a7 === void 0 ? void 0 : _a7.querySelector(selector);
      },
      enumerable: true,
      configurable: true
    })
  });
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js
var _a3;
var NODE_MODE = false;
var global = NODE_MODE ? globalThis : window;
var slotAssignedElements = ((_a3 = global.HTMLSlotElement) === null || _a3 === void 0 ? void 0 : _a3.prototype.assignedElements) != null ? (slot, opts) => slot.assignedElements(opts) : (slot, opts) => slot.assignedNodes(opts).filter((node) => node.nodeType === Node.ELEMENT_NODE);
function queryAssignedElements(options2) {
  const { slot, selector } = options2 !== null && options2 !== void 0 ? options2 : {};
  return decorateProperty({
    descriptor: (_name) => ({
      get() {
        var _a7;
        const slotSelector = `slot${slot ? `[name=${slot}]` : ":not([name])"}`;
        const slotEl = (_a7 = this.renderRoot) === null || _a7 === void 0 ? void 0 : _a7.querySelector(slotSelector);
        const elements = slotEl != null ? slotAssignedElements(slotEl, options2) : [];
        if (selector) {
          return elements.filter((node) => node.matches(selector));
        }
        return elements;
      },
      enumerable: true,
      configurable: true
    })
  });
}

// node_modules/lit/node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js
function queryAssignedNodes(slotOrOptions, flatten, selector) {
  let slot = slotOrOptions;
  let assignedNodesOptions;
  if (typeof slotOrOptions === "object") {
    slot = slotOrOptions.slot;
    assignedNodesOptions = slotOrOptions;
  } else {
    assignedNodesOptions = { flatten };
  }
  if (selector) {
    return queryAssignedElements({
      slot,
      flatten,
      selector
    });
  }
  return decorateProperty({
    descriptor: (_name) => ({
      get() {
        var _a7, _b2;
        const slotSelector = `slot${slot ? `[name=${slot}]` : ":not([name])"}`;
        const slotEl = (_a7 = this.renderRoot) === null || _a7 === void 0 ? void 0 : _a7.querySelector(slotSelector);
        return (_b2 = slotEl === null || slotEl === void 0 ? void 0 : slotEl.assignedNodes(assignedNodesOptions)) !== null && _b2 !== void 0 ? _b2 : [];
      },
      enumerable: true,
      configurable: true
    })
  });
}

// node_modules/omni-ui/dist/component/omni-toolbar/omni-more-bar.js
var _getWidthPlusMargins, getWidthPlusMargins_fn, _barItems, barItems_get, _firstHiddenItem, firstHiddenItem_get, _observe, observe_fn, _unobserve, unobserve_fn, _isHidden, isHidden_fn, _hideEl, hideEl_fn, _showEl, showEl_fn, _positionMoreItem, positionMoreItem_fn, _onIntersection;
var MoreBar = class {
  constructor(barEl, moreEl, isJustifyEnd = false) {
    __privateAdd(this, _getWidthPlusMargins);
    __privateAdd(this, _barItems);
    __privateAdd(this, _firstHiddenItem);
    __privateAdd(this, _observe);
    __privateAdd(this, _unobserve);
    __privateAdd(this, _isHidden);
    __privateAdd(this, _hideEl);
    __privateAdd(this, _showEl);
    __privateAdd(this, _positionMoreItem);
    __privateAdd(this, _onIntersection, (entries2) => {
      for (const entry of entries2) {
        let isShow;
        if (entry.isIntersecting) {
          __privateMethod(this, _showEl, showEl_fn).call(this, entry.target);
          isShow = true;
        } else {
          __privateMethod(this, _hideEl, hideEl_fn).call(this, entry.target);
          isShow = false;
        }
        this.barEl.dispatchEvent(
          new CustomEvent("morebar-item-update", {
            bubbles: true,
            detail: {
              item: entry.target,
              type: isShow ? "show" : "hide",
              index: __privateGet(this, _barItems, barItems_get).indexOf(entry.target),
              moreBar: this
            }
          })
        );
      }
      __privateMethod(this, _positionMoreItem, positionMoreItem_fn).call(this);
    });
    if (!barEl || !moreEl)
      throw new Error("MoreBar: two arguments required!");
    this.barEl = barEl;
    this.moreEl = moreEl;
    this.isJustifyEnd = isJustifyEnd;
  }
  init() {
    this.destroy();
    this.barEl.style.display = "flex";
    this.moreEl.style.position = "static";
    const marginPlusWidth = __privateMethod(this, _getWidthPlusMargins, getWidthPlusMargins_fn).call(this, this.moreEl);
    __privateMethod(this, _hideEl, hideEl_fn).call(this, this.moreEl);
    this.barEl.style.minWidth = `${marginPlusWidth}px`;
    const itemObserverOpts = {
      root: this.barEl,
      threshold: 0.99,
      // setup margin placeholder for more item
      rootMargin: this.isJustifyEnd ? `0px 0px 0px ${-marginPlusWidth}px` : `0px ${-marginPlusWidth}px 0px 0px`
    };
    const lastItemObserverOpts = {
      ...itemObserverOpts,
      rootMargin: "0px"
    };
    this._itemObserver = new IntersectionObserver(__privateGet(this, _onIntersection), itemObserverOpts);
    this._lastItemObserver = new IntersectionObserver(__privateGet(this, _onIntersection), lastItemObserverOpts);
    __privateMethod(this, _observe, observe_fn).call(this);
  }
  destroy() {
    __privateMethod(this, _unobserve, unobserve_fn).call(this);
  }
};
_getWidthPlusMargins = new WeakSet();
getWidthPlusMargins_fn = function(el) {
  const style2 = getComputedStyle(el);
  const margins = {
    top: parseInt(style2.marginTop, 10),
    right: parseInt(style2.marginRight, 10),
    left: parseInt(style2.marginLeft, 10),
    bottom: parseInt(style2.marginBottom, 10)
  };
  return el.offsetWidth + margins.left + margins.right;
};
_barItems = new WeakSet();
barItems_get = function() {
  let barChildArry;
  const bar = this.barEl;
  if (bar.matches("slot")) {
    barChildArry = bar.assignedElements();
  } else {
    barChildArry = Array.from(this.barEl.children);
  }
  const items = barChildArry.reduce((items2, child) => {
    if (child.matches("slot")) {
      items2 = items2.concat(child.assignedElements());
    } else if (child !== this.moreEl) {
      items2.push(child);
    }
    return items2;
  }, []);
  return this.isJustifyEnd ? items.reverse() : items;
};
_firstHiddenItem = new WeakSet();
firstHiddenItem_get = function() {
  for (const item of __privateGet(this, _barItems, barItems_get)) {
    if (__privateMethod(this, _isHidden, isHidden_fn).call(this, item))
      return item;
  }
  return void 0;
};
_observe = new WeakSet();
observe_fn = function() {
  const barItems = __privateGet(this, _barItems, barItems_get);
  for (const item of barItems) {
    if (item !== barItems[barItems.length - 1]) {
      this._itemObserver.observe(item);
    } else {
      this._lastItemObserver.observe(item);
    }
  }
};
_unobserve = new WeakSet();
unobserve_fn = function() {
  var _a7, _b2;
  (_a7 = this._itemObserver) == null ? void 0 : _a7.disconnect();
  (_b2 = this._lastItemObserver) == null ? void 0 : _b2.disconnect();
};
_isHidden = new WeakSet();
isHidden_fn = function(el) {
  return (el == null ? void 0 : el.style.visibility) === "hidden";
};
_hideEl = new WeakSet();
hideEl_fn = function(el) {
  el.style.visibility = "hidden";
};
_showEl = new WeakSet();
showEl_fn = function(el) {
  el.style.visibility = "visible";
};
_positionMoreItem = new WeakSet();
positionMoreItem_fn = function() {
  __privateMethod(this, _hideEl, hideEl_fn).call(this, this.moreEl);
  this.moreEl.style.transform = "";
  const firstHiddenItem = __privateGet(this, _firstHiddenItem, firstHiddenItem_get);
  if (firstHiddenItem) {
    const side = this.isJustifyEnd ? "right" : "left";
    this.moreEl.style.transform = `
        translateX(${firstHiddenItem.getBoundingClientRect()[side] - this.moreEl.getBoundingClientRect()[side]}px)
      `;
    __privateMethod(this, _showEl, showEl_fn).call(this, this.moreEl);
    this.barEl.dispatchEvent(
      new CustomEvent("morebar-moreitem-show", {
        bubbles: true,
        detail: {
          item: this.moreEl,
          type: "show",
          transform: this.moreEl.style.transform,
          moreBar: this
        }
      })
    );
  }
};
_onIntersection = new WeakMap();

// node_modules/omni-ui/dist/component/omni-style/omni-style.js
var OmniStyle = class extends OmniElement {
  _styleListener(event) {
    const { detail = {} } = event;
    if (detail instanceof Function) {
      detail.call(this, event, this);
    } else {
      Object.entries(detail).forEach(this.setProperty, this);
    }
  }
  setProperty([name = "", value = ""]) {
    this.style.setProperty(name, value);
  }
  constructor() {
    super();
    this._styleListener = this._styleListener.bind(this);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    self.removeEventListener("omni-style", this._styleListener);
  }
  connectedCallback() {
    super.connectedCallback();
    self.addEventListener("omni-style", this._styleListener);
    const root = this.getRootNode();
    if (root instanceof HTMLDocument && this.children.length === 0) {
      root.firstElementChild.classList.add("omni");
    } else if (!this.closest(".omni"))
      this.classList.add("omni");
    if (!root.adoptedStyleSheets.includes(omniStyleSheets[0])) {
      root.adoptedStyleSheets = [
        ...omniStyleSheets,
        // inject shared omni sheets first, so component sheets can override
        //@ts-ignore
        ...root.adoptedStyleSheets
      ];
    }
  }
  render() {
    return html`<slot></slot>`;
  }
};
OmniElement.register("omni-style", OmniStyle);

// node_modules/omni-ui/dist/icon/omni-icon-resolver.js
async function resolveOmniIconset(group = "?") {
  switch (group) {
    case "interactive":
      return import("./iconset-interactive-54DNPJFS.js");
    case "informative":
      return import("./iconset-informative-NWRAAIO7.js");
    case "object":
      return import("./iconset-object-2AQMEIII.js");
    case "brand":
      return import("./iconset-brand-SMQ2XBN5.js");
    case "app":
      return import("./iconset-app-4JUOEEWL.js");
    case "editor":
      return import("./iconset-editor-VATEHTES.js");
    default:
      throw new Error(`Unknown icon set "${group}"`);
  }
}

// node_modules/omni-ui/dist/component/omni-icon/omni-icon.js
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
var styles = css`:host{--color-icon-lines: var(--color-almost-black);fill:var(--color-icon-lines);height:1em;width:1em}:host svg{vertical-align:top}:host svg[fill-stroke],:host svg[stroke-fill],:host ::slotted(:is(svg[fill-stroke],svg[stroke-fill])){stroke:var(--color-icon-lines)}:host(.is-info),:host(.is-active),:host(.is-success),:host(.is-warning),:host(.is-danger){--color-icon-lines: white;width:2em;height:2em}:host(.is-info) div,:host(.is-active) div,:host(.is-success) div,:host(.is-warning) div,:host(.is-danger) div,:host(.is-info) slot,:host(.is-active) slot,:host(.is-success) slot,:host(.is-warning) slot,:host(.is-danger) slot{display:flex;align-items:center;justify-content:center;transform-style:preserve-3d;width:100%;height:100%}:host(.is-info) svg,:host(.is-active) svg,:host(.is-success) svg,:host(.is-warning) svg,:host(.is-danger) svg,:host(.is-info) ::slotted(svg),:host(.is-active) ::slotted(svg),:host(.is-success) ::slotted(svg),:host(.is-warning) ::slotted(svg),:host(.is-danger) ::slotted(svg){height:50%;width:50%}:host(.is-info) div::before,:host(.is-active) div::before,:host(.is-success) div::before,:host(.is-warning) div::before,:host(.is-danger) div::before,:host(.is-info) div::after,:host(.is-active) div::after,:host(.is-success) div::after,:host(.is-warning) div::after,:host(.is-danger) div::after,:host(.is-info) slot::before,:host(.is-active) slot::before,:host(.is-success) slot::before,:host(.is-warning) slot::before,:host(.is-danger) slot::before,:host(.is-info) slot::after,:host(.is-active) slot::after,:host(.is-success) slot::after,:host(.is-warning) slot::after,:host(.is-danger) slot::after{content:"";display:block;position:absolute;border-radius:50%;width:100%;height:100%}:host(.is-info) div::before,:host(.is-active) div::before,:host(.is-success) div::before,:host(.is-warning) div::before,:host(.is-danger) div::before,:host(.is-info) slot::before,:host(.is-active) slot::before,:host(.is-success) slot::before,:host(.is-warning) slot::before,:host(.is-danger) slot::before{box-shadow:inset 0 0 0 1.5px rgba(255,255,255,.3);transform:translateZ(-2px)}:host(.is-info) div::after,:host(.is-active) div::after,:host(.is-success) div::after,:host(.is-warning) div::after,:host(.is-danger) div::after,:host(.is-info) slot::after,:host(.is-active) slot::after,:host(.is-success) slot::after,:host(.is-warning) slot::after,:host(.is-danger) slot::after{background-color:rgba(255,255,255,.15);clip-path:polygon(0 20%, 0 0, 100% 0, 100% 80%);transform:translateZ(-1px)}:host(.is-info) div::before,:host(.is-info) slot::before{background-image:linear-gradient(172deg, var(--color-electric-blue) 11%, #03bbf3 122%)}:host(.is-success) div::before,:host(.is-success) slot::before{background-image:linear-gradient(144deg, var(--color-mint), #00e3ae 125%)}:host(.is-warning) div::before,:host(.is-warning) slot::before{background-image:linear-gradient(158deg, var(--color-honeycomb) -24%, #f0b248 126%)}:host(.is-danger) div::before,:host(.is-danger) slot::before{background-image:linear-gradient(137deg, var(--color-melon) 4%, #f56c8e)}:host(.is-active) div::before,:host(.is-active) slot::before{box-shadow:inset 0 0 0 1px var(--color-electric-blue);background-image:linear-gradient(93deg, #fff 50%, #03bbf3 50%, var(--color-electric-blue))}:host(.is-active) div,:host(.is-active) slot{--color-icon-lines: var(--color-electric-blue);fill:var(--color-icon-lines)}:host(.is-active) div::after,:host(.is-active) slot::after{background-color:#fff;clip-path:none;width:84%;height:84%;box-shadow:0 1px 2px 1px var(--color-electric-blue)}`;
var OmniIcon = class extends OmniElement {
  constructor() {
    super(...arguments);
    this.ariaLabel = "icon";
    this.iconId = "";
    this.role = "img";
  }
  static get styles() {
    return [...super.styles, styles];
  }
  update(changedProperties) {
    super.update(changedProperties);
    if (changedProperties.has("iconId")) {
      this._updateIcon();
    }
  }
  /**@internal */
  _updateIcon(resolve = this.resolver ?? resolveOmniIconset) {
    const iconParts = (this.iconId || "").trim().split(":");
    const [collection, group, id] = iconParts;
    if (!this.iconId) {
      console.warn(`<omni-icon>: icon-id is not set`);
      return;
    }
    return resolve(group).then((res) => {
      const icon = res[id]();
      this.icon = icon;
      return { res, collection, group, id, icon };
    }).catch((error) => {
      console.error(`<omni-icon>: Error resolving icon-id ${this.iconId}`, error);
      this.icon = svg`?`;
      return error;
    }).finally(() => {
      this.requestUpdate();
    });
  }
  render() {
    return html`<div part="icon">${this.icon ?? ""}</div>`;
  }
};
__decorateClass([
  property({ type: String, attribute: "aria-label", reflect: true })
], OmniIcon.prototype, "ariaLabel", 2);
__decorateClass([
  property({ type: String, attribute: "icon-id", reflect: true })
], OmniIcon.prototype, "iconId", 2);
__decorateClass([
  property({ type: String, reflect: true })
], OmniIcon.prototype, "role", 2);
OmniElement.register("omni-icon", OmniIcon);

// node_modules/omni-ui/dist/component/omni-overlay/omni-overlay.js
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __decorateClass2 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc2(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp2(target, key, result);
  return result;
};
var _OmniOverlay = class _OmniOverlay2 extends OmniElement {
  _titleview() {
    const { pageX, pageY } = this.__event;
    const { style: style2 } = this.shadowRoot.querySelector('slot[name="title"]');
    style2.setProperty("top", `${pageY}px`);
    style2.setProperty("left", `${pageX}px`);
    this.requestUpdate();
  }
  _pointermove(event) {
    const [node] = OmniElement.pathfinder(event, "[title]");
    const { __title, istitle } = this;
    if (!node && !istitle)
      return;
    const title = node ? node.title : "";
    if (__title === title)
      return;
    this.__title = title;
    this.istitle = !!title.trim();
    this.__event = event;
    cancelAnimationFrame(this.__task);
    this.__task = requestAnimationFrame(() => {
      this._titleview();
    });
  }
  constructor() {
    super();
    this.addEventListener("click", this._click);
    this._overlay = this._overlay.bind(this);
    this._pointermove = this._pointermove.bind(this);
    this._resize = this._resize.bind(this);
    this._keystroke = this._keystroke.bind(this);
    this._focusout = this._focusout.bind(this);
  }
  _keystroke(event) {
    if (!this.attributes.length)
      return;
    const { code } = event;
    switch (code) {
      case "Tab":
        const { activeElement } = document;
        const contains = this.contains(activeElement);
        if (!contains) {
          event.preventDefault();
          this.focus();
        }
        break;
      case "Escape":
        this.close();
        break;
    }
  }
  _resize() {
    this.close(":not(omni-dialog)");
  }
  _focusout() {
    const contains = this.contains(document.activeElement);
    requestAnimationFrame(() => {
      const { activeElement } = document;
      const contains2 = this.contains(activeElement);
      if (!contains2) {
        this.focus();
      }
    });
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    self.removeEventListener("keydown", this._keystroke);
    self.removeEventListener("focusout", this._focusout);
    self.removeEventListener("overlay", this._overlay);
    this.close();
    self.removeEventListener("resize", this._resize);
  }
  connectedCallback() {
    super.connectedCallback();
    self.addEventListener("keydown", this._keystroke);
    self.addEventListener("focusout", this._focusout);
    self.addEventListener("overlay", this._overlay);
    self.addEventListener("resize", this._resize);
  }
  _overlay(event) {
    const { detail } = event;
    requestAnimationFrame(() => {
      const slot = detail.getAttribute("slot");
      if (!slot) {
        this._remove(detail);
        return;
      }
      this.shadowRoot.querySelector(`slot[name=${slot}]`).assignedNodes().forEach(this._remove, { except: detail });
      this.append(detail);
      detail.dispatchEvent(new CustomEvent("overlay-append", { detail }));
    });
  }
  _remove(node) {
    const { except, selector } = this;
    if (except && node === except || selector && !node.matches(selector)) {
      return;
    }
    node.remove();
    node.dispatchEvent(new CustomEvent("overlay-remove", { detail: node }));
  }
  ___contains(node) {
    return node.contains(this);
  }
  _click(event) {
    const { target } = event;
    const children = Array.from(this.children).filter(this.___contains, target);
    if (this.ismodal) {
      if (this.attributes.length > 1) {
        const [child] = children;
        if (children.length && !child.localName.includes("omni-dialog")) {
          return;
        }
        this.close(":not(omni-dialog)");
      }
    } else if (!children.length) {
      this.close();
    }
  }
  close(selector) {
    if (this._closing || !this.children.length)
      return;
    this._closing = true;
    requestAnimationFrame(() => {
      this._closing = false;
      Array.from(this.children).forEach(this._remove, { selector });
    });
  }
  createRenderRoot() {
    return this.attachShadow({
      mode: "open",
      delegatesFocus: true
    });
  }
  static blocking(on, node = document.documentElement) {
    const { style: style2 } = node;
    style2.setProperty("overflow", on ? "hidden" : "");
    return node;
  }
  static get tag() {
    return "omni-overlay";
  }
  static createOverlay() {
    const { document: document2 } = self;
    const { tag } = this;
    const symbol = Symbol.for(tag);
    const overlay = self[symbol] ?? document2.querySelector(tag) ?? document2.createElement(tag);
    self[symbol] = overlay;
    requestAnimationFrame(() => {
      document2.body.appendChild(overlay);
    });
    return overlay;
  }
  static get overlay() {
    const { tag } = this;
    const symbol = Symbol.for(tag);
    return self[symbol] ?? this.createOverlay();
  }
  render() {
    return html`
      <style>
        /* non-positioning styles are the responsibility of the form custom element */
        slot[name='form']::slotted(*) {
          position: fixed;
        }
        :host {
          display: block;
          contain: style;
          margin: 0;
          padding: 0;
          width: 100vw;
          height: 100vh;
          background-color: transparent;
          position: fixed;
          inset: 0;
          z-index: 9876543210;
          overflow: auto;
          --color-bg: transparent;
          box-sizing: border-box;
          pointer-events: none;
        }
        :host(:empty) {
          display: none;
        }
        :host(:is([blocked], [isform], [ismodal])) {
          pointer-events: auto;
          background-color: var(--color-bg);
          overscroll-behavior: contain;
        }

        slot[name='indicator'],
        slot[name='indicator']::slotted(*) {
        }

        slot[name='form'],
        slot[name='indicator'],
        slot[name='title'] {
          position: fixed;
          display: block;
        }
        slot[name='title'],
        slot[name='indicator'],
        slot[name='indicator']::slotted(*),
        slot[name='title']::slotted(*) {
          pointer-events: none;
        }
        slot[name='modal']::slotted(*) {
        }
      </style>
      <slot @slotchange=${this._slotchange} name="modal"></slot>
      <slot @slotchange=${this._slotchange} name="form"></slot>
      <slot @slotchange=${this._slotchange} name="indicator"></slot>
      <slot @slotchange=${this._slotchange} name="title">${this.__title ?? ""}</slot>
    `;
  }
  updated(changedProperties) {
    if (changedProperties.has("isform")) {
      _OmniOverlay2.blocking(this.isform);
    }
  }
  _slotchange(event) {
    const path = event.composedPath();
    const [slot] = path;
    const nodes = slot.assignedElements();
    const name = slot.getAttribute("name");
    const count = nodes.length;
    this[`is${name || void 0}`] = count !== 0;
    nodes.forEach(this._slotting, this);
  }
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _slotting(node, i) {
    if (this.contains(this.ownerDocument.activeElement))
      return;
    requestAnimationFrame(() => {
      this.focus();
    });
  }
};
__decorateClass2([
  property({ type: Boolean, reflect: true, attribute: "ismodal" })
], _OmniOverlay.prototype, "ismodal", 2);
__decorateClass2([
  property({ type: Boolean, reflect: true, attribute: "isform" })
], _OmniOverlay.prototype, "isform", 2);
__decorateClass2([
  property({ type: Boolean, reflect: true, attribute: "isindicator" })
], _OmniOverlay.prototype, "isindicator", 2);
__decorateClass2([
  property({ type: Boolean, reflect: true, attribute: "istitle" })
], _OmniOverlay.prototype, "istitle", 2);
__decorateClass2([
  property({ type: String })
], _OmniOverlay.prototype, "__title", 2);
var OmniOverlay = _OmniOverlay;
OmniOverlay.register("omni-overlay", OmniOverlay);

// node_modules/omni-ui/dist/component/omni-tooltip/omni-tooltip-overlay.js
var OmniTooltipOverlay = class extends OmniElement {
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  render() {
  }
  constructor() {
    super();
    this.attachShadow({ mode: "open" }).innerHTML = `
      <style>
        :host {
          contain: strict style;
          display: block;
          pointer-events:none;
          position:fixed;
          background-color:rgba(255, 255, 0, 0);
          top: var(--trigger-top, 0px);
          left: var(--trigger-left, 0px);
          --arrow-size: 8px;
          --tooltip-width: 2em;
          --tooltip-height: 2em;
          --trigger-width: 1em;
          --trigger-height: 1em;
          --tooltip-background-color: linear-gradient(to bottom, #2b3952, #142033 100%);
          --tooltip-text-color: white;
          width: var(--trigger-width, 1em);
          height: var(--trigger-height, 1em);
        }
        :host([disabled]) [tooltip]:focus-visible {
          outline: none;
          pointer-events: none;
        }

        @keyframes fade-in {
          0% {
            opacity: 0;
          }
          50% {
            opacity: 0;
          }
          100% {
            opacity: 1;
          }
        }

        [intersect] {
          --width: min(var(--tooltip-width), var(--trigger-width));
          --height: min(var(--tooltip-height), var(--trigger-height));
          --width: var(--tooltip-width);
          --height: var(--tooltip-height);
          position: absolute;
          top: calc(50% - var(--height, 0px) / 2);
          left: calc(50% - var(--width, 0px) / 2);
          background-color: rgba(0, 255, 255, 0);
          display: block;
          width: var(--width,1vw);
          height: var(--height,1vh);
          pointer-events: none;
        }
        [intersect]:where([area=left], [area=right]) {
          width: 48vw;
          left: calc(50% - 48vw);
        }
        [intersect]:where([area=right]){
          left: calc(50%);
          background-color: rgba(0, 0, 255, 0);
        }
        [intersect]:where([area=top], [area=bottom]) {
          height: 48vh;
          top: calc(50% - 48.5vh);
          background-color: rgba(200, 255, 0, 0);
        }
        [intersect]:where([area=bottom]) {
          top: calc(50% - 0.5vh);
          background-color: rgba(0, 255, 0, 0);
        }

        [tooltip] {
          box-sizing: border-box;
          min-width: 2em;
          min-height: 2em;
          max-width: 40em;
          max-height: 40em;
          position: fixed;
          animation: 400ms ease-in 1 fade-in;
          background: var(--tooltip-background-color);
          border-radius: 8px;
          color: var(--tooltip-text-color);
          padding: 7px 15px;
          font-size: 12px;
          font-weight: 600;
          text-align: left;
          pointer-events: none;
          overflow-wrap: break-word;
          --offset-top: calc((var(--trigger-height) - var(--tooltip-height)) / 2);
          --offset-left: calc((var(--trigger-width) - var(--tooltip-width)) / 2);
        }

        :host(.is-light) [tooltip] {
          background: white;
          color: var(--color-almost-black);
        }
        :host([tip-flip='top']) [tooltip],
        :host([tip-flip='bottom']) [tooltip],
        :host([place='bottom']:not([tip-flip])) [tooltip],
        :host([place='top']:not([tip-flip])) [tooltip] {
          left: calc(var(--trigger-left) + var(--offset-left));
          top: calc(var(--trigger-top, 0px) - var(--tooltip-height, 0px) - var(--arrow-size));
        }
        :host([tip-flip='bottom']) [tooltip],
        :host([place='bottom']:not([tip-flip])) [tooltip] {
          top: calc(var(--trigger-top, 0px) + var(--trigger-height, 0px) + var(--arrow-size));
        }
        :host(:where([tip-flip='right'], [tip-flip="left"])) [tooltip],
        :host([place='right']:not([tip-flip])) [tooltip],
        :host([place='left']:not([tip-flip])) [tooltip] {
          left: calc(var(--trigger-left, 0px) - var(--tooltip-width, 0px) - var(--arrow-size));
          top: calc(var(--trigger-top, 0px) + var(--offset-top, 0px));
        }
        :host([tip-flip='right']) [tooltip],
        :host([place='right']:not([tip-flip])) [tooltip] {
          left: calc(var(--trigger-left, 0px) + var(--trigger-width, 0px) + var(--arrow-size));
        }

        #arrow {
          position: absolute;
          width: var(--arrow-size, 8px);
          height: var(--arrow-size, 8px);
          z-index: -1;
          content: '';
          transform: rotate(45deg);
          background: inherit;
        }

        :host(:where([tip-flip='top'], [tip-flip='bottom'])) #arrow,
        :host(:where([place='top'], [place='bottom']):not([tip-flip])) #arrow {
          left: calc(50% - 4px);
          bottom: -4px;
          top: auto;
        }
        :host(:where([tip-flip='bottom'])) #arrow,
        :host([place='bottom']:not([tip-flip])) #arrow {
          bottom: auto;
          top: -4px;
        }
        :host(:is([tip-flip="left"], [tip-flip="right"])) #arrow,
        :host(:is([place='left'], [place='right']):not([tip-flip])) #arrow {
          top: calc(50% - 4px);
          left: auto;
          right: -4px;
        }
        :host([tip-flip='right']) #arrow,
        :host([place='right']:not([tip-flip])) #arrow {
          right: auto;
          left: -4px;
        }
      </style>
      <div intersect area=top> </div>
      <div intersect area=right> </div>
      <div intersect area=bottom> </div>
      <div intersect area=left> </div>
      <div tooltip part="tooltip">
        <slot name="content">...</slot>
        <div id="arrow" part="arrow"></div>
      </div>
    `;
    this.tooltip = this.shadowRoot.querySelector("[tooltip]");
    this.intersect = this.shadowRoot.querySelectorAll("[intersect]");
    this._resizeObserver = new ResizeObserver((...args) => {
      cancelAnimationFrame(this.__resized);
      this.__resized = requestAnimationFrame(() => {
        this._resize(...args);
      });
    });
    this._intersectObserver = new IntersectionObserver(
      (...args) => {
        this._intersect(...args);
      },
      { root: null, rootMargin: `0px`, threshold: 1 }
    );
    this._area = { top: 1, right: 1, bottom: 1, left: 1 };
    this._arealist = Object.keys(this._area);
  }
  connectedCallback() {
    super.connectedCallback();
    const { tooltip, intersect, _resizeObserver: _resizeObserver2, _intersectObserver } = this;
    _resizeObserver2.observe(tooltip);
    if (this.noflip)
      return;
    _intersectObserver.observe(tooltip);
    intersect.forEach((node) => _intersectObserver.observe(node));
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeAttribute("tip-flip");
    this._resizeObserver.disconnect();
    this._intersectObserver.disconnect();
  }
  _reposition(intersectionRatio) {
    const { place, _area } = this;
    const min = 0.99;
    if (intersectionRatio < 1) {
      const { _arealist } = this;
      const flippedinto = this.getAttribute("tip-flip");
      const index = _arealist.indexOf(flippedinto || place);
      let position;
      let i = index + 2;
      let available;
      if (i >= _arealist.length) {
        i -= _arealist.length;
      }
      available = _area[_arealist[i]];
      if (available > min) {
        position = _arealist[i];
      }
      i = index + 1;
      const race = [];
      while (!position) {
        const note = { i, index };
        race.push(note);
        if (i === index || race.length > 12) {
          position = place;
          break;
        } else if (i >= _arealist.length) {
          note.loop = "i=0";
          i = 0;
        }
        available = _area[_arealist[i]];
        if (available > min) {
          position = _arealist[i];
          break;
        }
        i += 1;
      }
      if (race.length > 4) {
        console.warn(`
          👇 please send to omni-ui:

            url: ${location.href}
            user-agent: "${navigator.userAgent}"
            log>>
              ${JSON.stringify(race)}
            <<
            html: ${this.outerHTML}

          ☝️ please send to omni-ui.
        `);
      }
      if (position === place) {
        this.removeAttribute("tip-flip");
      } else {
        this.setAttribute("tip-flip", position);
      }
    } else {
      if (_area[place] > min) {
        this.removeAttribute("tip-flip");
      }
    }
  }
  _intersectItem(entry) {
    const { target, intersectionRatio } = entry;
    const { _area } = this;
    if (target.matches("[tooltip]")) {
      this._intersectObserver.disconnect();
      cancelAnimationFrame(this.__repositioning);
      this.__repositioning = requestAnimationFrame(() => {
        this._reposition(intersectionRatio);
      });
    } else if (target.matches("[intersect]")) {
      const area = target.getAttribute("area");
      _area[area] = intersectionRatio;
    }
  }
  get place() {
    return this.getAttribute("place");
  }
  set place(place) {
    const value = this._area[place] !== void 0 ? place : "top";
    this.setAttribute("place", value);
  }
  _intersect(entries2) {
    cancelAnimationFrame(this.__intersecting);
    this.__intersecting = requestAnimationFrame(() => {
      entries2.forEach(this._intersectItem, this);
    });
  }
  _resize(entries2) {
    cancelAnimationFrame(this.__resizing);
    this.__resizing = requestAnimationFrame(() => {
      entries2.forEach(this._resizedItem, this);
    });
  }
  _resizedItem(entry) {
    const { target, borderBoxSize } = entry;
    const { inlineSize, blockSize, width, height } = (borderBoxSize == null ? void 0 : borderBoxSize[0]) ?? target.getBoundingClientRect();
    const w = inlineSize ?? width;
    const h = blockSize ?? height;
    if (!w || !h)
      return;
    const { style: style2 } = this;
    style2.setProperty("--tooltip-width", `${Math.round(w)}px`);
    style2.setProperty("--tooltip-height", `${Math.round(h)}px`);
  }
};
OmniElement.register("omni-tooltip-overlay", OmniTooltipOverlay);

// node_modules/omni-ui/dist/component/omni-tooltip/omni-tooltip.js
var __defProp3 = Object.defineProperty;
var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
var __decorateClass3 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc3(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp3(target, key, result);
  return result;
};
var styles2 = css`:host{display:inline-block;contain:strict style}slot[name=invoker]::slotted([disabled]){pointer-events:none}[tooltip],slot[name=content],slot[name=content]::slotted(*){display:none}`;
var _a4, _count, _observer, _mutationConfig, _mutation;
var _OmniTooltip = (_a4 = class extends OmniElement {
  constructor() {
    super();
    __privateAdd(this, _observer, void 0);
    __privateAdd(this, _mutationConfig, void 0);
    __privateAdd(this, _mutation, void 0);
    this.__id = `_tooltip${_a4.count}_`;
    __privateSet(this, _mutationConfig, { attributes: true, childList: true, subtree: true });
    this.showOnDisabled = false;
    this.relateby = "describe";
    this.place = "top";
    __privateSet(this, _mutation, (mutationList) => {
      mutationList.forEach((m) => {
        if (m.type === "attributes") {
          const target = m.target;
          if (m.attributeName === "disabled" && target.slot === "invoker") {
            this.disabled = target.disabled;
          }
        }
      });
    });
    this.attachShadow({ mode: "open" }).innerHTML = `
			<slot name="invoker"></slot>
			<slot name="content"></slot>
			<omni-tooltip-overlay slot="indicator" tooltip></omni-tooltip-overlay>
		`;
    const { shadowRoot } = this;
    this.tooltip = shadowRoot.querySelector("[tooltip]");
    this.tooltip.origin = this;
    this.content = shadowRoot.querySelector('slot[name="content"]');
    this.invoker = shadowRoot.querySelector('slot[name="invoker"]');
    shadowRoot.querySelectorAll("slot").forEach((node) => node.addEventListener("slotchange", this._slotchange.bind(this)));
    this._show = this._show.bind(this);
    this._hide = this._hide.bind(this);
    this.tooltip.remove();
    this.tooltip.addEventListener("overlay-remove", this._hide);
    this.addEventListener("mouseenter", this._show);
    this.addEventListener("focusin", this._show);
    this.addEventListener("mouseleave", this._hide);
    this.addEventListener("click", this._hide);
    this.addEventListener("focusout", this._hide);
  }
  static get styles() {
    return [...super.styles, styles2];
  }
  static get count() {
    const count = __privateGet(this, _count) ?? 0;
    __privateSet(this, _count, count + 1);
    return __privateGet(this, _count);
  }
  connectedCallback() {
    super.connectedCallback();
    OmniOverlay.overlay;
    const invoker = this.invoker.assignedElements()[0];
    if (invoker) {
      __privateSet(this, _observer, new MutationObserver(__privateGet(this, _mutation)));
      __privateGet(this, _observer).observe(invoker, __privateGet(this, _mutationConfig));
    }
    if (this.open) {
      requestAnimationFrame(() => {
        this._show();
      });
    }
  }
  disconnectedCallback() {
    var _a7;
    super.disconnectedCallback();
    this._hide();
    if (__privateGet(this, _observer)) {
      (_a7 = __privateGet(this, _observer)) == null ? void 0 : _a7.disconnect();
    }
  }
  get noflip() {
    return this.hasAttribute("noflip");
  }
  set noflip(flag) {
    flag ? this.setAttribute("noflip", "") : this.removeAttribute("noflip");
  }
  _show() {
    if (this.disabled && !this.showOnDisabled)
      return;
    this.open = true;
  }
  _hide() {
    var _a7;
    this.open = false;
    (_a7 = this.event) == null ? void 0 : _a7.stopImmediatePropagation();
    requestAnimationFrame(() => {
      this.tooltip.remove();
      Array.from(this.tooltip.children).forEach((node) => this.appendChild(node));
    });
  }
  _attr(node, attr = "attr", value = "") {
    if (!node.hasAttribute(attr)) {
      node.setAttribute(attr, value);
    }
  }
  fakePromise() {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(true);
      }, 0);
    });
  }
  isContentEmpty() {
    if (!this.content.assignedElements().length) {
      this._hide();
      return true;
    } else {
      let checkInnerContentText = false;
      this.content.assignedElements().forEach((node) => {
        const _node = node;
        if (_node.innerText.trim())
          checkInnerContentText = true;
      });
      if (!checkInnerContentText) {
        this._hide();
        return true;
      }
      return false;
    }
  }
  async updated(changedProperties) {
    const styles29 = getComputedStyle(this);
    if (changedProperties.has("disabled") || changedProperties.has("showOnDisabled")) {
      this._hide();
    } else if (changedProperties.has("open")) {
      const eventListenerOptions = { capture: true, once: true };
      const { open } = this;
      if (open) {
        const { tooltip, className } = this;
        tooltip.className = className;
        tooltip.noflip = this.noflip;
        if (this.isContentEmpty())
          return;
        await this.fakePromise();
        this.content.assignedElements().forEach((node) => tooltip.appendChild(node));
        const { width, height, x, y } = this.getBoundingClientRect();
        const { style: style2 } = tooltip;
        style2.setProperty("--trigger-width", `${Math.round(width)}px`);
        style2.setProperty("--trigger-height", `${Math.round(height)}px`);
        style2.setProperty("--trigger-top", `${Math.round(y)}px`);
        style2.setProperty("--trigger-left", `${Math.round(x)}px`);
        style2.setProperty("--tooltip-background-color", styles29.getPropertyValue("--tooltip-background-color"));
        style2.setProperty("--tooltip-text-color", styles29.getPropertyValue("--tooltip-text-color"));
        this.event = new CustomEvent("overlay", {
          detail: this.tooltip,
          bubbles: true,
          composed: true
        });
        this.dispatchEvent(this.event);
        self.addEventListener("mousewheel", this._hide, eventListenerOptions);
        self.addEventListener("keydown", this._hide, eventListenerOptions);
        this.tooltip.setAttribute("place", this.place);
      } else {
        self.removeEventListener("mousewheel", this._hide, eventListenerOptions);
        self.removeEventListener("keydown", this._hide, eventListenerOptions);
        this._hide();
      }
    } else if (changedProperties.has("place")) {
      this.tooltip.setAttribute("place", this.place);
    }
  }
  _slotchange({ target }) {
    const nodes = target.assignedElements();
    const [firstElement] = nodes;
    if (!firstElement)
      return;
    switch (target.name) {
      case "invoker":
        if (firstElement.disabled) {
          this.disabled = true;
        }
        this._attr(firstElement, this.relateby.includes("label") ? "aria-labelledby" : "aria-describedby", this.__id);
        break;
      case "content":
        this._attr(firstElement, "role", "tooltip");
        this._attr(firstElement, "id", this.__id);
        this.requestUpdate();
        break;
    }
  }
}, _count = new WeakMap(), _observer = new WeakMap(), _mutationConfig = new WeakMap(), _mutation = new WeakMap(), __privateAdd(_a4, _count, void 0), _a4);
__decorateClass3([
  property({ type: Boolean, reflect: true })
], _OmniTooltip.prototype, "open", 2);
__decorateClass3([
  property({ type: Boolean, reflect: true })
], _OmniTooltip.prototype, "disabled", 2);
__decorateClass3([
  property({ type: Boolean, reflect: true, attribute: "show-on-disabled" })
], _OmniTooltip.prototype, "showOnDisabled", 2);
__decorateClass3([
  property({ type: String })
], _OmniTooltip.prototype, "relateby", 2);
__decorateClass3([
  property({ type: String, reflect: true })
], _OmniTooltip.prototype, "place", 2);
var OmniTooltip = _OmniTooltip;
OmniElement.register("omni-tooltip", OmniTooltip);

// node_modules/omni-ui/dist/component/omni-toolbar/omni-toolbar.js
var __defProp4 = Object.defineProperty;
var __getOwnPropDesc4 = Object.getOwnPropertyDescriptor;
var __decorateClass4 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc4(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp4(target, key, result);
  return result;
};
var styles3 = css`:host([nested]) .positioned-wrapper{position:unset}.positioned-wrapper{position:relative;height:100%}.bar{height:100%;display:flex;align-items:center}#toolbar{padding:6px 12px;overflow:hidden;min-height:2.1428571429rem}#center{flex-shrink:50;flex-basis:60%}#center-end{flex-shrink:500;margin-left:auto}#center-end,#end{justify-content:flex-end}.more{position:absolute !important}.more[hidden]{display:none !important}.more .dropdown-menu{left:unset;right:0}.more-menu-slot::slotted([hidden]){display:none !important}.more,.bar>slot::slotted(*){white-space:nowrap;margin:0 calc(var(--omni-toolbar-gap, 12px)/2) !important}[name=start]::slotted(:first-child){margin-left:0 !important}[name=end]::slotted(:last-child){margin-right:0 !important}[name=start]::slotted(.title){margin-right:var(--omni-toolbar-gap, 12px) !important}`;
var OmniToolbar = class extends OmniElement {
  constructor() {
    super();
    this.centerMoreBtnClassMapOverride = {};
    this.__moreBars = /* @__PURE__ */ new Map();
    this.closeMoreItemDropMenus = this.closeMoreItemDropMenus.bind(this);
    this.closeMoreItemDropMenus();
  }
  static get styles() {
    return [...super.styles, styles3];
  }
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this.closeMoreItemDropMenus);
  }
  disconnectedCallback() {
    this.__moreBars.forEach((moreBar) => moreBar.destroy());
    this.__moreBars = /* @__PURE__ */ new Map();
    window.removeEventListener("click", this.closeMoreItemDropMenus);
    super.disconnectedCallback();
  }
  renderMoreItemTmpl(barSectionType) {
    const openPropName = `is${pascalize(barSectionType)}MoreMenuOpen`;
    return html`
      <div
        class=${classMap({
      dropdown: true,
      more: true,
      "is-active": this[openPropName]
    })}
        part="${barSectionType}-more"
        hidden>
        <div class="dropdown-trigger">
          <omni-tooltip relateby="label" place="${this.placement || "top"}">
            <button
              slot="invoker"
              class=${classMap(
      merge(
        {
          button: true,
          "is-text": true,
          "more-item-btn": true,
          "is-active": this[openPropName]
        },
        this[`${barSectionType}MoreBtnClassMapOverride`]
      )
    )}
              part="${barSectionType}-more-btn"
              aria-haspopup="true"
              aria-controls="${barSectionType}-dropdown-menu"
              value=${openPropName}>
              <omni-icon icon-id="omni:interactive:${barSectionType === "center-end" ? "actions" : "more"}"></omni-icon>
            </button>
            <div slot="content">More</div>
          </omni-tooltip>
        </div>
        <div class="dropdown-menu" id="${barSectionType}-dropdown-menu" role="menu">
          <div class="dropdown-content" part="${barSectionType}-more-dropdown-content">
            <slot class="more-menu-slot" name="${barSectionType}-more-menu"></slot>
          </div>
        </div>
      </div>
    `;
  }
  render() {
    return html`
      <omni-style class="positioned-wrapper" part="positioned-wrapper">
        <div
          id="toolbar"
          part="toolbar"
          class="bar"
          @slotchange=${this.__onSlotChange}
          @morebar-item-update=${this.__onMoreBarItemUpdate}
          @click=${this.__onClick}>
          <div id="start" part="start" class="bar">
            <slot name="start" part="start-slot"></slot>
            ${this.renderMoreItemTmpl("start")}
          </div>
          <div id="center" part="center" class="bar">
            <slot part="slot"></slot>
            ${this.renderMoreItemTmpl("center")}
          </div>
          <div id="center-end" part="center-end" class="bar">
            ${this.renderMoreItemTmpl("center-end")}
            <slot name="center-end" part="center-end-slot"></slot>
          </div>
          <div id="end" part="end" class="bar">
            ${this.renderMoreItemTmpl("end")}
            <slot name="end" part="end-slot"></slot>
          </div>
        </div>
      </omni-style>
    `;
  }
  closeMoreItemDropMenus() {
    this.isStartMoreMenuOpen = false;
    this.isCenterMoreMenuOpen = false;
    this.isCenterEndMoreMenuOpen = false;
    this.isEndMoreMenuOpen = false;
  }
  __onSlotChange(e) {
    const slot = e.target;
    const barSection = slot.closest(".bar");
    if (!barSection)
      return;
    const isMoreEnabled = isMoreEnabledForBar(barSection);
    const isJustifyEnd = barSection.matches("#end, #center-end");
    let moreBar = this.__moreBars.get(barSection);
    const more = barSection.querySelector(".more");
    if (more)
      more.hidden = !isMoreEnabled;
    if (moreBar && isMoreEnabled) {
      moreBar.init();
    } else if (moreBar && !isMoreEnabled) {
      moreBar.destroy();
      this.__moreBars.delete(barSection);
    } else if (!moreBar && isMoreEnabled) {
      moreBar = new MoreBar(barSection, more, isJustifyEnd);
      setTimeout(() => moreBar.init());
      this.__moreBars.set(barSection, moreBar);
    }
  }
  __onMoreBarItemUpdate({ detail }) {
    this.closeMoreItemDropMenus();
    const moreItems = getMoreItems(detail.moreBar.barEl);
    if (!(moreItems == null ? void 0 : moreItems.length))
      return;
    const relatedMoreItem = moreItems[detail.index];
    if (!relatedMoreItem)
      return;
    relatedMoreItem.hidden = detail.type === "show";
    this.dispatchNewEvent("omni-toolbar-change", {
      detail: {
        part: detail.moreBar.barEl.getAttribute("part"),
        item: detail.item,
        index: detail.index,
        type: detail.type
      }
    });
  }
  __onClick(e) {
    const moreItemBtn = eventPathFindTargetMatch(e, ".more-item-btn");
    if (moreItemBtn) {
      const isOpen = this[moreItemBtn.value];
      setTimeout(() => {
        this[moreItemBtn.value] = !isOpen;
      });
    }
    if (eventPathFindTargetMatch(e, ".dropdown-item"))
      return;
    if (eventPathFindTargetMatch(e, ".more .dropdown-menu"))
      e.stopPropagation();
  }
};
__decorateClass4([
  state()
], OmniToolbar.prototype, "__moreBars", 2);
__decorateClass4([
  property({ type: Boolean })
], OmniToolbar.prototype, "isStartMoreMenuOpen", 2);
__decorateClass4([
  property({ type: Boolean })
], OmniToolbar.prototype, "isCenterMoreMenuOpen", 2);
__decorateClass4([
  property({ type: Boolean })
], OmniToolbar.prototype, "isCenterEndMoreMenuOpen", 2);
__decorateClass4([
  property({ type: Boolean })
], OmniToolbar.prototype, "isEndMoreMenuOpen", 2);
__decorateClass4([
  property({ type: Object, attribute: false })
], OmniToolbar.prototype, "centerMoreBtnClassMapOverride", 2);
__decorateClass4([
  property()
], OmniToolbar.prototype, "placement", 2);
function getMoreItems(bar) {
  var _a7;
  return (_a7 = bar == null ? void 0 : bar.querySelector(".more-menu-slot")) == null ? void 0 : _a7.assignedElements().filter(
    (el) => !el.matches("[menu-only]")
  );
}
function isMoreEnabledForBar(bar) {
  var _a7;
  return ((_a7 = getMoreItems(bar)) == null ? void 0 : _a7.length) > 0;
}
function eventPathFindTargetMatch(event, selector) {
  return event.composedPath().find((target) => {
    var _a7;
    return (_a7 = target.matches) == null ? void 0 : _a7.call(target, selector);
  });
}
function pascalize(str) {
  return ` ${str}`.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
}
OmniElement.register("omni-toolbar", OmniToolbar);

// node_modules/omni-ui/dist/component/omni-app-layout/omni-app-layout.js
var __defProp5 = Object.defineProperty;
var __getOwnPropDesc5 = Object.getOwnPropertyDescriptor;
var __decorateClass5 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc5(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp5(target, key, result);
  return result;
};
var styles4 = css`#grid{display:grid;grid-template-rows:var(--omni-app-layout-header-height, 3.5714285714rem) 1fr;grid-template-columns:var(--omni-app-layout-drawer-closed-width, 5.3571428571rem) calc(var(--omni-app-layout-drawer-width, 21.4285714286rem) - var(--omni-app-layout-drawer-closed-width, 5.3571428571rem)) 1fr var(--omni-app-layout-end-drawer-width, 21.4285714286rem);width:-moz-fit-content;width:fit-content}#header{grid-row:1;grid-column:1/-1;position:sticky;top:var(--omni-app-layout-top, 0rem);left:var(--omni-app-layout-left, 0rem);width:calc(var(--vw, 1vw)*100 - var(--omni-app-layout-left, 0rem));z-index:var(--omni-app-layout-header-z-index, 36);background:var(--omni-app-layout-header-bg, var(--omni-app-layout-header-bg-color, #fff));box-shadow:0 0.0714285714rem var(--color-pale-grey-two)}slot[name=header]::slotted(*){height:100%}#drawer,#end-drawer{grid-row:2;position:sticky;top:calc(var(--omni-app-layout-top, 0rem) + var(--omni-app-layout-header-height, 3.5714285714rem));height:calc(var(--omni-app-layout-height, calc(var(--vh, 1vh) * 100 - var(--omni-app-layout-top, 0rem))) - var(--omni-app-layout-header-height, 3.5714285714rem));overflow-y:auto;overflow-x:hidden;box-shadow:0 0.7142857143rem 4.2857142857rem -0.3571428571rem rgba(1,33,78,.08)}#drawer{left:var(--omni-app-layout-left, 0rem);background:var(--omni-app-layout-drawer-bg, var(--omni-app-layout-drawer-bg-color, var(--gradient-black)));z-index:var(--omni-app-layout-drawer-z-index, 32)}#end-drawer{right:0;grid-column:4;background:var(--omni-app-layout-end-drawer-bg, var(--omni-app-layout-end-drawer-bg-color, #fff));z-index:var(--omni-app-layout-end-drawer-z-index, 34)}#content{width:100%;grid-row:2;background:var(--omni-app-layout-bg, var(--omni-app-layout-bg-color, #f1f5fa))}:host(:not([draweropen])) #drawer{grid-column:1}:host([draweropen]) #drawer{grid-column:1/span 2}:host(:not([draweropen])) #content{grid-column:2/span 3}:host([draweropen]) #content{grid-column:3/span 2}:host(:not([enddraweropen])) #end-drawer{position:relative;top:0;right:calc(-1*var(--omni-app-layout-end-drawer-width, 21.4285714286rem) - 0.0714285714rem);width:0}:host([enddraweropen]) #end-drawer{width:auto}:host(.drawer-closing) #drawer{grid-column:1/span 2 !important}:host(.end-drawer-opening),:host(.end-drawer-closing){overflow:hidden}:host(.end-drawer-closing) #end-drawer{width:auto !important}:host(.drawer-opening) #content{min-width:calc(100% + var(--omni-app-layout-drawer-width, 21.4285714286rem) - var(--omni-app-layout-drawer-closed-width, 5.3571428571rem)) !important}:host(.drawer-opening) #content,:host(.drawer-closing) #content{z-index:calc(1 + var(--omni-app-layout-drawer-z-index, 32))}:host(.parent-drawer-opening) #end-drawer,:host(.parent-drawer-closing) #end-drawer{right:unset !important}`;
function flipAnimateX(target, first, last) {
  const deltaX = first.left - last.left;
  return target.animate([{ transform: `translateX(${deltaX}px)` }, { transform: "unset" }], {
    duration: 300,
    easing: "ease-in-out"
  });
}
var _OmniAppLayout = class _OmniAppLayout2 extends OmniElement {
  constructor() {
    super(...arguments);
    this.drawerOpen = false;
    this.endDrawerOpen = false;
  }
  static get styles() {
    return [...super.styles, styles4];
  }
  static computeViewportDims() {
    const vh = window.innerHeight * 0.01;
    const vw = window.innerWidth * 0.01;
    document.documentElement.style.setProperty("--vh", `${vh}px`);
    document.documentElement.style.setProperty("--vw", `${vw}px`);
  }
  connectedCallback() {
    super.connectedCallback();
    window.removeEventListener("resize", _OmniAppLayout2.computeViewportDims);
    window.addEventListener("resize", _OmniAppLayout2.computeViewportDims);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    window.removeEventListener("resize", _OmniAppLayout2.computeViewportDims);
  }
  firstUpdated() {
    document.body.style.margin = "0px";
    _OmniAppLayout2.computeViewportDims();
    this._grid = this.shadowRoot.getElementById("grid");
    this._content = this.shadowRoot.getElementById("content");
    this._endDrawer = this.shadowRoot.getElementById("end-drawer");
  }
  update(changedProps) {
    if (changedProps.has("drawerOpen") && changedProps.get("drawerOpen") != null) {
      const first = this._content.getBoundingClientRect();
      super.update(changedProps);
      const last = this._content.getBoundingClientRect();
      const nestedLayout = this.querySelector("omni-app-layout");
      this.classList.add(`drawer-${this.drawerOpen ? "opening" : "closing"}`);
      if (nestedLayout) {
        nestedLayout.classList.add(`parent-drawer-${this.drawerOpen ? "opening" : "closing"}`);
      }
      window.scrollTo({ left: 0 });
      flipAnimateX(this._content, first, last).addEventListener(
        "finish",
        () => {
          this.classList.remove("drawer-opening", "drawer-closing");
          if (nestedLayout)
            nestedLayout.classList.remove("parent-drawer-opening", "parent-drawer-closing");
        },
        { once: true }
      );
    } else if (changedProps.has("endDrawerOpen") && changedProps.get("endDrawerOpen") != null) {
      const first = this._endDrawer.getBoundingClientRect();
      super.update(changedProps);
      const last = this._endDrawer.getBoundingClientRect();
      const nestedLayout = this.querySelector("omni-app-layout");
      this.classList.add(`end-drawer-${this.endDrawerOpen ? "opening" : "closing"}`);
      if (nestedLayout) {
        nestedLayout.classList.add(`parent-end-drawer-${this.endDrawerOpen ? "opening" : "closing"}`);
      }
      flipAnimateX(this._endDrawer, first, last).addEventListener(
        "finish",
        () => {
          this.classList.remove("end-drawer-opening", "end-drawer-closing");
          if (nestedLayout)
            nestedLayout.classList.remove("parent-end-drawer-opening", "parent-end-drawer-closing");
        },
        { once: true }
      );
    } else {
      super.update(changedProps);
    }
  }
  render() {
    return html`
      <omni-style>
        <div id="grid" part="grid">
          <div id="header" part="header"><slot name="header"></slot></div>
          <div id="drawer" part="drawer"><slot name="drawer"></slot></div>
          <div id="content" part="content"><slot></slot></div>
          <div id="end-drawer" part="end-drawer"><slot name="end-drawer"></slot></div>
        </div>
        <!-- <div id=scrim part="scrim"></div> -->
        <!-- <div id=dialog part="dialog"><slot name=dialog></slot></div> -->
      </omni-style>
    `;
  }
};
__decorateClass5([
  state()
], _OmniAppLayout.prototype, "_grid", 2);
__decorateClass5([
  state()
], _OmniAppLayout.prototype, "_content", 2);
__decorateClass5([
  state()
], _OmniAppLayout.prototype, "_endDrawer", 2);
__decorateClass5([
  property({ type: Boolean, reflect: true })
], _OmniAppLayout.prototype, "drawerOpen", 2);
__decorateClass5([
  property({ type: Boolean, reflect: true })
], _OmniAppLayout.prototype, "endDrawerOpen", 2);
var OmniAppLayout = _OmniAppLayout;
OmniElement.register("omni-app-layout", OmniAppLayout);

// node_modules/omni-ui/dist/component/omni-card-grid/omni-card-grid.js
var OmniCardGrid = class extends OmniElement {
  static get styles() {
    return [
      ...super.styles,
      css`
        :host {
          --omni-card-min-width: auto;
          --omni-card-max-width: auto;
        }
        slot {
          display: grid;
          grid-template-columns: repeat(
            auto-fill,
            minmax(var(--omni-card-grid-col-min, 200px), var(--omni-card-grid-col-max, 1fr))
          );
          grid-gap: var(--omni-card-grid-gap, 24px);
        }
      `
    ];
  }
  render() {
    return html` <slot></slot> `;
  }
};
OmniElement.register("omni-card-grid", OmniCardGrid);

// node_modules/omni-ui/dist/context-consumer.js
var providerSymbol = Symbol("provider");
var contextSymbol = Symbol("context");
var EVENT_TYPE = "context-provider";
var getProvider = async (identifier, context) => {
  const eventInit = { bubbles: true, composed: true, detail: { identifier } };
  const event = new CustomEvent(EVENT_TYPE, eventInit);
  context.dispatchEvent(event);
  if (!event.detail.provider) {
    await new Promise((res) => setTimeout(res, 0));
    context.dispatchEvent(event);
  }
  return event.detail.provider;
};
var contextConsumerMixin = (SuperClass) => class Consumer extends SuperClass {
  constructor() {
    super();
    this.onContextChanged = this.onContextChanged.bind(this);
  }
  get context() {
    if (this[providerSymbol]) {
      return this[providerSymbol].value;
    }
    return void 0;
  }
  async _discoverContextProvider() {
    this._forgetContextProvider();
    this[providerSymbol] = await getProvider(contextSymbol, this);
    if (this[providerSymbol]) {
      this[providerSymbol].addEventListener("context-changed", this.onContextChanged);
    }
    if (this.context !== void 0) {
      this.onContextChanged(new Event("context-changed"));
    }
  }
  _forgetContextProvider() {
    if (this[providerSymbol]) {
      this[providerSymbol].removeEventListener("context-changed", this.onContextChanged);
    }
    this[providerSymbol] = null;
  }
  connectedCallback() {
    if (super.connectedCallback) {
      super.connectedCallback();
    }
    this._discoverContextProvider();
  }
  disconnectedCallback() {
    this._forgetContextProvider();
    if (super.disconnectedCallback) {
      super.disconnectedCallback();
    }
  }
  /**
   * Callback executed when the nearest Provider changes its `value` property.
   */
  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function
  onContextChanged() {
  }
};

// node_modules/omni-ui/dist/context-provider.js
var store = /* @__PURE__ */ new WeakMap();
var createProvider = (initialValue2, identifier) => class Provider extends HTMLElement {
  constructor() {
    super();
    this.value = initialValue2;
    this[providerSymbol] = identifier;
    this.onGetProvider = this.onGetProvider.bind(this);
  }
  set value(value) {
    if (this.value !== value) {
      store.set(this, value);
      this.dispatchEvent(new Event("context-changed"));
    }
  }
  get value() {
    return store.get(this);
  }
  connectedCallback() {
    if (super.connectedCallback) {
      super.connectedCallback();
    }
    this.addEventListener(EVENT_TYPE, this.onGetProvider);
  }
  disconnectedCallback() {
    this.removeEventListener(EVENT_TYPE, this.onGetProvider);
    if (super.disconnectedCallback) {
      super.disconnectedCallback();
    }
  }
  onGetProvider(e) {
    var _a7;
    if (!((_a7 = e.detail) == null ? void 0 : _a7.identifier))
      return;
    if (this[providerSymbol] !== e.detail.identifier)
      return;
    e.stopPropagation();
    e.detail.provider = this;
  }
};
var createContextProvider = (initialValue2) => createProvider(initialValue2, contextSymbol);

// node_modules/omni-ui/dist/component/omni-context-provider/omni-context-provider.js
var OmniContextProvider = createContextProvider();
OmniContextProvider.register = OmniElement.register;
OmniElement.register("omni-context-provider", OmniContextProvider);

// node_modules/element-internals-polyfill/dist/index.js
(function(exports) {
  "use strict";
  const refMap = /* @__PURE__ */ new WeakMap();
  const validityMap = /* @__PURE__ */ new WeakMap();
  const hiddenInputMap = /* @__PURE__ */ new WeakMap();
  const internalsMap = /* @__PURE__ */ new WeakMap();
  const validationMessageMap = /* @__PURE__ */ new WeakMap();
  const formsMap = /* @__PURE__ */ new WeakMap();
  const shadowHostsMap = /* @__PURE__ */ new WeakMap();
  const formElementsMap = /* @__PURE__ */ new WeakMap();
  const refValueMap = /* @__PURE__ */ new WeakMap();
  const upgradeMap = /* @__PURE__ */ new WeakMap();
  const shadowRootMap = /* @__PURE__ */ new WeakMap();
  const validationAnchorMap = /* @__PURE__ */ new WeakMap();
  const documentFragmentMap = /* @__PURE__ */ new WeakMap();
  const connectedCallbackMap = /* @__PURE__ */ new WeakMap();
  const validityUpgradeMap = /* @__PURE__ */ new WeakMap();
  const aom = {
    ariaAtomic: "aria-atomic",
    ariaAutoComplete: "aria-autocomplete",
    ariaBusy: "aria-busy",
    ariaChecked: "aria-checked",
    ariaColCount: "aria-colcount",
    ariaColIndex: "aria-colindex",
    ariaColIndexText: "aria-colindextext",
    ariaColSpan: "aria-colspan",
    ariaCurrent: "aria-current",
    ariaDescription: "aria-description",
    ariaDisabled: "aria-disabled",
    ariaExpanded: "aria-expanded",
    ariaHasPopup: "aria-haspopup",
    ariaHidden: "aria-hidden",
    ariaInvalid: "aria-invalid",
    ariaKeyShortcuts: "aria-keyshortcuts",
    ariaLabel: "aria-label",
    ariaLevel: "aria-level",
    ariaLive: "aria-live",
    ariaModal: "aria-modal",
    ariaMultiLine: "aria-multiline",
    ariaMultiSelectable: "aria-multiselectable",
    ariaOrientation: "aria-orientation",
    ariaPlaceholder: "aria-placeholder",
    ariaPosInSet: "aria-posinset",
    ariaPressed: "aria-pressed",
    ariaReadOnly: "aria-readonly",
    ariaRelevant: "aria-relevant",
    ariaRequired: "aria-required",
    ariaRoleDescription: "aria-roledescription",
    ariaRowCount: "aria-rowcount",
    ariaRowIndex: "aria-rowindex",
    ariaRowIndexText: "aria-rowindextext",
    ariaRowSpan: "aria-rowspan",
    ariaSelected: "aria-selected",
    ariaSetSize: "aria-setsize",
    ariaSort: "aria-sort",
    ariaValueMax: "aria-valuemax",
    ariaValueMin: "aria-valuemin",
    ariaValueNow: "aria-valuenow",
    ariaValueText: "aria-valuetext",
    role: "role"
  };
  const initAom = (ref2, internals) => {
    for (let key in aom) {
      internals[key] = null;
      let closureValue = null;
      const attributeName = aom[key];
      Object.defineProperty(internals, key, {
        get() {
          return closureValue;
        },
        set(value) {
          closureValue = value;
          if (ref2.isConnected) {
            ref2.setAttribute(attributeName, value);
          } else {
            upgradeMap.set(ref2, internals);
          }
        }
      });
    }
  };
  function initNode(node) {
    const internals = internalsMap.get(node);
    const { form } = internals;
    initForm(node, form, internals);
    initLabels(node, internals.labels);
  }
  const walkFieldset = (node, firstRender = false) => {
    const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {
      acceptNode(node2) {
        return internalsMap.has(node2) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    let current = walker.nextNode();
    const isCallNecessary = !firstRender || node.disabled;
    while (current) {
      if (current.formDisabledCallback && isCallNecessary) {
        setDisabled(current, node.disabled);
      }
      current = walker.nextNode();
    }
  };
  const disabledOrNameObserverConfig = { attributes: true, attributeFilter: ["disabled", "name"] };
  const disabledOrNameObserver = mutationObserverExists() ? new MutationObserver((mutationsList) => {
    for (const mutation of mutationsList) {
      const target = mutation.target;
      if (mutation.attributeName === "disabled") {
        if (target.constructor["formAssociated"]) {
          setDisabled(target, target.hasAttribute("disabled"));
        } else if (target.localName === "fieldset") {
          walkFieldset(target);
        }
      }
      if (mutation.attributeName === "name") {
        if (target.constructor["formAssociated"]) {
          const internals = internalsMap.get(target);
          const value = refValueMap.get(target);
          internals.setFormValue(value);
        }
      }
    }
  }) : {};
  function observerCallback(mutationList) {
    mutationList.forEach((mutationRecord) => {
      const { addedNodes, removedNodes } = mutationRecord;
      const added = Array.from(addedNodes);
      const removed = Array.from(removedNodes);
      added.forEach((node) => {
        var _a7;
        if (internalsMap.has(node) && node.constructor["formAssociated"]) {
          initNode(node);
        }
        if (upgradeMap.has(node)) {
          const internals = upgradeMap.get(node);
          const aomKeys = Object.keys(aom);
          aomKeys.filter((key) => internals[key] !== null).forEach((key) => {
            node.setAttribute(aom[key], internals[key]);
          });
          upgradeMap.delete(node);
        }
        if (validityUpgradeMap.has(node)) {
          const internals = validityUpgradeMap.get(node);
          node.setAttribute("internals-valid", internals.validity.valid.toString());
          node.setAttribute("internals-invalid", (!internals.validity.valid).toString());
          node.setAttribute("aria-invalid", (!internals.validity.valid).toString());
          validityUpgradeMap.delete(node);
        }
        if (node.localName === "form") {
          const formElements = formElementsMap.get(node);
          const walker = document.createTreeWalker(node, NodeFilter.SHOW_ELEMENT, {
            acceptNode(node2) {
              return internalsMap.has(node2) && node2.constructor["formAssociated"] && !(formElements && formElements.has(node2)) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
            }
          });
          let current = walker.nextNode();
          while (current) {
            initNode(current);
            current = walker.nextNode();
          }
        }
        if (node.localName === "fieldset") {
          (_a7 = disabledOrNameObserver.observe) === null || _a7 === void 0 ? void 0 : _a7.call(disabledOrNameObserver, node, disabledOrNameObserverConfig);
          walkFieldset(node, true);
        }
      });
      removed.forEach((node) => {
        const internals = internalsMap.get(node);
        if (internals && hiddenInputMap.get(internals)) {
          removeHiddenInputs(internals);
        }
        if (shadowHostsMap.has(node)) {
          const observer = shadowHostsMap.get(node);
          observer.disconnect();
        }
      });
    });
  }
  function fragmentObserverCallback(mutationList) {
    mutationList.forEach((mutation) => {
      const { removedNodes } = mutation;
      removedNodes.forEach((node) => {
        const observer = documentFragmentMap.get(mutation.target);
        if (internalsMap.has(node)) {
          upgradeInternals(node);
        }
        observer.disconnect();
      });
    });
  }
  const deferUpgrade = (fragment) => {
    var _a7, _b2;
    const observer = new MutationObserver(fragmentObserverCallback);
    if (((_a7 = window === null || window === void 0 ? void 0 : window.ShadyDOM) === null || _a7 === void 0 ? void 0 : _a7.inUse) && fragment.mode && fragment.host) {
      fragment = fragment.host;
    }
    (_b2 = observer.observe) === null || _b2 === void 0 ? void 0 : _b2.call(observer, fragment, { childList: true });
    documentFragmentMap.set(fragment, observer);
  };
  mutationObserverExists() ? new MutationObserver(observerCallback) : {};
  const observerConfig = {
    childList: true,
    subtree: true
  };
  const setDisabled = (ref2, disabled) => {
    ref2.toggleAttribute("internals-disabled", disabled);
    if (disabled) {
      ref2.setAttribute("aria-disabled", "true");
    } else {
      ref2.removeAttribute("aria-disabled");
    }
    if (ref2.formDisabledCallback) {
      ref2.formDisabledCallback.apply(ref2, [disabled]);
    }
  };
  const removeHiddenInputs = (internals) => {
    const hiddenInputs = hiddenInputMap.get(internals);
    hiddenInputs.forEach((hiddenInput) => {
      hiddenInput.remove();
    });
    hiddenInputMap.set(internals, []);
  };
  const createHiddenInput = (ref2, internals) => {
    const input = document.createElement("input");
    input.type = "hidden";
    input.name = ref2.getAttribute("name");
    ref2.after(input);
    hiddenInputMap.get(internals).push(input);
    return input;
  };
  const initRef = (ref2, internals) => {
    var _a7;
    hiddenInputMap.set(internals, []);
    (_a7 = disabledOrNameObserver.observe) === null || _a7 === void 0 ? void 0 : _a7.call(disabledOrNameObserver, ref2, disabledOrNameObserverConfig);
  };
  const initLabels = (ref2, labels) => {
    if (labels.length) {
      Array.from(labels).forEach((label) => label.addEventListener("click", ref2.click.bind(ref2)));
      let firstLabelId = labels[0].id;
      if (!labels[0].id) {
        firstLabelId = `${labels[0].htmlFor}_Label`;
        labels[0].id = firstLabelId;
      }
      ref2.setAttribute("aria-labelledby", firstLabelId);
    }
  };
  const setFormValidity = (form) => {
    const nativeControlValidity = Array.from(form.elements).filter((element) => !element.tagName.includes("-") && element.validity).map((element) => element.validity.valid);
    const polyfilledElements = formElementsMap.get(form) || [];
    const polyfilledValidity = Array.from(polyfilledElements).filter((control) => control.isConnected).map((control) => internalsMap.get(control).validity.valid);
    const hasInvalid = [...nativeControlValidity, ...polyfilledValidity].includes(false);
    form.toggleAttribute("internals-invalid", hasInvalid);
    form.toggleAttribute("internals-valid", !hasInvalid);
  };
  const formInputCallback = (event) => {
    setFormValidity(findParentForm(event.target));
  };
  const formChangeCallback = (event) => {
    setFormValidity(findParentForm(event.target));
  };
  const wireSubmitLogic = (form) => {
    const submitButtonSelector = ["button[type=submit]", "input[type=submit]", "button:not([type])"].map((sel) => `${sel}:not([disabled])`).map((sel) => `${sel}:not([form])${form.id ? `,${sel}[form='${form.id}']` : ""}`).join(",");
    form.addEventListener("click", (event) => {
      const target = event.target;
      if (target.closest(submitButtonSelector)) {
        const elements = formElementsMap.get(form);
        if (form.noValidate) {
          return;
        }
        if (elements.size) {
          const nodes = Array.from(elements);
          const validityList = nodes.reverse().map((node) => {
            const internals = internalsMap.get(node);
            return internals.reportValidity();
          });
          if (validityList.includes(false)) {
            event.preventDefault();
          }
        }
      }
    });
  };
  const formResetCallback = (event) => {
    const elements = formElementsMap.get(event.target);
    if (elements && elements.size) {
      elements.forEach((element) => {
        if (element.constructor.formAssociated && element.formResetCallback) {
          element.formResetCallback.apply(element);
        }
      });
    }
  };
  const initForm = (ref2, form, internals) => {
    if (form) {
      const formElements = formElementsMap.get(form);
      if (formElements) {
        formElements.add(ref2);
      } else {
        const initSet = /* @__PURE__ */ new Set();
        initSet.add(ref2);
        formElementsMap.set(form, initSet);
        wireSubmitLogic(form);
        form.addEventListener("reset", formResetCallback);
        form.addEventListener("input", formInputCallback);
        form.addEventListener("change", formChangeCallback);
      }
      formsMap.set(form, { ref: ref2, internals });
      if (ref2.constructor["formAssociated"] && ref2.formAssociatedCallback) {
        setTimeout(() => {
          ref2.formAssociatedCallback.apply(ref2, [form]);
        }, 0);
      }
      setFormValidity(form);
    }
  };
  const findParentForm = (elem) => {
    let parent = elem.parentNode;
    if (parent && parent.tagName !== "FORM") {
      parent = findParentForm(parent);
    }
    return parent;
  };
  const throwIfNotFormAssociated = (ref2, message, ErrorType = DOMException) => {
    if (!ref2.constructor["formAssociated"]) {
      throw new ErrorType(message);
    }
  };
  const overrideFormMethod = (form, returnValue, method) => {
    const elements = formElementsMap.get(form);
    if (elements && elements.size) {
      elements.forEach((element) => {
        const internals = internalsMap.get(element);
        const valid = internals[method]();
        if (!valid) {
          returnValue = false;
        }
      });
    }
    return returnValue;
  };
  const upgradeInternals = (ref2) => {
    if (ref2.constructor["formAssociated"]) {
      const internals = internalsMap.get(ref2);
      const { labels, form } = internals;
      initLabels(ref2, labels);
      initForm(ref2, form, internals);
    }
  };
  function mutationObserverExists() {
    return typeof MutationObserver !== "undefined";
  }
  class ValidityState {
    constructor() {
      this.badInput = false;
      this.customError = false;
      this.patternMismatch = false;
      this.rangeOverflow = false;
      this.rangeUnderflow = false;
      this.stepMismatch = false;
      this.tooLong = false;
      this.tooShort = false;
      this.typeMismatch = false;
      this.valid = true;
      this.valueMissing = false;
      Object.seal(this);
    }
  }
  const setValid = (validityObject) => {
    validityObject.badInput = false;
    validityObject.customError = false;
    validityObject.patternMismatch = false;
    validityObject.rangeOverflow = false;
    validityObject.rangeUnderflow = false;
    validityObject.stepMismatch = false;
    validityObject.tooLong = false;
    validityObject.tooShort = false;
    validityObject.typeMismatch = false;
    validityObject.valid = true;
    validityObject.valueMissing = false;
    return validityObject;
  };
  const reconcileValidity = (validityObject, newState, form) => {
    validityObject.valid = isValid(newState);
    Object.keys(newState).forEach((key) => validityObject[key] = newState[key]);
    if (form) {
      setFormValidity(form);
    }
    return validityObject;
  };
  const isValid = (validityState) => {
    let valid = true;
    for (let key in validityState) {
      if (key !== "valid" && validityState[key] !== false) {
        valid = false;
      }
    }
    return valid;
  };
  const customStateMap = /* @__PURE__ */ new WeakMap();
  function addState(ref2, stateName) {
    ref2.toggleAttribute(stateName, true);
    if (ref2.part) {
      ref2.part.add(stateName);
    }
  }
  class CustomStateSet extends Set {
    static get isPolyfilled() {
      return true;
    }
    constructor(ref2) {
      super();
      if (!ref2 || !ref2.tagName || ref2.tagName.indexOf("-") === -1) {
        throw new TypeError("Illegal constructor");
      }
      customStateMap.set(this, ref2);
    }
    add(state2) {
      if (!/^--/.test(state2) || typeof state2 !== "string") {
        throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state2} must start with '--'.`);
      }
      const result = super.add(state2);
      const ref2 = customStateMap.get(this);
      const stateName = `state${state2}`;
      if (ref2.isConnected) {
        addState(ref2, stateName);
      } else {
        setTimeout(() => {
          addState(ref2, stateName);
        });
      }
      return result;
    }
    clear() {
      for (let [entry] of this.entries()) {
        this.delete(entry);
      }
      super.clear();
    }
    delete(state2) {
      const result = super.delete(state2);
      const ref2 = customStateMap.get(this);
      if (ref2.isConnected) {
        ref2.toggleAttribute(`state${state2}`, false);
        if (ref2.part) {
          ref2.part.remove(`state${state2}`);
        }
      } else {
        setTimeout(() => {
          ref2.toggleAttribute(`state${state2}`, false);
          if (ref2.part) {
            ref2.part.remove(`state${state2}`);
          }
        });
      }
      return result;
    }
  }
  function __classPrivateFieldGet(receiver, state2, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state2.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state2, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state2 === "function" ? receiver !== state2 || !f : !state2.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state2.set(receiver, value), value;
  }
  var _HTMLFormControlsCollection_elements;
  class HTMLFormControlsCollection {
    constructor(elements) {
      _HTMLFormControlsCollection_elements.set(this, void 0);
      __classPrivateFieldSet(this, _HTMLFormControlsCollection_elements, elements, "f");
      for (let i = 0; i < elements.length; i++) {
        let element = elements[i];
        this[i] = element;
        if (element.hasAttribute("name")) {
          this[element.getAttribute("name")] = element;
        }
      }
      Object.freeze(this);
    }
    get length() {
      return __classPrivateFieldGet(this, _HTMLFormControlsCollection_elements, "f").length;
    }
    [(_HTMLFormControlsCollection_elements = /* @__PURE__ */ new WeakMap(), Symbol.iterator)]() {
      return __classPrivateFieldGet(this, _HTMLFormControlsCollection_elements, "f")[Symbol.iterator]();
    }
    item(i) {
      return this[i] == null ? null : this[i];
    }
    namedItem(name) {
      return this[name] == null ? null : this[name];
    }
  }
  function patchFormPrototype() {
    const checkValidity = HTMLFormElement.prototype.checkValidity;
    HTMLFormElement.prototype.checkValidity = checkValidityOverride;
    const reportValidity = HTMLFormElement.prototype.reportValidity;
    HTMLFormElement.prototype.reportValidity = reportValidityOverride;
    function checkValidityOverride(...args) {
      let returnValue = checkValidity.apply(this, args);
      return overrideFormMethod(this, returnValue, "checkValidity");
    }
    function reportValidityOverride(...args) {
      let returnValue = reportValidity.apply(this, args);
      return overrideFormMethod(this, returnValue, "reportValidity");
    }
    const { get } = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, "elements");
    Object.defineProperty(HTMLFormElement.prototype, "elements", {
      get(...args) {
        const elements = get.call(this, ...args);
        const polyfilledElements = Array.from(formElementsMap.get(this) || []);
        if (polyfilledElements.length === 0) {
          return elements;
        }
        const orderedElements = Array.from(elements).concat(polyfilledElements).sort((a, b) => {
          if (a.compareDocumentPosition) {
            return a.compareDocumentPosition(b) & 2 ? 1 : -1;
          }
          return 0;
        });
        return new HTMLFormControlsCollection(orderedElements);
      }
    });
  }
  class ElementInternals {
    static get isPolyfilled() {
      return true;
    }
    constructor(ref2) {
      if (!ref2 || !ref2.tagName || ref2.tagName.indexOf("-") === -1) {
        throw new TypeError("Illegal constructor");
      }
      const rootNode = ref2.getRootNode();
      const validity = new ValidityState();
      this.states = new CustomStateSet(ref2);
      refMap.set(this, ref2);
      validityMap.set(this, validity);
      internalsMap.set(ref2, this);
      initAom(ref2, this);
      initRef(ref2, this);
      Object.seal(this);
      if (rootNode instanceof DocumentFragment) {
        deferUpgrade(rootNode);
      }
    }
    checkValidity() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);
      if (!this.willValidate) {
        return true;
      }
      const validity = validityMap.get(this);
      if (!validity.valid) {
        const validityEvent = new Event("invalid", {
          bubbles: false,
          cancelable: true,
          composed: false
        });
        ref2.dispatchEvent(validityEvent);
      }
      return validity.valid;
    }
    get form() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);
      let form;
      if (ref2.constructor["formAssociated"] === true) {
        form = findParentForm(ref2);
      }
      return form;
    }
    get labels() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);
      const id = ref2.getAttribute("id");
      const hostRoot = ref2.getRootNode();
      if (hostRoot && id) {
        return hostRoot.querySelectorAll(`[for="${id}"]`);
      }
      return [];
    }
    reportValidity() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);
      if (!this.willValidate) {
        return true;
      }
      const valid = this.checkValidity();
      const anchor = validationAnchorMap.get(this);
      if (anchor && !ref2.constructor["formAssociated"]) {
        throw new DOMException(`Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);
      }
      if (!valid && anchor) {
        ref2.focus();
        anchor.focus();
      }
      return valid;
    }
    setFormValue(value) {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);
      removeHiddenInputs(this);
      if (value != null && !(value instanceof FormData)) {
        if (ref2.getAttribute("name")) {
          const hiddenInput = createHiddenInput(ref2, this);
          hiddenInput.value = value;
        }
      } else if (value != null && value instanceof FormData) {
        Array.from(value).reverse().forEach(([formDataKey, formDataValue]) => {
          if (typeof formDataValue === "string") {
            const hiddenInput = createHiddenInput(ref2, this);
            hiddenInput.name = formDataKey;
            hiddenInput.value = formDataValue;
          }
        });
      }
      refValueMap.set(ref2, value);
    }
    setValidity(validityChanges, validationMessage, anchor) {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);
      if (!validityChanges) {
        throw new TypeError("Failed to execute 'setValidity' on 'ElementInternals': 1 argument required, but only 0 present.");
      }
      validationAnchorMap.set(this, anchor);
      const validity = validityMap.get(this);
      const validityChangesObj = {};
      for (const key in validityChanges) {
        validityChangesObj[key] = validityChanges[key];
      }
      if (Object.keys(validityChangesObj).length === 0) {
        setValid(validity);
      }
      const check = Object.assign(Object.assign({}, validity), validityChangesObj);
      delete check.valid;
      const { valid } = reconcileValidity(validity, check, this.form);
      if (!valid && !validationMessage) {
        throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);
      }
      validationMessageMap.set(this, valid ? "" : validationMessage);
      if (ref2.isConnected) {
        ref2.toggleAttribute("internals-invalid", !valid);
        ref2.toggleAttribute("internals-valid", valid);
        ref2.setAttribute("aria-invalid", `${!valid}`);
      } else {
        validityUpgradeMap.set(ref2, this);
      }
    }
    get shadowRoot() {
      const ref2 = refMap.get(this);
      const shadowRoot = shadowRootMap.get(ref2);
      if (shadowRoot) {
        return shadowRoot;
      }
      return null;
    }
    get validationMessage() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);
      return validationMessageMap.get(this);
    }
    get validity() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);
      const validity = validityMap.get(this);
      return validity;
    }
    get willValidate() {
      const ref2 = refMap.get(this);
      throwIfNotFormAssociated(ref2, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);
      if (ref2.disabled || ref2.hasAttribute("disabled") || ref2.hasAttribute("readonly")) {
        return false;
      }
      return true;
    }
  }
  function isElementInternalsSupported() {
    if (typeof window === "undefined" || !window.ElementInternals || !HTMLElement.prototype.attachInternals) {
      return false;
    }
    class ElementInternalsFeatureDetection extends HTMLElement {
      constructor() {
        super();
        this.internals = this.attachInternals();
      }
    }
    const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, "")}`;
    customElements.define(randomName, ElementInternalsFeatureDetection);
    const featureDetectionElement = new ElementInternalsFeatureDetection();
    return [
      "shadowRoot",
      "form",
      "willValidate",
      "validity",
      "validationMessage",
      "labels",
      "setFormValue",
      "setValidity",
      "checkValidity",
      "reportValidity"
    ].every((prop) => prop in featureDetectionElement.internals);
  }
  let hasElementInternalsPolyfillBeenApplied = false;
  let hasCustomStateSetPolyfillBeenApplied = false;
  function forceCustomStateSetPolyfill(attachInternals) {
    if (hasCustomStateSetPolyfillBeenApplied) {
      return;
    }
    hasCustomStateSetPolyfillBeenApplied = true;
    window.CustomStateSet = CustomStateSet;
    if (attachInternals) {
      HTMLElement.prototype.attachInternals = function(...args) {
        const internals = attachInternals.call(this, args);
        internals.states = new CustomStateSet(this);
        return internals;
      };
    }
  }
  function forceElementInternalsPolyfill(forceCustomStateSet = true) {
    if (hasElementInternalsPolyfillBeenApplied) {
      return;
    }
    hasElementInternalsPolyfillBeenApplied = true;
    if (typeof window !== "undefined") {
      window.ElementInternals = ElementInternals;
    }
    if (typeof CustomElementRegistry !== "undefined") {
      const define = CustomElementRegistry.prototype.define;
      CustomElementRegistry.prototype.define = function(name, constructor, options2) {
        if (constructor.formAssociated) {
          const connectedCallback = constructor.prototype.connectedCallback;
          constructor.prototype.connectedCallback = function() {
            if (!connectedCallbackMap.has(this)) {
              connectedCallbackMap.set(this, true);
              if (this.hasAttribute("disabled")) {
                setDisabled(this, true);
              }
            }
            if (connectedCallback != null) {
              connectedCallback.apply(this);
            }
            upgradeInternals(this);
          };
        }
        define.call(this, name, constructor, options2);
      };
    }
    if (typeof HTMLElement !== "undefined") {
      HTMLElement.prototype.attachInternals = function() {
        if (!this.tagName) {
          return {};
        } else if (this.tagName.indexOf("-") === -1) {
          throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);
        }
        if (internalsMap.has(this)) {
          throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);
        }
        return new ElementInternals(this);
      };
    }
    if (typeof Element !== "undefined") {
      let attachShadowObserver = function(...args) {
        const shadowRoot = attachShadow.apply(this, args);
        shadowRootMap.set(this, shadowRoot);
        if (mutationObserverExists()) {
          const observer = new MutationObserver(observerCallback);
          if (window.ShadyDOM) {
            observer.observe(this, observerConfig);
          } else {
            observer.observe(shadowRoot, observerConfig);
          }
          shadowHostsMap.set(this, observer);
        }
        return shadowRoot;
      };
      const attachShadow = Element.prototype.attachShadow;
      Element.prototype.attachShadow = attachShadowObserver;
    }
    if (mutationObserverExists() && typeof document !== "undefined") {
      const documentObserver = new MutationObserver(observerCallback);
      documentObserver.observe(document.documentElement, observerConfig);
    }
    if (typeof HTMLFormElement !== "undefined") {
      patchFormPrototype();
    }
    if (forceCustomStateSet || typeof window !== "undefined" && !window.CustomStateSet) {
      forceCustomStateSetPolyfill();
    }
  }
  const isCePolyfill = !!customElements.polyfillWrapFlushCallback;
  if (!isCePolyfill) {
    if (!isElementInternalsSupported()) {
      forceElementInternalsPolyfill(false);
    } else if (typeof window !== "undefined" && !window.CustomStateSet) {
      forceCustomStateSetPolyfill(HTMLElement.prototype.attachInternals);
    }
  }
  exports.forceCustomStateSetPolyfill = forceCustomStateSetPolyfill;
  exports.forceElementInternalsPolyfill = forceElementInternalsPolyfill;
  Object.defineProperty(exports, "__esModule", { value: true });
  return exports;
})({});

// node_modules/lit-html/development/directives/style-map.js
var important = "important";
var importantFlag = " !" + important;
var flagTrim = 0 - importantFlag.length;
var StyleMapDirective = class extends Directive {
  constructor(partInfo) {
    var _a7;
    super(partInfo);
    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== "style" || ((_a7 = partInfo.strings) === null || _a7 === void 0 ? void 0 : _a7.length) > 2) {
      throw new Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
    }
  }
  render(styleInfo) {
    return Object.keys(styleInfo).reduce((style2, prop) => {
      const value = styleInfo[prop];
      if (value == null) {
        return style2;
      }
      prop = prop.includes("-") ? prop : prop.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase();
      return style2 + `${prop}:${value};`;
    }, "");
  }
  update(part, [styleInfo]) {
    const { style: style2 } = part.element;
    if (this._previousStyleProperties === void 0) {
      this._previousStyleProperties = /* @__PURE__ */ new Set();
      for (const name in styleInfo) {
        this._previousStyleProperties.add(name);
      }
      return this.render(styleInfo);
    }
    this._previousStyleProperties.forEach((name) => {
      if (styleInfo[name] == null) {
        this._previousStyleProperties.delete(name);
        if (name.includes("-")) {
          style2.removeProperty(name);
        } else {
          style2[name] = "";
        }
      }
    });
    for (const name in styleInfo) {
      const value = styleInfo[name];
      if (value != null) {
        this._previousStyleProperties.add(name);
        const isImportant = typeof value === "string" && value.endsWith(importantFlag);
        if (name.includes("-") || isImportant) {
          style2.setProperty(name, isImportant ? value.slice(0, flagTrim) : value, isImportant ? important : "");
        } else {
          style2[name] = value;
        }
      }
    }
    return noChange;
  }
};
var styleMap = directive(StyleMapDirective);

// node_modules/lit-html/development/directives/when.js
function when(condition, trueCase, falseCase) {
  return condition ? trueCase() : falseCase === null || falseCase === void 0 ? void 0 : falseCase();
}

// node_modules/omni-ui/dist/assets/img-upload-default.js
var defaultUploadImg = (tag) => tag`<svg viewBox="0 0 72 72" xmlns="http://www.w3.org/2000/svg"><g transform="translate(1 1)" fill="none" fill-rule="evenodd"><rect stroke="var(--color-primary,#00A1D2)" stroke-linecap="square" width="70" height="70" rx="35"/><g fill="#3B3E3F" fill-rule="nonzero" opacity=".1"><path d="M42.1 17.3H17.6c-.7 0-1.3.6-1.3 1.3v27c0 .7.6 1.3 1.3 1.3h24.5c.8 0 1.3-.6 1.3-1.3v-27c0-.7-.5-1.3-1.3-1.3ZM40.8 20v24.4H19V19.9h22Z"/><path d="M42.1 37a1.3 1.3 0 0 1 .2 2.5H17.6a1.3 1.3 0 0 1-.1-2.6H42Z"/><path d="M45.8 27.2c.2-.7.9-1 1.5-1l.1.1 6.6 2.2a2.5 2.5 0 0 1 1.6 3v.2L47.8 55a2.5 2.5 0 0 1-3 1.6h-.2L27 50.7a1.3 1.3 0 0 1 .7-2.5h.1L45.3 54 53 31l-6.4-2.2c-.6-.2-1-.8-.9-1.5v-.1Z"/><path d="M33.6 26.2c1 0 2 .3 2.8 1l.2.3 6.5 7.4a1.3 1.3 0 0 1-1.8 1.9l-.2-.2-6.5-7.4a1.1 1.1 0 0 0-1.7 0L26 39a1.3 1.3 0 0 1-2.3-1.4l.1-.1 6.8-9.7c.6-1 1.7-1.6 2.9-1.6Z"/><path d="M24.7 21.6a4 4 0 1 0 0 8.1 4 4 0 0 0 0-8.1Zm0 2.6a1.4 1.4 0 1 1 0 3 1.4 1.4 0 0 1 0-3Z"/></g></g></svg>`;

// node_modules/lit-html/development/directives/if-defined.js
var ifDefined = (value) => value !== null && value !== void 0 ? value : nothing;

// node_modules/omni-ui/dist/component/omni-img-input/omni-img-input.js
var __defProp6 = Object.defineProperty;
var __getOwnPropDesc6 = Object.getOwnPropertyDescriptor;
var __decorateClass6 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc6(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp6(target, key, result);
  return result;
};
var style = css`:host{display:inline-block}:host([disabled]){--cursor-state: not-allowed;--opacity-state: 0.45}:host([disabled]) .tooltip-container{cursor:not-allowed}form{margin:0;display:flex;align-items:start}form>*+*{margin-left:0.7142857143rem}form .left{display:flex;flex-direction:column;place-content:center;align-items:flex-start;position:relative}slot{display:block}[type=file]{width:0.0714285714rem;height:0.0714285714rem;border:none !important;position:relative;z-index:-1;margin:0 auto !important}.tooltip-container{position:relative}ul,li{padding:0;margin:0}.trigger-container{position:relative;display:flex;flex-direction:column}.tooltip{position:absolute;top:2.6428571429rem;z-index:1;background:#000;color:#fff;min-height:2em;max-height:40em;animation:850ms linear 1 fade-in;background:linear-gradient(to bottom, #2b3952, #142033 100%);border-radius:0.5714285714rem;color:#fff;padding:0.5rem 1.0714285714rem;font-size:0.8571428571rem;font-weight:600;text-align:left;pointer-events:none;overflow-wrap:break-word}#arrow{position:absolute;z-index:1;top:2.4285714286rem;left:2.6785714286rem;width:0.5714285714rem;height:0.5714285714rem;content:"";transform:rotate(45deg);background:linear-gradient(to bottom, #2b3952, #142033 100%)}.has-help [name=help]{display:block;margin-top:8px}div.filenames-container{display:flex;flex-direction:column}div.one-file{display:flex;justify-content:space-between;margin:0 0 0.3571428571rem 0}div.one-file:last-child{margin-bottom:0}div.img-and-name{display:flex}div.img-container{height:2.2857142857rem;width:2.2857142857rem;margin-right:5px}img{object-fit:cover}div#filename{overflow-wrap:anywhere}`;
var _getInvalidTypeFiles, getInvalidTypeFiles_fn, _invalidSizeFiles, invalidSizeFiles_get, _onTriggerClick, onTriggerClick_fn, _triggerSlotTemplate, triggerSlotTemplate_get, _onFileChange, onFileChange_fn, _getTextWidth, getTextWidth_fn, _getMaxTextWidth, getMaxTextWidth_fn, _validMimeType, validMimeType_fn, _addToolTipErrors, addToolTipErrors_fn, _setFilesBackAfterCancel, setFilesBackAfterCancel_fn, _inputTemplate, inputTemplate_get, _getFileList, getFileList_fn, _filenameAndPreviewTemplate, filenameAndPreviewTemplate_get, _formTemplate, formTemplate_get, _onSlotChange, onSlotChange_fn;
var OmniImageInput = class extends OmniElement {
  constructor() {
    super(...arguments);
    /**@internal */
    __privateAdd(this, _getInvalidTypeFiles);
    /**@internal */
    __privateAdd(this, _invalidSizeFiles);
    /**@internal */
    __privateAdd(this, _onTriggerClick);
    /**@internal */
    __privateAdd(this, _triggerSlotTemplate);
    /**@internal */
    __privateAdd(this, _onFileChange);
    /**@internal */
    __privateAdd(this, _getTextWidth);
    /**@internal */
    __privateAdd(this, _getMaxTextWidth);
    /**@internal */
    __privateAdd(this, _validMimeType);
    /**@internal */
    __privateAdd(this, _addToolTipErrors);
    /** set files back on input element on cancel */
    /**@internal */
    __privateAdd(this, _setFilesBackAfterCancel);
    /**@internal */
    __privateAdd(this, _inputTemplate);
    /**@internal */
    __privateAdd(this, _getFileList);
    /**@internal */
    __privateAdd(this, _filenameAndPreviewTemplate);
    /**@internal */
    __privateAdd(this, _formTemplate);
    /**@internal */
    __privateAdd(this, _onSlotChange);
    this.DEFAULT_MAX_SIZE = 1048576;
    this.DEFAULT_ACCEPTED_FILE_TYPES = ["image/jpeg", "image/png", "image/gif", "image/webp"];
    this.FILE_SIZE_TOO_LARGE_MSG = (name) => `${name}'s size is too large`;
    this._files = {};
    this._hasHelp = false;
    this._tooltipErrors = [];
    this.accept = this.DEFAULT_ACCEPTED_FILE_TYPES.join(",");
    this.disabled = false;
    this.maxSize = this.DEFAULT_MAX_SIZE;
    this.multiple = false;
    this.previewSrc = "";
    this.previewable = false;
    this.filename = "";
    this.required = false;
    this.placeholderSrc = "";
  }
  static get styles() {
    return [...super.styles, style];
  }
  async initializeFiles(imgSrc = this.previewSrc) {
    const srcs = Array.isArray(imgSrc) ? imgSrc : [imgSrc];
    const filenames = Array.isArray(this.filename) ? this.filename : [this.filename];
    if (Array.isArray(imgSrc) && !this.multiple) {
      console.error("previewSrc given as array: multiple attribute must be set to true");
    }
    const uniqueFilenames = {};
    const entryPromises = srcs.map(async (src, i) => {
      var _a7;
      const response = await fetch(src);
      const blob = await response.blob();
      let filename = filenames[i] ?? ((_a7 = src.match(/.*[#/](.*)$/)) == null ? void 0 : _a7[1]) ?? "filename";
      if (uniqueFilenames[filename]) {
        const count = uniqueFilenames[filename];
        uniqueFilenames[filename] += 1;
        filename = `${filename} (${count})`;
      } else {
        uniqueFilenames[filename] = 1;
      }
      const srcSplit = src.split(".");
      const type = `image/${srcSplit[srcSplit.length - 1].replace("jpg", "jpeg")}`;
      const file = new File([blob], filename, { type });
      return [filename, { file, previewSrc: src }];
    });
    this._files = { ...this._files, ...Object.fromEntries(await Promise.all(entryPromises)) };
    if (this._fileInputEl) {
      this._fileInputEl.files = __privateMethod(this, _getFileList, getFileList_fn).call(this);
    }
  }
  updated(changedProperties) {
    if (changedProperties.has("previewSrc") && this.previewSrc) {
      this.initializeFiles();
    }
  }
  get validationMessage() {
    var _a7;
    return (_a7 = this._fileInputEl) == null ? void 0 : _a7.validationMessage;
  }
  /** reset the selected images */
  reset() {
    var _a7;
    if (!this.disabled) {
      (_a7 = this._formEl) == null ? void 0 : _a7.reset();
      if (this._fileInputEl) {
        this._fileInputEl.value = "";
      }
      this._files = {};
    }
  }
  /** check the form input for client-side validation, if false fire invalid event */
  checkValidity() {
    var _a7, _b2, _c;
    (_a7 = this._fileInputEl) == null ? void 0 : _a7.setCustomValidity("");
    if (this.required && !Object.keys(this._files).length) {
      (_b2 = this._fileInputEl) == null ? void 0 : _b2.setCustomValidity("Please select a file");
      return false;
    }
    if (!Object.keys(this._files).length)
      return true;
    if (!((_c = this._fileInputEl) == null ? void 0 : _c.checkValidity()))
      return false;
    return true;
  }
  /**@internal */
  reportValidity() {
    return this._formEl.reportValidity();
  }
  /**@internal */
  get _tooltipTemplate() {
    return html`
      ${when(this._tooltipErrors.length, () => {
      const paddingL = this._tooltipErrors.length > 1 ? 30 : 20;
      const paddingR = this._tooltipErrors.length > 1 ? 20 : 10;
      const desiredMaxWidth = 300;
      const computedMaxWidth = __privateMethod(this, _getMaxTextWidth, getMaxTextWidth_fn).call(this, this._tooltipErrors) + paddingL + paddingR;
      const maxWidth = computedMaxWidth < desiredMaxWidth ? computedMaxWidth : desiredMaxWidth;
      return html`
          <div id="arrow"></div>
          <ul
            class="tooltip"
            style="${styleMap({
        "list-style-type": this._tooltipErrors.length > 1 ? "disc" : "none",
        width: `${maxWidth}px`,
        padding: `10px ${paddingR}px 10px ${paddingL}px`
      })}">
            ${this._tooltipErrors.map((text2) => html`<li>${text2}</li>`)}
          </ul>
        `;
    })}
    `;
  }
  /**@internal */
  _addFilesToOmniFileList(files) {
    for (const file of files) {
      this._files = {
        ...this._files,
        [file.name]: {
          file,
          previewSrc: URL.createObjectURL(file)
        }
      };
    }
  }
  /** remove invalid files from _files, add errors to toolip list, show for 5 sec */
  /**@internal */
  async _processInvalidFiles() {
    const invalidSize = Object.keys(__privateGet(this, _invalidSizeFiles, invalidSizeFiles_get));
    const invalidType = Object.keys(await __privateMethod(this, _getInvalidTypeFiles, getInvalidTypeFiles_fn).call(this));
    for (const name of invalidSize) {
      delete this._files[name];
      __privateMethod(this, _addToolTipErrors, addToolTipErrors_fn).call(this, name, "size");
    }
    for (const name of invalidType) {
      delete this._files[name];
      __privateMethod(this, _addToolTipErrors, addToolTipErrors_fn).call(this, name, "type");
    }
    if (this._fileInputEl) {
      this._fileInputEl.files = __privateMethod(this, _getFileList, getFileList_fn).call(this);
    }
    if (this.multiple)
      this._files = { ...this._files };
    else {
      if (Object.keys(this._files).length > 1) {
        const firstFile = Object.keys(this._files)[0];
        delete this._files[firstFile];
      }
      this._files = { ...this._files };
    }
    if (this._tooltipErrors.length) {
      setTimeout(() => {
        this._tooltipErrors = [];
      }, 5e3);
    }
  }
  /** emits change event if there are one or more files */
  /**@internal */
  _createAndEmitChangeEvent() {
    const fileList = __privateMethod(this, _getFileList, getFileList_fn).call(this);
    if (fileList.length) {
      const eventDetail = this.multiple ? { files: [...fileList] } : { file: fileList[0] };
      this.dispatchNewEvent("change", { detail: eventDetail });
    }
  }
  /**
   * Remove uploaded file by passing file name
   * @internal
   */
  removeFile(filename, emitEvent = true) {
    const fileList = __privateMethod(this, _getFileList, getFileList_fn).call(this, filename);
    if (this._fileInputEl) {
      this._fileInputEl.files = fileList;
    }
    delete this._files[filename];
    this._files = { ...this._files };
    const eventDetail = this.multiple ? { files: [...__privateMethod(this, _getFileList, getFileList_fn).call(this)] } : { file: null };
    if (emitEvent) {
      this.dispatchNewEvent("change", { detail: eventDetail });
    }
    this.checkValidity();
  }
  render() {
    return html`
      <omni-style class=${classMap({ "has-help": this._hasHelp })} @slotchange=${__privateMethod(this, _onSlotChange, onSlotChange_fn)}>
        ${__privateGet(this, _formTemplate, formTemplate_get)}
      </omni-style>
    `;
  }
};
_getInvalidTypeFiles = new WeakSet();
getInvalidTypeFiles_fn = async function() {
  if (!Object.keys(this._files).length)
    return {};
  const currFiles = Object.values(this._files);
  const invalidFiles = {};
  for (const omniFile of currFiles) {
    const isValidMime = await __privateMethod(this, _validMimeType, validMimeType_fn).call(this, omniFile.file);
    if (!isValidMime) {
      invalidFiles[omniFile.file.name] = omniFile;
    }
  }
  return invalidFiles;
};
_invalidSizeFiles = new WeakSet();
invalidSizeFiles_get = function() {
  if (!Object.keys(this._files).length)
    return {};
  return Object.values(this._files).map((one) => {
    return {
      file: one.file,
      isValid: one.file.size < this.maxSize
    };
  }).filter((one) => !one.isValid).reduce((acc, curr) => ({ ...acc, [curr.file.name]: curr }), {});
};
_onTriggerClick = new WeakSet();
onTriggerClick_fn = function() {
  var _a7;
  return (_a7 = this._fileInputEl) == null ? void 0 : _a7.click();
};
_triggerSlotTemplate = new WeakSet();
triggerSlotTemplate_get = function() {
  const disableStyle = styleMap({ opacity: this.disabled ? 0.5 : 1 });
  return html`
      <div class="tooltip-container">
        <div class="trigger-container">
          <slot name="trigger" part="trigger-slot" @click=${__privateMethod(this, _onTriggerClick, onTriggerClick_fn)}>
            <!-- default overridable slot button -->
            <button type="button" class="button is-outlined is-medium" part="trigger" ?disabled=${this.disabled}>
              Browse
            </button>
          </slot>
          ${__privateGet(this, _inputTemplate, inputTemplate_get)}
        </div>
        ${this._tooltipTemplate}
      </div>

      <slot name="help" class="is-size-7 has-text-grey" style=${disableStyle}></slot>
    `;
};
_onFileChange = new WeakSet();
onFileChange_fn = async function({ target: { files } }) {
  if (files.length) {
    this._addFilesToOmniFileList(files);
    await this._processInvalidFiles();
    this._createAndEmitChangeEvent();
    this.checkValidity();
  } else {
    __privateMethod(this, _setFilesBackAfterCancel, setFilesBackAfterCancel_fn).call(this);
  }
};
_getTextWidth = new WeakSet();
getTextWidth_fn = function(text2, context) {
  context.font = getComputedStyle(document.body).font;
  const width = context.measureText(text2).width;
  return Math.floor(width);
};
_getMaxTextWidth = new WeakSet();
getMaxTextWidth_fn = function(texts) {
  const canvas = document.createElement("canvas");
  const context = canvas.getContext("2d");
  const max = Math.max(...texts.map((text2) => __privateMethod(this, _getTextWidth, getTextWidth_fn).call(this, text2, context)));
  canvas.remove();
  return max;
};
_validMimeType = new WeakSet();
validMimeType_fn = async function(file) {
  if (!file)
    return true;
  function check(signature) {
    switch (signature) {
      case "89504e47":
        return "image/png";
      case "47494638":
        return "image/gif";
      case "ffd8ffe0":
      case "ffd8ffe1":
      case "ffd8ffe2":
      case "ffd8ffe3":
      case "ffd8ffe8":
        return "image/jpeg";
      case "52494646":
        return "image/webp";
      default:
        return false;
    }
  }
  const blob = file.slice(0, 4);
  return new Promise((resolve) => {
    const reader = new FileReader();
    reader.onloadend = (e) => {
      const arrayBuffer = e.target.result;
      const hexSignature = new Uint8Array(arrayBuffer).subarray(0, 4);
      let joinedSignature = "";
      for (let i = 0; i < hexSignature.length; i++) {
        joinedSignature += hexSignature[i].toString(16);
      }
      resolve(check(joinedSignature));
    };
    reader.onerror = () => {
      resolve(false);
    };
    reader.readAsArrayBuffer(blob);
  });
};
_addToolTipErrors = new WeakSet();
addToolTipErrors_fn = function(filename, type) {
  const fileTypeError = (name) => {
    const formatter = new Intl.ListFormat("en-US", { style: "long", type: "disjunction" });
    const types = this.accept.split(",");
    const message2 = `${truncateFilename(name)} is not allowed. Only file type ${formatter.format(types)} ${types.length > 1 ? "are" : "is"} allowed`;
    return message2;
  };
  const message = type === "size" ? this.FILE_SIZE_TOO_LARGE_MSG(truncateFilename(filename, 20)) : fileTypeError(filename);
  this._tooltipErrors.push(message);
};
_setFilesBackAfterCancel = new WeakSet();
setFilesBackAfterCancel_fn = function() {
  const fileList = __privateMethod(this, _getFileList, getFileList_fn).call(this);
  if (fileList.length) {
    if (this._fileInputEl) {
      this._fileInputEl.files = fileList;
    }
  }
};
_inputTemplate = new WeakSet();
inputTemplate_get = function() {
  return html`
      <input
        type="file"
        tabindex="-1"
        accept=${ifDefined(this.accept)}
        ?required=${this.required}
        ?multiple=${this.multiple}
        @change=${__privateMethod(this, _onFileChange, onFileChange_fn)} />
    `;
};
_getFileList = new WeakSet();
getFileList_fn = function(excludeFilename = "") {
  const fileBuffer = new DataTransfer();
  for (const omniFile of Object.values(this._files)) {
    if (omniFile.file.name !== excludeFilename) {
      fileBuffer.items.add(omniFile.file);
    }
  }
  return fileBuffer.files;
};
_filenameAndPreviewTemplate = new WeakSet();
filenameAndPreviewTemplate_get = function() {
  const fileNamesContainer = (fileNames) => html`
      <div class="filenames-container" part="filenames-container">${fileNames}</div>
    `;
  const filenames = Object.values(this._files).map(
    (one) => html`
        <div class="one-file">
          <div class="img-and-name">
            <div class="img-container">
              <img src=${one.previewSrc || this.placeholderSrc} part="preview" alt="" />
            </div>
            <div id="filename" part="filename">${truncateFilename(one.file.name, 20)}</div>
          </div>
          <slot name="reset" part="reset" @click=${() => this.removeFile(one.file.name)}>
            <!-- default overridable slot button -->
            <omni-tooltip relateby="label">
              <span slot="invoker">
                <button type="button" class="button is-text is-small is-shadowless" ?disabled=${this.disabled}>
                  <omni-icon class="is-size-2" icon-id="omni:interactive:remove"></omni-icon>
                </button>
              </span>
              <div slot="content">Remove</div>
            </omni-tooltip>
          </slot>
        </div>
      `
  );
  const disableStyle = styleMap({ opacity: this.disabled ? 0.5 : 1 });
  const placeholder = html`
      <slot name="placeholder" part="placeholder" style=${disableStyle}>
        <div>No image selected</div>
      </slot>
    `;
  return Object.keys(this._files).length && this.previewable ? fileNamesContainer(filenames) : placeholder;
};
_formTemplate = new WeakSet();
formTemplate_get = function() {
  return html`
      <fieldset ?disabled=${this.disabled}>
        <form part="form">
          <div class="left">${__privateGet(this, _triggerSlotTemplate, triggerSlotTemplate_get)}</div>
          ${__privateGet(this, _filenameAndPreviewTemplate, filenameAndPreviewTemplate_get)}
        </form>
      </fieldset>
    `;
};
_onSlotChange = new WeakSet();
onSlotChange_fn = function({ target }) {
  ["help"].forEach((name) => {
    if (target.matches(`[name=${name}]`)) {
      this[`_has${capitalizeFirstWord(name)}`] = target.assignedElements().length > 0;
    }
  });
};
__decorateClass6([
  state()
], OmniImageInput.prototype, "_files", 2);
__decorateClass6([
  state()
], OmniImageInput.prototype, "_hasHelp", 2);
__decorateClass6([
  state()
], OmniImageInput.prototype, "_tooltipErrors", 2);
__decorateClass6([
  property({ type: String })
], OmniImageInput.prototype, "accept", 2);
__decorateClass6([
  property({ type: Boolean, reflect: true })
], OmniImageInput.prototype, "disabled", 2);
__decorateClass6([
  property({ type: Number })
], OmniImageInput.prototype, "maxSize", 2);
__decorateClass6([
  property({ type: Boolean, reflect: true })
], OmniImageInput.prototype, "multiple", 2);
__decorateClass6([
  property({ type: String })
], OmniImageInput.prototype, "previewSrc", 2);
__decorateClass6([
  property({ type: Boolean, reflect: true })
], OmniImageInput.prototype, "previewable", 2);
__decorateClass6([
  property({ type: String })
], OmniImageInput.prototype, "filename", 2);
__decorateClass6([
  property({ type: Boolean, reflect: true })
], OmniImageInput.prototype, "required", 2);
__decorateClass6([
  property()
], OmniImageInput.prototype, "placeholderSrc", 2);
__decorateClass6([
  query("[type=file]")
], OmniImageInput.prototype, "_fileInputEl", 2);
__decorateClass6([
  query("form")
], OmniImageInput.prototype, "_formEl", 2);
OmniElement.register("omni-img-input", OmniImageInput);

// node_modules/omni-ui/dist/component/omni-img-upload/omni-img-upload.js
var __defProp7 = Object.defineProperty;
var __getOwnPropDesc7 = Object.getOwnPropertyDescriptor;
var __decorateClass7 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc7(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp7(target, key, result);
  return result;
};
var styles5 = css`:host{--bg-color: var(--color-white);border:none}:host([disabled]){opacity:.3;cursor:not-allowed}:host([disabled]) div{pointer-events:none}omni-style{height:100%}div{display:grid;grid-template-rows:repeat(3, 1fr);grid-template-columns:repeat(3, 1fr);place-items:center;width:100%;height:100%}.omni svg,.omni img{pointer-events:none;grid-area:1/1/4/4;width:100%;height:100%}div.cover{grid-area:1/1/4/4;background-color:#fff;opacity:.7}omni-icon{width:100%;height:100%;grid-column-start:2;grid-row-start:2;cursor:pointer;z-index:1}omni-icon:hover{transition:fill .3s ease;--color-icon-lines: var(--color-electric-blue)}omni-tooltip{grid-column-start:2}.offset-left{margin-left:-50%;margin-right:50%}.offset-right{margin-right:-50%;margin-left:50%}.tooltip-container{position:relative}.tooltip{position:absolute;top:0;left:0}#arrow{top:-4px;left:37.5px}[type=file]{display:none}`;
var _handleHoverEvent, handleHoverEvent_fn, _onUploadClick, onUploadClick_fn, _noUploadTemplate, noUploadTemplate_get, _onDeleteClick, onDeleteClick_fn, _uploadedTemplate, uploadedTemplate_get, _onFileChange2, onFileChange_fn2;
var _OmniImgUpload = class _OmniImgUpload extends OmniImageInput {
  constructor() {
    super(...arguments);
    /** @internal */
    __privateAdd(this, _handleHoverEvent);
    /** @internal */
    __privateAdd(this, _onUploadClick);
    /** @internal */
    __privateAdd(this, _noUploadTemplate);
    /** @internal */
    __privateAdd(this, _onDeleteClick);
    /** @internal */
    __privateAdd(this, _uploadedTemplate);
    /**@internal */
    __privateAdd(this, _onFileChange2);
    this._internals = this.attachInternals();
    this.isHidden = true;
    this.height = 70;
    this.width = 70;
    this.imgSrc = "";
    this.valueMissingMessage = "Please select an image";
  }
  static get styles() {
    return [...super.styles, styles5];
  }
  /** @internal */
  get valid() {
    return this._internals.checkValidity();
  }
  /**
   * value behavior for file input element
   * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#value
   */
  /** @internal */
  get value() {
    var _a7;
    if ((_a7 = this._fileInputElNoValidate) == null ? void 0 : _a7.value) {
      return this._fileInputElNoValidate.value;
    }
    if (this.imgSrc) {
      const segments = this.imgSrc.split("/");
      const fileNameWithType = segments.pop();
      const [fileName, fileType] = fileNameWithType.split(".");
      return `C:\\fakepath\\${fileName}.${fileType}`;
    }
    return "";
  }
  /** @internal */
  set value(value) {
    console.error("value cannot be set. set through img property");
  }
  connectedCallback() {
    super.connectedCallback();
    this.tabIndex = !this.disabled ? 0 : -1;
  }
  /** @internal */
  async initializeFiles(imgSrc) {
    await super.initializeFiles(imgSrc);
    if (Object.keys(this._files).length) {
      const [key, value] = Object.entries(this._files)[0];
      this.filename = value.file.name;
      this._internals.setFormValue(value.file);
    }
  }
  async firstUpdated() {
    await this.updateComplete;
    if (this.required && !this.imgSrc) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this._imageIconEl);
    } else if (this.imgSrc) {
      await this.initializeFiles(this.imgSrc);
    } else {
      this._internals.setValidity({});
    }
  }
  willUpdate(changed) {
    if (changed.has("multiple")) {
      if (this.multiple) {
        console.warn("omni-img-upload does not support multiple files");
      }
      this.multiple = false;
    }
  }
  reportValidity() {
    return this._internals.reportValidity();
  }
  checkValidity() {
    return this._internals.checkValidity();
  }
  /** reset the selected images */
  reset() {
    super.reset();
    if (!this.disabled) {
      this._fileInputElNoValidate.files = null;
      this._fileInputElNoValidate.value = "";
      this.imgSrc = "";
      this.filename = "";
      this._internals.setFormValue("");
      this._internals.setValidity({});
      if (this.required) {
        this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this._imageIconEl);
      }
    }
  }
  /** @internal */
  render() {
    return html`
      <omni-style>
        <div
          style="${styleMap({ height: `${this.height}px`, width: `${this.width}px` })}"
          @mouseover=${() => __privateMethod(this, _handleHoverEvent, handleHoverEvent_fn).call(this, "enter")}
          @mouseout=${() => __privateMethod(this, _handleHoverEvent, handleHoverEvent_fn).call(this, "exit")}>
          ${when(
      !this.imgSrc,
      () => __privateGet(this, _noUploadTemplate, noUploadTemplate_get),
      () => __privateGet(this, _uploadedTemplate, uploadedTemplate_get)
    )}
        </div>
      </omni-style>
      <input type="file" @change=${__privateMethod(this, _onFileChange2, onFileChange_fn2)} accept=${this.accept} />
      <div class="tooltip-container">${this._tooltipTemplate}</div>
    `;
  }
};
_handleHoverEvent = new WeakSet();
handleHoverEvent_fn = function(which) {
  this.isHidden = which === "exit";
};
_onUploadClick = new WeakSet();
onUploadClick_fn = function() {
  this._fileInputElNoValidate.click();
};
_noUploadTemplate = new WeakSet();
noUploadTemplate_get = function() {
  return html`
      ${defaultUploadImg(html)}
      <omni-icon part="upload-icon" icon-id="omni:interactive:plus" @click=${__privateMethod(this, _onUploadClick, onUploadClick_fn)}> </omni-icon>
    `;
};
_onDeleteClick = new WeakSet();
onDeleteClick_fn = function() {
  this.reset();
  this.dispatchNewEvent("change", { detail: { file: null } });
};
_uploadedTemplate = new WeakSet();
uploadedTemplate_get = function() {
  const classes = { "is-hidden": this.isHidden };
  return html`
      <img class="image is-rounded" src=${this.imgSrc} alt="Uploaded from ${this.imgSrc}" />
      <div class="cover ${classMap(classes)}">
        <omni-icon part="upload-icon" icon-id="omni:interactive:edit" class="offset-left" @click=${__privateMethod(this, _onUploadClick, onUploadClick_fn)}>
        </omni-icon>
        <omni-icon
          part="delete-icon"
          icon-id="omni:interactive:delete"
          class="offset-right"
          @click=${__privateMethod(this, _onDeleteClick, onDeleteClick_fn)}>
        </omni-icon>
      </div>
    `;
};
_onFileChange2 = new WeakSet();
onFileChange_fn2 = async function(e) {
  if (!e.target.files.length) {
    return;
  }
  this._files = {};
  this._addFilesToOmniFileList(e.target.files);
  await this._processInvalidFiles();
  if (Object.keys(this._files).length > 0) {
    const [key, value] = Object.entries(this._files)[0];
    this.imgSrc = this._files[key].previewSrc;
    this.filename = value.file.name;
    this._internals.setFormValue(value.file);
    this._internals.setValidity({});
  }
  this._createAndEmitChangeEvent();
  this.isHidden = true;
};
_OmniImgUpload.formAssociated = true;
var OmniImgUpload = _OmniImgUpload;
__decorateClass7([
  state()
], OmniImgUpload.prototype, "isHidden", 2);
__decorateClass7([
  property({ type: String })
], OmniImgUpload.prototype, "name", 2);
__decorateClass7([
  property({ type: String })
], OmniImgUpload.prototype, "filename", 2);
__decorateClass7([
  property({ type: Number, reflect: true })
], OmniImgUpload.prototype, "height", 2);
__decorateClass7([
  property({ type: Number, reflect: true })
], OmniImgUpload.prototype, "width", 2);
__decorateClass7([
  property({ type: String, reflect: true, attribute: "img" })
], OmniImgUpload.prototype, "imgSrc", 2);
__decorateClass7([
  property({ type: String })
], OmniImgUpload.prototype, "valueMissingMessage", 2);
__decorateClass7([
  query('input[type="file"]')
], OmniImgUpload.prototype, "_fileInputElNoValidate", 2);
__decorateClass7([
  query("div")
], OmniImgUpload.prototype, "_imageIconEl", 2);
OmniElement.register("omni-img-upload", OmniImgUpload);

// node_modules/omni-ui/dist/element-internals-base.js
var __defProp8 = Object.defineProperty;
var __getOwnPropDesc8 = Object.getOwnPropertyDescriptor;
var __decorateClass8 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc8(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp8(target, key, result);
  return result;
};
var ElementInternalsBase = class extends OmniElement {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.required = false;
    this._internals = this.attachInternals();
  }
  static get formAssociated() {
    return true;
  }
  connectedCallback() {
    super.connectedCallback();
    this.tabIndex = !this.disabled ? 0 : -1;
  }
  /** check the form input for client-side validation, if false fire invalid event and send the `validationMessage` to the user agent to handle */
  reportValidity() {
    return this._internals.reportValidity();
  }
  /** check the form input for client-side validation, if false fire invalid event */
  checkValidity() {
    return this._internals.checkValidity();
  }
  /** readonly */
  get valid() {
    return this._internals.checkValidity();
  }
};
__decorateClass8([
  property({ type: Boolean, reflect: true })
], ElementInternalsBase.prototype, "disabled", 2);
__decorateClass8([
  property({ type: Boolean, reflect: true })
], ElementInternalsBase.prototype, "required", 2);

// node_modules/omni-ui/dist/component/omni-checkbox/omni-checkbox.js
var __defProp9 = Object.defineProperty;
var __getOwnPropDesc9 = Object.getOwnPropertyDescriptor;
var __decorateClass9 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc9(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp9(target, key, result);
  return result;
};
var styles6 = css`:host{--checkbox-height-width: 1.2857142857rem;--checkbox-background: linear-gradient(332deg, var(--color-primary) 0%, var(--color-secondary) 100%);--checkbox-background-error: linear-gradient(139deg, var(--color-error) 0%, var(--color-error-two) 100%);--checkbox-border-width: calc(var(--checkbox-height-width) / 9);--checkbox-border-color: var(--color-almost-black);--checkbox-border-color-hover: var(--color-primary);--checkbox-font-color: var(--color-white);display:flex;flex-direction:column;color:var(--checkbox-font-color)}:host([haslabel]){--checkbox-height-width: 0.8571428571rem}:host([dark]){--checkbox-background: linear-gradient(135deg, var(--color-white) 0%, #cad2db 100%);--checkbox-border-color: var(--color-white);--checkbox-border-color-hover: var(--color-white);--checkbox-font-color: var(--color-primary)}:host([haslabel][dark]) ::slotted(*){color:var(--color-white) !important;opacity:.78}:host(:not([disabled]):hover),:host(:not([disabled]):active),:host(:not([disabled])[hover]){opacity:.75;outline:none;cursor:pointer}:host(:not([disabled]):hover) .checkbox,:host(:not([disabled]):active) .checkbox,:host(:not([disabled])[hover]) .checkbox{border:var(--checkbox-border-width) solid var(--checkbox-border-color-hover)}:host(:not([disabled]):hover) .checkbox.error,:host(:not([disabled]):active) .checkbox.error,:host(:not([disabled])[hover]) .checkbox.error{border:var(--checkbox-border-width) solid var(--color-error)}:host(:not([disabled]):hover) .checkbox.checked,:host(:not([disabled]):hover) .checkbox.indeterminate,:host(:not([disabled]):active) .checkbox.checked,:host(:not([disabled]):active) .checkbox.indeterminate,:host(:not([disabled])[hover]) .checkbox.checked,:host(:not([disabled])[hover]) .checkbox.indeterminate{border:none}:host(:not([disabled]):hover) ::slotted(*){opacity:.75;cursor:pointer}::slotted(*){margin-left:.5714285714rem !important;line-height:1.4285714286rem !important}:host([disabled]:hover),:host([disabled]){cursor:not-allowed;opacity:.5}:host([disabled]) ::slotted(*){cursor:not-allowed}.container{display:flex;justify-content:flex-start;align-items:center}.checkbox{box-sizing:border-box;width:var(--checkbox-height-width);height:var(--checkbox-height-width);border:var(--checkbox-border-width) solid var(--checkbox-border-color);border-radius:calc(var(--checkbox-height-width)/3);display:flex;justify-content:center;align-items:center}.checkbox.checked,.checkbox.indeterminate{border-width:0;background:var(--checkbox-background)}.checkbox svg{height:calc(var(--checkbox-height-width)*2/3);width:calc(var(--checkbox-height-width)*2.1/3)}.checkbox span{flex-grow:1;background-color:var(--checkbox-font-color);flex:0 0 calc(var(--checkbox-height-width)*2/3);height:var(--checkbox-border-width)}.checkbox.checked.error,.checkbox.indeterminate.error{border:none;background:var(--checkbox-background-error)}.checkbox.error{border:var(--checkbox-border-width) solid var(--color-error)}.checkbox.disabled{border:var(--checkbox-border-width) solid var(--color-shark)}.checkbox.indeterminate.disabled,.checkbox.checked.disabled{border:none}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.help-text{justify-content:flex-end;align-items:center}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}`;
var _checkboxSvg, _determineValidityAndValue, determineValidityAndValue_fn, _toggle, _footerTemplate, footerTemplate_get;
var OmniCheckbox = class extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    __privateAdd(this, _determineValidityAndValue);
    __privateAdd(this, _footerTemplate);
    __privateAdd(this, _checkboxSvg, void 0);
    __privateAdd(this, _toggle, void 0);
    this.valueMissingMessage = "Please check this box if you want to proceed.";
    this.checked = false;
    this.indeterminate = false;
    this.showfooter = false;
    __privateSet(this, _checkboxSvg, html`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 12" fill="none">
    <path
      fill-rule="evenodd"
      clip-rule="evenodd"
      d="M11.7311 1.39861C11.7554 1.4186 11.7776 1.44088 11.7976 1.46512L11.8628 1.54411C12.0457 
      1.7658 12.0457 2.08605 11.8628 2.30774L8.75605 6.07322L7.99565 6.99484L5.55909 9.9479L5.56845 
      9.94168L5.1036 10.5232C5.09356 10.5394 5.08268 10.5552 5.07093 10.5707L4.9986 10.6658C4.82292 10.8969 
      4.49317 10.9418 4.26209 10.7661C4.23711 10.7471 4.21388 10.7259 4.19268 10.7028L2.46007 8.81196L1.98057 
      8.28869L0.157622 6.29928C-0.0366983 6.08722 -0.0531719 5.76708 0.118354 5.53619L0.182641 5.44966C0.346753 
      5.22875 0.658876 5.1827 0.879785 5.34681C0.90515 5.36566 0.928665 5.38687 0.950012 5.41017L2.70014 
      7.3201L3.17963 7.84337L4.56678 9.30656L7.23525 6.07322L7.99565 5.1516L11.0372 1.46512C11.2105 1.25514 11.5212 1.22536 11.7311 1.39861Z"
      fill="currentColor" />
  </svg>`);
    this._handleKeyup = (e) => {
      if (e.key === "Enter") {
        __privateGet(this, _toggle).call(this);
      }
      if (e.key === "Escape") {
        this.blur();
      }
    };
    __privateSet(this, _toggle, (e = null, toggleTo = !this.checked) => {
      if (this.disabled)
        return;
      this.checked = toggleTo;
      __privateMethod(this, _determineValidityAndValue, determineValidityAndValue_fn).call(this);
      this.dispatchNewEvent("change", { detail: this.checked });
    });
  }
  static get styles() {
    return [...super.styles, styles6];
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", __privateGet(this, _toggle));
    this.addEventListener("keyup", this._handleKeyup);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", __privateGet(this, _toggle));
    this.removeEventListener("keyup", this._handleKeyup);
  }
  async firstUpdated() {
    await this.updateComplete;
    __privateMethod(this, _determineValidityAndValue, determineValidityAndValue_fn).call(this);
  }
  updated() {
    if (this.slottedElements.length || this._internals.labels.length) {
      this.setAttribute("haslabel", "");
    } else {
      this.removeAttribute("haslabel");
    }
  }
  /** toggle the checkbox programmatically */
  toggle() {
    __privateGet(this, _toggle).call(this);
  }
  /** check the checkbox programmatically */
  check() {
    __privateGet(this, _toggle).call(this, null, true);
  }
  /** uncheck the checkbox programmatically */
  uncheck() {
    __privateGet(this, _toggle).call(this, null, false);
  }
  // prettier-ignore
  render() {
    const classes = classMap({
      checked: this.checked && !this.indeterminate,
      indeterminate: this.indeterminate,
      error: typeof this.error !== "undefined" && this.error !== null,
      checkbox: true,
      disabled: this.disabled
    });
    return html`
      <div class="container" part="container">
        <div class=${classes} part="checkbox">
          ${this.checked && !this.indeterminate ? __privateGet(this, _checkboxSvg) : nothing}
          ${this.indeterminate ? html`<span></span>` : nothing}
        </div> 
        <slot></slot>
      </div>
      ${__privateGet(this, _footerTemplate, footerTemplate_get)}
    `;
  }
};
_checkboxSvg = new WeakMap();
_determineValidityAndValue = new WeakSet();
determineValidityAndValue_fn = function() {
  this._internals.setValidity({});
  switch (this.checked) {
    case true:
      if (!this.value) {
        this.value = "on";
      }
      if (this.indeterminate) {
        this.indeterminate = false;
      }
      if (this.required) {
        this._internals.setValidity({});
        this._internals.setFormValue(this.value);
      } else {
        this._internals.setFormValue(this.value);
      }
      break;
    case false:
    default:
      if (this.required) {
        this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.checkboxEl);
        this._internals.setFormValue("");
      } else {
        this._internals.setFormValue(null);
      }
      break;
  }
};
_toggle = new WeakMap();
_footerTemplate = new WeakSet();
footerTemplate_get = function() {
  if (!this.showfooter)
    return nothing;
  const footerSpacer = html`<div class="footer-spacer"></div>`;
  if (!this.error)
    return footerSpacer;
  if (this.error) {
    return html` <div class="footer-container error-text">
        <omni-icon icon-id="omni:informative:error"></omni-icon>
        <span>${this.error}</span>
      </div>`;
  }
};
__decorateClass9([
  property({ type: String })
], OmniCheckbox.prototype, "valueMissingMessage", 2);
__decorateClass9([
  property({ type: Boolean, reflect: true })
], OmniCheckbox.prototype, "checked", 2);
__decorateClass9([
  property({ type: Boolean, reflect: true })
], OmniCheckbox.prototype, "indeterminate", 2);
__decorateClass9([
  property({ type: String, reflect: true })
], OmniCheckbox.prototype, "error", 2);
__decorateClass9([
  property({ type: String, reflect: true })
], OmniCheckbox.prototype, "name", 2);
__decorateClass9([
  property({ type: String, reflect: true })
], OmniCheckbox.prototype, "value", 2);
__decorateClass9([
  property({ type: Boolean, reflect: true })
], OmniCheckbox.prototype, "showfooter", 2);
__decorateClass9([
  query(".checkbox")
], OmniCheckbox.prototype, "checkboxEl", 2);
__decorateClass9([
  queryAssignedElements()
], OmniCheckbox.prototype, "slottedElements", 2);
OmniElement.register("omni-checkbox", OmniCheckbox);

// node_modules/omni-ui/dist/component/omni-dropdown/omni-dropdown.types.js
function isGroupHeader(option) {
  return option == null ? void 0 : option.groupheader;
}

// node_modules/omni-ui/dist/component/omni-options/omni-options.js
var __defProp10 = Object.defineProperty;
var __getOwnPropDesc10 = Object.getOwnPropertyDescriptor;
var __decorateClass10 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc10(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp10(target, key, result);
  return result;
};
var styles7 = css`.item{min-height:2.5714285714rem;padding:.5357142857rem .8571428571rem .5357142857rem .8571428571rem;margin:0 0 .2142857143rem 0;user-select:none;display:flex;flex-grow:1;align-items:center;justify-content:flex-start}.item:last-child{margin-bottom:0}.item:hover{background-color:var(--white);outline:none}.item:focus,.item:active{background:linear-gradient(136.75deg, rgba(var(--rgb-primary), 0.14) 28.19%, rgba(var(--rgb-primary), 0.14) 109.31%);outline:none}.item:not(.disabled):hover omni-checkbox{--checkbox-border-color: var(--color-primary)}.item label{color:#3b3e3f;pointer-events:none;font-size:1rem;font-style:normal;font-weight:400;line-height:1.3571428571rem;letter-spacing:.0030714286rem}.item .item-gutter{display:flex;flex-direction:column;justify-content:center;align-items:center;min-width:1.5714285714rem;max-width:1.5714285714rem;min-height:1.4285714286rem;max-height:1.4285714286rem;padding:0 .7142857143rem 0 0}.item .item-gutter omni-icon{--color-icon-lines: var(--color-primary);height:1.1428571429rem;width:1.1428571429rem;max-height:100%}.item .post-template{display:flex;justify-content:flex-end;flex-grow:3}.item.disabled{cursor:not-allowed}.item.disabled:hover{background:rgba(0,0,0,0)}.item.disabled:focus,.item.disabled:active{outline:none;background:rgba(0,0,0,0)}.item.disabled label{color:#a2a9ad !important}:host([hasgroupheaders]) .item.groupheader span{color:#a2a9ad !important;font-weight:600}:host([hasgroupheaders]) .item.groupheader .item-gutter{display:flex;flex-direction:column;justify-content:flex-end;align-items:center;min-width:.2857142857rem;max-width:.2857142857rem;min-height:1.4285714286rem;max-height:1.4285714286rem;padding:0}:host([hasgroupheaders]) .item.groupheader.disabled{cursor:default}:host([hasgroupheaders]) .item:not(.groupheader) .item-gutter{display:flex;flex-direction:column;justify-content:center;align-items:center;min-width:2.4285714286rem;max-width:2.4285714286rem;min-height:1.4285714286rem;max-height:1.4285714286rem;padding:0}`;
var _toDisplayValue, toDisplayValue_fn, _getOptionId, getOptionId_fn, _handleSelectChange, handleSelectChange_fn, _handleEnterOnItem, handleEnterOnItem_fn, _optionListItem;
var OmniOptions = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _toDisplayValue);
    __privateAdd(this, _getOptionId);
    __privateAdd(this, _handleSelectChange);
    __privateAdd(this, _handleEnterOnItem);
    __privateAdd(this, _optionListItem, void 0);
    this.multiselect = false;
    __privateSet(this, _optionListItem, (option, index) => {
      var _a7, _b2, _c;
      const _classes = classMap({
        item: true,
        selected: (_a7 = this.selected) == null ? void 0 : _a7.has(option),
        disabled: (_b2 = this.disabledList) == null ? void 0 : _b2.has(option),
        groupheader: isGroupHeader(option)
      });
      const baseItem = (slot = null) => {
        var _a8, _b3, _c2, _d;
        return html`
      <div
        class=${_classes}
        slot="${slot}"
        tabindex=${!this.multiselect && !((_a8 = this.disabledList) == null ? void 0 : _a8.has(option)) ? 0 : -1}
        @click=${() => __privateMethod(this, _handleSelectChange, handleSelectChange_fn).call(this, option)}
        @keyup=${(e) => __privateMethod(this, _handleEnterOnItem, handleEnterOnItem_fn).call(this, e, option)}>
        <span class="item-gutter">
          ${this.multiselect && !isGroupHeader(option) ? html`<omni-checkbox
                tabindex="0"
                id=${__privateMethod(this, _getOptionId, getOptionId_fn).call(this, option, index)}
                ?disabled=${(_b3 = this.disabledList) == null ? void 0 : _b3.has(option)}
                ?checked="${(_c2 = this.selected) == null ? void 0 : _c2.has(option)}"
                @change=${(e) => e.stopPropagation()}></omni-checkbox>` : nothing}
          ${!this.multiselect && ((_d = this.selected) == null ? void 0 : _d.has(option)) ? html`<omni-icon icon-id="icon:informative:check" class="is-size-6"></omni-icon>` : nothing}
        </span>
        <label for="${__privateMethod(this, _getOptionId, getOptionId_fn).call(this, option, index)}">${__privateMethod(this, _toDisplayValue, toDisplayValue_fn).call(this, option)}</label>
        ${typeof option === "object" && (option == null ? void 0 : option.postTemplate) ? html`<div class="post-template">${option.postTemplate}</div>` : this.optionsPostTemplate ? html`<div class="post-template">${this.optionsPostTemplate(option)}</div>` : nothing}
      </div>
    `;
      };
      if (((_c = this.disabledList) == null ? void 0 : _c.has(option)) && this.disabledMessage) {
        return html`
        <omni-tooltip>
          ${baseItem("invoker")}
          <div slot="content">${this.disabledMessage}</div>
        </omni-tooltip>
      `;
      } else {
        return baseItem();
      }
    });
  }
  static get styles() {
    return [...super.styles, styles7];
  }
  async firstUpdated() {
    if (!this.options.some((option) => typeof option === "object" && (option == null ? void 0 : option.attributes)))
      return;
    const eleRef = this.shadowRoot.querySelectorAll(".item");
    this.options.forEach((option, index) => {
      if (typeof option === "object" && (option == null ? void 0 : option.attributes)) {
        option.attributes.forEach((attr) => {
          switch (typeof attr) {
            case "string":
              eleRef[index].setAttribute(attr, "");
              break;
            case "object":
              eleRef[index].setAttribute(attr.key, attr.value);
              break;
          }
        });
      }
    });
  }
  render() {
    return this.options.map(__privateGet(this, _optionListItem));
  }
};
_toDisplayValue = new WeakSet();
toDisplayValue_fn = function(option) {
  return option && typeof option === "object" ? option.value : option;
};
_getOptionId = new WeakSet();
getOptionId_fn = function(option, index) {
  switch (typeof option) {
    case "object":
      return option.id ?? "_" + index;
    case "string":
      return option;
    default:
      return option;
  }
};
_handleSelectChange = new WeakSet();
handleSelectChange_fn = function(option) {
  var _a7;
  if ((_a7 = this.disabledList) == null ? void 0 : _a7.has(option))
    return;
  this.dispatchNewEvent("selectChange", { detail: option });
};
_handleEnterOnItem = new WeakSet();
handleEnterOnItem_fn = function(event, option) {
  this.dispatchNewEvent("enterOnItem", { detail: { value: option, eventKey: event.key } });
};
_optionListItem = new WeakMap();
__decorateClass10([
  property({ type: Array })
], OmniOptions.prototype, "options", 2);
__decorateClass10([
  property({ type: Boolean })
], OmniOptions.prototype, "multiselect", 2);
__decorateClass10([
  property({ type: String })
], OmniOptions.prototype, "disabledMessage", 2);
__decorateClass10([
  property({ type: Object })
], OmniOptions.prototype, "disabledList", 2);
__decorateClass10([
  property({ type: Object })
], OmniOptions.prototype, "selected", 2);
__decorateClass10([
  property({ attribute: false })
], OmniOptions.prototype, "optionsPostTemplate", 2);
OmniElement.register("omni-options", OmniOptions);

// node_modules/omni-ui/dist/component/omni-search/omni-search.js
var __defProp11 = Object.defineProperty;
var __getOwnPropDesc11 = Object.getOwnPropertyDescriptor;
var __decorateClass11 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc11(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp11(target, key, result);
  return result;
};
var styles8 = css`omni-style,.omni .field,.control,input{position:relative;height:100%;display:flex;flex-direction:column}.icon{pointer-events:all !important;cursor:pointer !important;z-index:auto !important;display:flex;flex-direction:column;justify-content:center;align-items:center}.icon.is-left-icon{position:absolute;left:0;bottom:0;margin:auto 0}.icon.is-right-icon{position:absolute;right:0;bottom:0;margin:auto 0}.omni .input:focus-visible{box-shadow:none !important}omni-icon{font-size:1.5rem}omni-icon::part(icon){max-height:100%}.options{position:absolute;max-height:15rem;background:#fff;margin-top:5px;z-index:10;width:100%;border-radius:10px;box-shadow:0 8px 44px -5px rgba(38,55,79,.29);overflow:auto;cursor:pointer}`;
var _optionsOpen, optionsOpen_fn, _handleOutsideClick, _selectFromFilteredList, selectFromFilteredList_fn, _handleEnterOnItem2, handleEnterOnItem_fn2;
var OmniSearch = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _optionsOpen);
    __privateAdd(this, _selectFromFilteredList);
    __privateAdd(this, _handleEnterOnItem2);
    __privateAdd(this, _handleOutsideClick, void 0);
    this.isExpanded = false;
    this.value = "";
    this.ph = "";
    this.filteredOptions = [];
    this.isOpen = false;
    this.inputDebounceTimer = 750;
    this._showFilterOptions = false;
    this._optionsStyle = { top: "25px" };
    __privateSet(this, _handleOutsideClick, (event) => {
      if (!event.composedPath().includes(this._inputField)) {
        this._showFilterOptions = false;
      }
    });
  }
  static get styles() {
    return [...super.styles, styles8];
  }
  async connectedCallback() {
    super.connectedCallback();
    if (this.filteredOptions.length > 0)
      document.addEventListener("click", __privateGet(this, _handleOutsideClick));
    if (this.value) {
      await this.updateComplete;
      this.updateSearch();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    document.removeEventListener("click", __privateGet(this, _handleOutsideClick));
  }
  updated(changed) {
    var _a7;
    if (!changed.has("_optionsStyle") && ((_a7 = this.filteredOptions) == null ? void 0 : _a7.length) && this._inputField) {
      const height = this._inputField.getBoundingClientRect().height;
      this._optionsStyle = { top: `${height}px` };
    }
  }
  getInput() {
    return this.shadowRoot.querySelector("#search-input");
  }
  async toggleSearch(flag = !this.isExpanded) {
    var _a7;
    this.isExpanded = this.isOpen ? this.isOpen : flag;
    if (flag || this.isOpen) {
      await this.updateComplete;
      (_a7 = this.getInput()) == null ? void 0 : _a7.focus();
    }
  }
  closeSearch() {
    this.getInput().value = "";
    this.value = "";
    this.toggleSearch(false);
    this.updateSearch();
  }
  updateSearch() {
    const { value } = this.getInput() ?? { value: this.value };
    this.value = value;
    this.dispatchNewEvent("search-update", { detail: { value } });
    this._showFilterOptions = true;
  }
  /** @internal */
  get xIconTemplate() {
    var _a7;
    if (this.isOpen && !((_a7 = this.value) == null ? void 0 : _a7.length))
      return nothing;
    return html`
      <span class="icon is-right-icon" part="x-icon-wrapper">
        <omni-icon part="x-icon" id="clear-search-icon" icon-id="omni:interactive:close" @click=${this.closeSearch}>
        </omni-icon>
      </span>
    `;
  }
  render() {
    var _a7;
    return html`
      <omni-style>
        ${this.isExpanded || this.isOpen ? html`
              <div class="field">
                <div class="control has-icons-left has-icons-right">
                  <input
                    class="input is-small"
                    part="input"
                    type="text"
                    id="search-input"
                    tabindex="-1"
                    placeholder="${this.ph || "Search Entry"}"
                    @focus=${__privateMethod(this, _optionsOpen, optionsOpen_fn)}
                    @input=${debounce(() => this.updateSearch(), this.inputDebounceTimer)}
                    .value=${this.value} />
                  <span class="icon is-left-icon" part="search-icon-opened-wrapper">
                    <omni-icon
                      part="search-icon-opened"
                      icon-id="omni:interactive:search"
                      @click=${this.toggleSearch}></omni-icon>
                  </span>
                  ${this.xIconTemplate}
                </div>
                ${this._showFilterOptions && ((_a7 = this.filteredOptions) == null ? void 0 : _a7.length) ? html`
                      <div class="options" style=${styleMap(this._optionsStyle)}>
                        <omni-options
                          .options=${this.filteredOptions}
                          @selectChange=${(e) => {
      __privateMethod(this, _selectFromFilteredList, selectFromFilteredList_fn).call(this, e);
    }}
                          @enterOnItem=${(e) => {
      __privateMethod(this, _handleEnterOnItem2, handleEnterOnItem_fn2).call(this, e);
    }}></omni-options>
                      </div>
                    ` : nothing}
              </div>
            ` : html`
              <div class="icon" part="search-icon-closed-wrapper">
                <omni-icon
                  part="search-icon-closed"
                  icon-id="omni:interactive:search"
                  @click=${this.toggleSearch}></omni-icon>
              </div>
            `}
      </omni-style>
    `;
  }
};
_optionsOpen = new WeakSet();
optionsOpen_fn = function() {
  if (this.filteredOptions.length > 0) {
    this._showFilterOptions = true;
  }
};
_handleOutsideClick = new WeakMap();
_selectFromFilteredList = new WeakSet();
selectFromFilteredList_fn = function(e) {
  const data = e.detail;
  this.value = String(typeof data === "object" ? data.value : data);
  this.dispatchNewEvent("search-update", { detail: { value: this.value.trim() } });
  this._showFilterOptions = false;
};
_handleEnterOnItem2 = new WeakSet();
handleEnterOnItem_fn2 = function(e) {
  if (e.detail.eventKey === "Enter") {
    const data = e.detail.value;
    this.value = String(typeof data === "object" ? data.value : data);
    this.dispatchNewEvent("search-update", { detail: { value: this.value.trim() } });
    this._showFilterOptions = false;
  }
  if (e.detail.eventKey === "Escape") {
    this._showFilterOptions = false;
  }
};
__decorateClass11([
  property({ type: Boolean })
], OmniSearch.prototype, "isExpanded", 2);
__decorateClass11([
  property({ type: String })
], OmniSearch.prototype, "value", 2);
__decorateClass11([
  property({ type: String })
], OmniSearch.prototype, "ph", 2);
__decorateClass11([
  property({ type: Array, reflect: true })
], OmniSearch.prototype, "filteredOptions", 2);
__decorateClass11([
  property({ type: Boolean, attribute: true, reflect: true })
], OmniSearch.prototype, "isOpen", 2);
__decorateClass11([
  property({ type: Number })
], OmniSearch.prototype, "inputDebounceTimer", 2);
__decorateClass11([
  state()
], OmniSearch.prototype, "_showFilterOptions", 2);
__decorateClass11([
  state()
], OmniSearch.prototype, "_optionsStyle", 2);
__decorateClass11([
  query(".field")
], OmniSearch.prototype, "_inputField", 2);
OmniElement.register("omni-search", OmniSearch);

// node_modules/omni-ui/dist/component/omni-loading-indicator/omni-loading-indicator.js
var __defProp12 = Object.defineProperty;
var __getOwnPropDesc12 = Object.getOwnPropertyDescriptor;
var __decorateClass12 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc12(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp12(target, key, result);
  return result;
};
var styles9 = css`:host{display:flex;flex-direction:column;justify-content:center;align-items:center;width:100%}svg{width:6.7857142857rem;animation:loading-spinner .8196721311s linear infinite}slot{font-family:"Open Sans",sans-serif;font-size:9pt;color:#252a37}@keyframes loading-spinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}`;
var OmniLoadingIndicator = class extends OmniElement {
  constructor() {
    super(...arguments);
    this.color = "#10a1d2";
    this.altText = "Loading spinner graphic";
  }
  static get styles() {
    return [...super.styles, styles9];
  }
  render() {
    return html`
      <omni-style>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          style="margin:auto;background:0 0"
          viewBox="0 0 100 100"
          preserveAspectRatio="xMidYMid"
          display="block"
          part="svg">
          <title>${this.altText}</title>
          <circle
            cx="50"
            cy="50"
            r="32"
            stroke-width="6"
            stroke="${this.color}"
            stroke-dasharray="50.26548245743669 50.26548245743669"
            fill="none"
            stroke-linecap="round"
            transform="rotate(128.654 50 50)"></circle>
        </svg>
        <slot part="info"></slot>
      </omni-style>
    `;
  }
};
__decorateClass12([
  property({ type: String })
], OmniLoadingIndicator.prototype, "color", 2);
__decorateClass12([
  property({ type: String })
], OmniLoadingIndicator.prototype, "altText", 2);
OmniElement.register("omni-loading-indicator", OmniLoadingIndicator);

// node_modules/omni-ui/dist/assets/badges.js
var foundationsBadge = (tag) => tag`<svg viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><radialGradient cx="50%" cy="50%" fx="50%" fy="50%" r="55.8%" id="b"><stop stop-color="#00CFEB" offset="0%"/><stop stop-color="#00A1D2" offset="100%"/></radialGradient><circle id="a" cx="18" cy="18" r="18"/></defs><g fill="none" fill-rule="evenodd"><circle cx="18" cy="18" r="18" fill="#000" fill-rule="nonzero" transform="translate(.6 1)"/><g transform="translate(.6 1)"><mask id="c" fill="#fff"><use xlink:href="#a"/></mask><use stroke="#24B8DD" fill="url(#b)" xlink:href="#a"/><path d="M12.7 29.8a19 19 0 1 0 0-38s8.5 6.7 6.9 20.5C18 26 12.7 29.8 12.7 29.8Z" fill="#FFF" fill-rule="nonzero" opacity=".1" mask="url(#c)" transform="rotate(-60 22.2 10.8)"/></g><g><path d="M9.6 11.8v6.8c0 4.4 2.8 8.3 7 9.9l1 .3c.6.3 1.3.3 2 0l1-.3c4.2-1.6 7-5.5 7-10v-6.7c0-.5-.3-1-.8-1.2-2.6-1-5.4-1.6-8.2-1.6-2.9 0-5.6.5-8.2 1.6-.5.2-.8.7-.8 1.2Z" stroke-linecap="round" stroke-linejoin="round" stroke="#FFF" stroke-width="1.3"/><path d="M23.7 14.4c.2.3.2.6 0 .7L21.4 18l-.6.7-1.9 2.1-.3.5h-.1a.4.4 0 0 1-.6.1L16.5 20l-.3-.4-1.4-1.4a.5.5 0 0 1 0-.7.4.4 0 0 1 .6 0l1.3 1.4.4.4 1 1 2.1-2.3.6-.7 2.3-2.7c.2-.2.4-.2.6 0Z" fill="#FFF" fill-rule="nonzero"/></g></g></svg>`;
var professionalBadge = (tag) => tag`<svg viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><radialGradient cx="50%" cy="50%" fx="50%" fy="50%" r="55.8%" id="b"><stop stop-color="#FFDC8E" offset="0%"/><stop stop-color="#DE971E" offset="100%"/></radialGradient><circle id="a" cx="18" cy="18" r="18"/></defs><g fill="none" fill-rule="evenodd"><circle cx="18" cy="18" r="18" fill="#000" fill-rule="nonzero" transform="translate(1.4 1)"/><g transform="translate(1.4 1)"><mask id="c" fill="#fff"><use xlink:href="#a"/></mask><use stroke="#F8D080" fill="url(#b)" xlink:href="#a"/><path d="M12.7 29.8a19 19 0 1 0 0-38s8.5 6.7 6.9 20.5C18 26 12.7 29.8 12.7 29.8Z" fill="#FFF" fill-rule="nonzero" opacity=".1" mask="url(#c)" transform="rotate(-60 22.2 10.8)"/></g><g><path d="M10.4 11.8v6.8c0 4.4 2.8 8.3 7 9.9l1 .3c.7.3 1.4.3 2 0l1-.3c4.2-1.6 7-5.5 7-10v-6.7c0-.5-.3-1-.8-1.2C25 9.6 22.3 9 19.4 9c-2.8 0-5.6.5-8.2 1.6-.5.2-.8.7-.8 1.2Z" stroke-linecap="round" stroke-linejoin="round" stroke="#FFF" stroke-width="1.3"/><path d="M24.5 14.4c.3.3.3.6 0 .7L22.3 18l-.5.7-2 2.1h.1l-.4.5a.4.4 0 0 1-.7.1L17.4 20l-.4-.4-1.3-1.4a.5.5 0 0 1 0-.7.4.4 0 0 1 .5 0l1.4 1.4.4.4 1 1 2-2.3.7-.7 2.3-2.7c.1-.2.4-.2.5 0Z" fill="#FFF" fill-rule="nonzero"/></g></g></svg>`;
var endToEndBadge = (tag) => tag`<svg viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><radialGradient cx="50%" cy="50%" fx="50%" fy="50%" r="55.8%" id="b"><stop stop-color="#D6D6D4" offset="0%"/><stop stop-color="#6D6D6D" offset="100%"/></radialGradient><circle id="a" cx="18" cy="18" r="18"/></defs><g fill="none" fill-rule="evenodd"><circle cx="18" cy="18" r="18" fill="#000" fill-rule="nonzero" transform="translate(1 1)"/><g transform="translate(1 1)"><mask id="c" fill="#fff"><use xlink:href="#a"/></mask><use stroke="#CBCAC9" fill="url(#b)" xlink:href="#a"/><path d="M12.7 29.8a19 19 0 1 0 0-38s8.5 6.7 6.9 20.5C18 26 12.7 29.8 12.7 29.8Z" fill="#FFF" fill-rule="nonzero" opacity=".1" mask="url(#c)" transform="rotate(-60 22.2 10.8)"/></g><g><path d="M10 11.8v6.8c0 4.4 2.8 8.3 7 9.9l1 .3c.6.3 1.4.3 2 0l1-.3c4.2-1.6 7-5.5 7-10v-6.7c0-.5-.3-1-.8-1.2C24.6 9.6 21.8 9 19 9c-2.8 0-5.6.5-8.2 1.6-.5.2-.8.7-.8 1.2Z" stroke-linecap="round" stroke-linejoin="round" stroke="#FFF" stroke-width="1.3"/><path d="M24.1 14.4c.2.3.2.6 0 .7L21.9 18l-.6.7-1.8 2.1-.4.5a.4.4 0 0 1-.7.1L17 20l-.4-.4-1.3-1.4a.5.5 0 0 1 0-.7.4.4 0 0 1 .5 0l1.4 1.4.3.4 1 1 2.1-2.3.6-.7 2.4-2.7c.1-.2.3-.2.5 0Z" fill="#FFF" fill-rule="nonzero"/></g></g></svg>`;

// node_modules/omni-ui/dist/component/omni-badge/omni-badge.js
var __defProp13 = Object.defineProperty;
var __getOwnPropDesc13 = Object.getOwnPropertyDescriptor;
var __decorateClass13 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc13(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp13(target, key, result);
  return result;
};
var styles10 = css`:host{height:2em;width:2em}`;
var OmniBadge = class extends OmniElement {
  constructor() {
    super(...arguments);
    this.ariaLabel = "Certification badge";
    this.level = "omni foundations";
  }
  static get styles() {
    return [...super.styles, styles10];
  }
  renderBadge() {
    switch (this.level.toLowerCase()) {
      case "omni foundations":
        return foundationsBadge(html);
      case "omni professional":
        return professionalBadge(html);
      case "omni end-to-end":
        return endToEndBadge(html);
      default:
        console.error(`The level attribute '${this.level}' does not match an omni-badge case`);
        return "";
    }
  }
  render() {
    return html`<div part="badge">${this.renderBadge()}</div>`;
  }
};
__decorateClass13([
  property({ type: String, attribute: "aria-label", reflect: true })
], OmniBadge.prototype, "ariaLabel", 2);
__decorateClass13([
  property({ type: String, reflect: true })
], OmniBadge.prototype, "level", 2);
OmniElement.register("omni-badge", OmniBadge);

// node_modules/omni-ui/dist/component/omni-dialog/omni-dialog.js
var __defProp14 = Object.defineProperty;
var __getOwnPropDesc14 = Object.getOwnPropertyDescriptor;
var __decorateClass14 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc14(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp14(target, key, result);
  return result;
};
var styles11 = css`:host{--informative: linear-gradient(90deg, #00a1d2 0%, #00cfeb 100%);--success: var(--gradient-mint);--alert: var(--gradient-honeycomb);--error: var(--gradient-melon)}#toast{position:fixed;max-width:57.1428571429rem;border-radius:0.7142857143rem;border:none;top:1.4285714286rem;left:50%;transform:translateX(-50%);z-index:40;padding:15px}#toast .info{float:left;width:1.4285714286rem;--color-icon-lines: white;margin-top:0.7857142857rem;margin-left:1.4285714286rem;margin-right:1.4285714286rem;font-size:1.14rem}#toast.hide{display:none}#toast.close-toast{animation:fadeout .35s;animation-timing-function:cubic-besier(0.12, 1.09, 0.87, 0.98);animation-fill-mode:forwards}#toast.open-toast{display:block;animation:fadein .35s;animation-timing-function:cubic-besier(0, 0.74, 0.04, 0.92)}@keyframes fadein{from{top:-7.1428571429rem;opacity:0}to{top:1.4285714286rem;opacity:1}}@keyframes fadeout{from{top:1.4285714286rem;opacity:1}to{top:-7.1428571429rem;opacity:0}}.toast-content{padding:0.7142857143rem 1.4285714286rem 0.7142857143rem 4.2857142857rem}.banner-dialog{border:none;border-radius:0.7142857143rem;width:42.8571428571rem}.banner-dialog .close{--color-icon-lines: white;position:absolute;right:1.4285714286rem;top:0.8571428571rem;width:1.9285714286rem;cursor:pointer;font-size:1.14rem}.banner-dialog .close:hover{height:27px;border-radius:5px;background-color:rgba(255,255,255,.4)}.banner-dialog .info{float:left;width:1.4285714286rem;--color-icon-lines: white;margin-top:1.7857142857rem;margin-left:0.7142857143rem;margin-right:1.4285714286rem;font-size:1.14rem}.banner-dialog.alert omni-icon.close{--color-icon-lines: var(--color-almost-black)}.modal-dialog{border:none;border-radius:0.7142857143rem;padding:0rem;width:42.8571428571rem}.modal-dialog .close{position:absolute;right:1.0714285714rem;top:1.0714285714rem;width:1.7857142857rem;cursor:pointer}.modal-dialog .info{float:left;width:1.4285714286rem;--color-icon-lines: white;margin-top:0.2857142857rem;margin-right:1.4285714286rem;margin-left:0.7142857143rem;font-size:1.14rem}.modal-dialog .button{margin-right:10px}.omni .button.is-text.is-success:active{background-color:rgba(44,196,173,.15)}.omni .button.is-text.is-warning:active{background-color:rgba(254,216,130,.15)}.omni .button.is-text.is-danger:active{background-color:rgba(223,86,120,.15)}.informational{background:linear-gradient(90deg, #00a1d2 0%, #00cfeb 100%);color:#fff}.informational-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(90deg, #00a1d2 0%, #00cfeb 100%);color:#fff}.success{background:linear-gradient(90deg, #2cc4ad 0%, #00e3ae 100%);color:#fff}.success-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(90deg, #2cc4ad 0%, #00e3ae 100%);color:#fff}.alert{background:linear-gradient(90deg, #fed882 0%, #f8d991 100%);color:#000}.alert .info{--color-icon-lines: black !important}.alert-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(90deg, #fed882 0%, #f8d991 100%);color:#000}.alert-modal .info{--color-icon-lines: black}.error{background:linear-gradient(139.09deg, #df5678 14.91%, #f56c8e 85.27%);color:#fff}.error-modal{padding:0.7142857143rem !important;font-size:1.2857142857rem;font-weight:600;background:linear-gradient(139.09deg, #df5678 14.91%, #f56c8e 85.27%);color:#fff}dialog::backdrop{background-color:rgba(0,0,0,.4)}`;
var OmniDialog = class extends OmniElement {
  constructor() {
    super(...arguments);
    this._toastClasses = { hide: true };
    this.modalType = "modal";
    this.modalStyle = "informational";
    this.modalTitle = "";
    this.toastTimeOut = 3e3;
  }
  static get styles() {
    return [...super.styles, styles11];
  }
  get iconId() {
    const iconMaps = {
      informational: "omni:informative:info",
      alert: "omni:informative:alert",
      success: "omni:informative:success",
      error: "omni:informative:error"
    };
    return iconMaps[this.modalStyle];
  }
  get banner() {
    const bannerClasses = classMap({
      "banner-dialog": true,
      alert: this.modalStyle === "alert",
      informational: this.modalStyle === "informational",
      success: this.modalStyle === "success",
      error: this.modalStyle === "error"
    });
    return html`
      <dialog class=${bannerClasses}>
        <omni-icon class="info" icon-id="${this.iconId}"></omni-icon>
        <div style="padding:25px 30px 25px 50px;">
          <omni-icon class="close" icon-id="omni:interactive:close" @click=${this.closeModal}></omni-icon>
          <slot name="content"></slot>
        </div>
      </dialog>
    `;
  }
  get toast() {
    const toastClass = classMap({
      alert: this.modalStyle === "alert",
      informational: this.modalStyle === "informational",
      success: this.modalStyle === "success",
      error: this.modalStyle === "error",
      ...this._toastClasses
    });
    return html`
      <div id="toast" class=${toastClass}>
        <omni-icon class="info" icon-id="${this.iconId}"> </omni-icon>
        <div class="toast-content">
          <slot name="content"></slot>
        </div>
      </div>
    `;
  }
  get modal() {
    const modalClasses = classMap({
      "alert-modal": this.modalStyle === "alert",
      "informational-modal": this.modalStyle === "informational",
      "success-modal": this.modalStyle === "success",
      "error-modal": this.modalStyle === "error"
    });
    const cancelButtonTheme = classMap({
      "is-danger": this.modalStyle === "error",
      "is-success": this.modalStyle === "success",
      "is-warning": this.modalStyle === "alert"
    });
    return html`
      <dialog class="modal-dialog">
        <p class="${modalClasses}">
          <omni-icon class="info" icon-id="${this.iconId}"></omni-icon>
          ${this.modalTitle}
        </p>
        <div style="padding:24px 30px 24px 55px;">
          <slot name="content"></slot>
          <div style="padding:10px 0px 24px 0px; float:right">
            <button class="button is-text is-medium ${cancelButtonTheme}" id="cancelButton" @click=${this.closeModal}>
              Cancel
            </button>
            <slot name="button"></slot>
          </div>
        </div>
      </dialog>
    `;
  }
  openModal() {
    if (this.modalType === "toast") {
      this._toastClasses = {
        "open-toast": true
      };
      setTimeout(() => {
        this._toastClasses = {
          "close-toast": true
        };
        setTimeout(() => {
          this._toastClasses = {
            "close-toast": true,
            hide: true
          };
        }, 350);
      }, this.toastTimeOut);
    } else {
      this.dialog.showModal();
      this.dialog.focus();
    }
  }
  closeModal() {
    if (this.modalType === "toast")
      return;
    this.dispatchNewEvent("cancel");
    return this.dialog.close();
  }
  render() {
    return html` <omni-style> ${this[this.modalType]} </omni-style> `;
  }
};
__decorateClass14([
  state()
], OmniDialog.prototype, "_toastClasses", 2);
__decorateClass14([
  property({ type: String, attribute: true, reflect: true })
], OmniDialog.prototype, "modalType", 2);
__decorateClass14([
  property({ type: String, attribute: true, reflect: true })
], OmniDialog.prototype, "modalStyle", 2);
__decorateClass14([
  property({ type: String, attribute: true, reflect: true })
], OmniDialog.prototype, "modalTitle", 2);
__decorateClass14([
  property({ type: Number, attribute: true, reflect: true })
], OmniDialog.prototype, "toastTimeOut", 2);
__decorateClass14([
  query("dialog")
], OmniDialog.prototype, "dialog", 2);
OmniElement.register("omni-dialog", OmniDialog);

// node_modules/omni-ui/dist/component/omni-switch/omni-switch.js
var __defProp15 = Object.defineProperty;
var __getOwnPropDesc15 = Object.getOwnPropertyDescriptor;
var __decorateClass15 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc15(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp15(target, key, result);
  return result;
};
var styles12 = css`:host{display:inline-block;--omni-switch-gap: pxToRem(12)}:host([disabled]){opacity:50%}.container{--generic-switch-focus: none;position:relative;height:auto;cursor:pointer}:host([disabled]) .container{cursor:not-allowed}.container{display:flex;align-items:center}.track{background-color:var(--color-shark);border-radius:0.8571428571rem;width:3.4285714286rem;height:1.7142857143rem;position:relative}.toggle{width:auto;height:auto}label{margin-right:0.7142857143rem}:not([name=end])::slotted(*){margin-right:var(--omni-switch-gap)}[name=end]{display:inline-block}[name=end]::slotted(*){margin-left:var(--omni-switch-gap)}.thumb{top:0;position:absolute;right:auto;margin:0.2142857143rem;border-radius:50%;background-color:#fff;height:1.2857142857rem;width:1.2857142857rem;transition:transform .1s ease}:host([checked]) .track{background-image:var(--gradient-electric-blue)}:host([checked][error]) .track{background-image:var(--gradient-error)}:host([checked]) .track::after{content:"";display:block;top:30%;left:20%;height:0.4285714286rem;width:0.7857142857rem;position:absolute;border-style:solid;border-color:#fff;border-width:0 0 0.0714285714rem 0.0714285714rem;transform:rotate(310deg)}:host([checked]) .thumb{transform:translateX(1.7142857143rem)}.toggle:focus{outline:0}.toggle:focus-visible{box-shadow:0 0 0 0.2142857143rem var(--color-electric-blue) !important;border-radius:0.8571428571rem}`;
var _handleCheckedChanged, handleCheckedChanged_fn, _handleKeyup;
var OmniSwitch = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _handleCheckedChanged);
    __privateAdd(this, _handleKeyup, void 0);
    this.checked = false;
    this.error = false;
    this.disabled = false;
    __privateSet(this, _handleKeyup, (e) => {
      if (e.key === "Enter") {
        __privateMethod(this, _handleCheckedChanged, handleCheckedChanged_fn).call(this);
      }
      if (e.key === "Escape") {
        this.blur();
      }
    });
  }
  static get styles() {
    return [...super.styles, styles12];
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", __privateMethod(this, _handleCheckedChanged, handleCheckedChanged_fn));
    this.addEventListener("keyup", __privateGet(this, _handleKeyup));
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", __privateMethod(this, _handleCheckedChanged, handleCheckedChanged_fn));
    this.removeEventListener("keyup", __privateGet(this, _handleKeyup));
  }
  render() {
    const classes = classMap({
      checked: this.checked,
      error: this.error
    });
    return html`
      <div class="container" part="container">
        <label> <slot></slot> </label>
        <div part="toggle" class="toggle ${classes}" tabindex="0">
          <div class="track"></div>
          <div class="thumb"></div>
        </div>
        <slot name="end"></slot>
      </div>
    `;
  }
};
_handleCheckedChanged = new WeakSet();
handleCheckedChanged_fn = function(e = null, toggle = !this.checked) {
  if (this.disabled)
    return;
  this.checked = toggle;
  const evtDetail = { detail: { checked: this.checked } };
  this.dispatchNewEvent("input", evtDetail);
  this.dispatchNewEvent("change", evtDetail);
};
_handleKeyup = new WeakMap();
__decorateClass15([
  property({ type: Boolean, reflect: true })
], OmniSwitch.prototype, "checked", 2);
__decorateClass15([
  property({ type: Boolean, reflect: true })
], OmniSwitch.prototype, "error", 2);
__decorateClass15([
  property({ type: Boolean, reflect: true })
], OmniSwitch.prototype, "disabled", 2);
OmniElement.register("omni-switch", OmniSwitch);

// node_modules/lit-html/development/directive-helpers.js
var _a5;
var _b;
var { _ChildPart: ChildPart } = _$LH;
var ENABLE_SHADYDOM_NOPATCH = true;
var wrap = ENABLE_SHADYDOM_NOPATCH && ((_a5 = window.ShadyDOM) === null || _a5 === void 0 ? void 0 : _a5.inUse) && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : (node) => node;
var isPrimitive = (value) => value === null || typeof value != "object" && typeof value != "function";
var TemplateResultType = {
  HTML: 1,
  SVG: 2
};
var isTemplateResult = (value, type) => type === void 0 ? (
  // This property needs to remain unminified.
  (value === null || value === void 0 ? void 0 : value["_$litType$"]) !== void 0
) : (value === null || value === void 0 ? void 0 : value["_$litType$"]) === type;
var isCompiledTemplateResult = (value) => {
  var _a7;
  return ((_a7 = value === null || value === void 0 ? void 0 : value["_$litType$"]) === null || _a7 === void 0 ? void 0 : _a7.h) != null;
};
var isDirectiveResult = (value) => (
  // This property needs to remain unminified.
  (value === null || value === void 0 ? void 0 : value["_$litDirective$"]) !== void 0
);
var getDirectiveClass = (value) => (
  // This property needs to remain unminified.
  value === null || value === void 0 ? void 0 : value["_$litDirective$"]
);
var isSingleExpression = (part) => part.strings === void 0;
var createMarker = () => document.createComment("");
var insertPart = (containerPart, refPart, part) => {
  var _a7;
  const container = wrap(containerPart._$startNode).parentNode;
  const refNode = refPart === void 0 ? containerPart._$endNode : refPart._$startNode;
  if (part === void 0) {
    const startNode = wrap(container).insertBefore(createMarker(), refNode);
    const endNode = wrap(container).insertBefore(createMarker(), refNode);
    part = new ChildPart(startNode, endNode, containerPart, containerPart.options);
  } else {
    const endNode = wrap(part._$endNode).nextSibling;
    const oldParent = part._$parent;
    const parentChanged = oldParent !== containerPart;
    if (parentChanged) {
      (_a7 = part._$reparentDisconnectables) === null || _a7 === void 0 ? void 0 : _a7.call(part, containerPart);
      part._$parent = containerPart;
      let newConnectionState;
      if (part._$notifyConnectionChanged !== void 0 && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {
        part._$notifyConnectionChanged(newConnectionState);
      }
    }
    if (endNode !== refNode || parentChanged) {
      let start = part._$startNode;
      while (start !== endNode) {
        const n = wrap(start).nextSibling;
        wrap(container).insertBefore(start, refNode);
        start = n;
      }
    }
  }
  return part;
};
var setChildPartValue = (part, value, directiveParent = part) => {
  part._$setValue(value, directiveParent);
  return part;
};
var RESET_VALUE = {};
var setCommittedValue = (part, value = RESET_VALUE) => part._$committedValue = value;
var getCommittedValue = (part) => part._$committedValue;
var removePart = (part) => {
  var _a7;
  (_a7 = part._$notifyConnectionChanged) === null || _a7 === void 0 ? void 0 : _a7.call(part, false, true);
  let start = part._$startNode;
  const end = wrap(part._$endNode).nextSibling;
  while (start !== end) {
    const n = wrap(start).nextSibling;
    wrap(start).remove();
    start = n;
  }
};
var clearPart = (part) => {
  part._$clear();
};

// node_modules/lit-html/development/directives/repeat.js
var generateMap = (list, start, end) => {
  const map2 = /* @__PURE__ */ new Map();
  for (let i = start; i <= end; i++) {
    map2.set(list[i], i);
  }
  return map2;
};
var RepeatDirective = class extends Directive {
  constructor(partInfo) {
    super(partInfo);
    if (partInfo.type !== PartType.CHILD) {
      throw new Error("repeat() can only be used in text expressions");
    }
  }
  _getValuesAndKeys(items, keyFnOrTemplate, template) {
    let keyFn;
    if (template === void 0) {
      template = keyFnOrTemplate;
    } else if (keyFnOrTemplate !== void 0) {
      keyFn = keyFnOrTemplate;
    }
    const keys = [];
    const values = [];
    let index = 0;
    for (const item of items) {
      keys[index] = keyFn ? keyFn(item, index) : index;
      values[index] = template(item, index);
      index++;
    }
    return {
      values,
      keys
    };
  }
  render(items, keyFnOrTemplate, template) {
    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;
  }
  update(containerPart, [items, keyFnOrTemplate, template]) {
    var _a7;
    const oldParts = getCommittedValue(containerPart);
    const { values: newValues, keys: newKeys } = this._getValuesAndKeys(items, keyFnOrTemplate, template);
    if (!Array.isArray(oldParts)) {
      this._itemKeys = newKeys;
      return newValues;
    }
    const oldKeys = (_a7 = this._itemKeys) !== null && _a7 !== void 0 ? _a7 : this._itemKeys = [];
    const newParts = [];
    let newKeyToIndexMap;
    let oldKeyToIndexMap;
    let oldHead = 0;
    let oldTail = oldParts.length - 1;
    let newHead = 0;
    let newTail = newValues.length - 1;
    while (oldHead <= oldTail && newHead <= newTail) {
      if (oldParts[oldHead] === null) {
        oldHead++;
      } else if (oldParts[oldTail] === null) {
        oldTail--;
      } else if (oldKeys[oldHead] === newKeys[newHead]) {
        newParts[newHead] = setChildPartValue(oldParts[oldHead], newValues[newHead]);
        oldHead++;
        newHead++;
      } else if (oldKeys[oldTail] === newKeys[newTail]) {
        newParts[newTail] = setChildPartValue(oldParts[oldTail], newValues[newTail]);
        oldTail--;
        newTail--;
      } else if (oldKeys[oldHead] === newKeys[newTail]) {
        newParts[newTail] = setChildPartValue(oldParts[oldHead], newValues[newTail]);
        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]);
        oldHead++;
        newTail--;
      } else if (oldKeys[oldTail] === newKeys[newHead]) {
        newParts[newHead] = setChildPartValue(oldParts[oldTail], newValues[newHead]);
        insertPart(containerPart, oldParts[oldHead], oldParts[oldTail]);
        oldTail--;
        newHead++;
      } else {
        if (newKeyToIndexMap === void 0) {
          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);
          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);
        }
        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {
          removePart(oldParts[oldHead]);
          oldHead++;
        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {
          removePart(oldParts[oldTail]);
          oldTail--;
        } else {
          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);
          const oldPart = oldIndex !== void 0 ? oldParts[oldIndex] : null;
          if (oldPart === null) {
            const newPart = insertPart(containerPart, oldParts[oldHead]);
            setChildPartValue(newPart, newValues[newHead]);
            newParts[newHead] = newPart;
          } else {
            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);
            insertPart(containerPart, oldParts[oldHead], oldPart);
            oldParts[oldIndex] = null;
          }
          newHead++;
        }
      }
    }
    while (newHead <= newTail) {
      const newPart = insertPart(containerPart, newParts[newTail + 1]);
      setChildPartValue(newPart, newValues[newHead]);
      newParts[newHead++] = newPart;
    }
    while (oldHead <= oldTail) {
      const oldPart = oldParts[oldHead++];
      if (oldPart !== null) {
        removePart(oldPart);
      }
    }
    this._itemKeys = newKeys;
    setCommittedValue(containerPart, newParts);
    return noChange;
  }
};
var repeat = directive(RepeatDirective);

// node_modules/omni-ui/dist/component/omni-table/omni-table.js
var __defProp16 = Object.defineProperty;
var __getOwnPropDesc16 = Object.getOwnPropertyDescriptor;
var __decorateClass16 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc16(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp16(target, key, result);
  return result;
};
var styles13 = css`:host{--cell-bg-editable: var(--color-pale-grey-two);--text-color-editable: #3b3e3f;--table-row-background-color: var(--color-white);--table-row-highlight-color: rgba(254, 216, 130, 0.35);--cell-expand-collapse-max-width: 24ch}.table-container{width:100%;height:100%}th.is-sortable{cursor:pointer}th>span{transition:color .25s ease}th.is-sortable:hover>span,th.is-sorted>span{color:var(--color-electric-blue)}th{position:relative}th>omni-icon{transition:fill .25s ease;position:absolute;margin:3px}th.is-sortable:hover>omni-icon,th.is-sorted>omni-icon{fill:var(--color-electric-blue)}th>*,td>*{vertical-align:middle}tr:hover .is-editable,tr:hover .input.is-static.is-editable{color:var(--text-color-editable);background-color:var(--cell-bg-editable)}tr.header,tr.header:hover{background-color:rgba(0,0,0,0) !important}tr,tr:hover{background-color:var(--table-row-background-color) !important}tr.highlight{background-color:var(--table-row-highlight-color) !important}tr.is-hovered{transform:none !important}td.is-main{font-weight:600;color:var(--color-almost-black);transition:color .25s ease}td.is-main:hover{color:var(--color-electric-blue);cursor:pointer}.omni th.is-clamped,.omni td.is-clamped{max-width:24ch;display:table-cell}.omni th.is-clamped>*,.omni td.is-clamped>*{display:inline-block;max-width:100%;overflow:hidden;text-overflow:ellipsis}td{background-color:rgba(0,0,0,0) !important}td:hover{background-color:rgba(0,0,0,0) !important}td.expand,td.expand:hover{width:60px;background-color:rgba(0,0,0,0) !important;padding:0 !important;position:relative}.expand .expand-wrapper{padding:.6rem;height:100%;display:flex;align-items:center;justify-content:flex-start}.expand-wrapper button.is-text.is-stateless{border:none}.expand-wrapper.is-clamped{max-width:calc(var(--cell-expand-collapse-max-width) + 56px)}.expand-wrapper.is-clamped span.expand-content{display:inline-block;max-width:var(--cell-expand-collapse-max-width);overflow:hidden;text-overflow:ellipsis}.expand-spacer{width:41px;min-width:41px}.leftbar{position:absolute;left:0;top:50%;transform:translateY(-50%);height:30px;width:3px;border-top-right-radius:5px;border-bottom-right-radius:5px}.line-container{margin:-1rem 0;padding:1rem 0}.line-container .line{background-color:rgba(0,0,0,0);height:2px;margin:-1px 0}.line-container[drag-over]{position:relative}.line-container[drag-over] .circle-1{background-color:var(--color-primary);position:absolute;top:50%;left:0;transform:translate(-50%, -50%);height:5px;width:5px;border-radius:50%}.line-container[drag-over] .line{background-color:var(--color-primary);height:2px}.line-container[drag-over] .circle-2{background-color:var(--color-primary);position:absolute;top:50%;right:-3px;transform:translate(-50%, -50%);height:5px;width:5px;border-radius:50%}`;
var _firstUpdateCompleted, _defaultKeyFn, _expandCollapseCellTemplate, expandCollapseCellTemplate_fn, _toggleShowHideChildren, toggleShowHideChildren_fn, _flatten, flatten_fn;
var OmniTable = class extends OmniElement {
  constructor() {
    super();
    __privateAdd(this, _expandCollapseCellTemplate);
    __privateAdd(this, _toggleShowHideChildren);
    /** returns a flat array of the passed table data */
    __privateAdd(this, _flatten);
    __privateAdd(this, _firstUpdateCompleted, void 0);
    __privateAdd(this, _defaultKeyFn, void 0);
    __privateSet(this, _firstUpdateCompleted, false);
    this._treeSet = /* @__PURE__ */ new Set();
    this._highlightSet = /* @__PURE__ */ new Set();
    this._hoverSet = /* @__PURE__ */ new Set();
    this._nestedDataExists = false;
    this.nestedIndent = 10;
    this.expandAllOnLoad = false;
    this.hideNestedIndent = false;
    this.columns = [];
    this.data = [];
    this.sort = {};
    this.dragAble = false;
    __privateSet(this, _defaultKeyFn, (row) => {
      var _a7, _b2;
      const isMainKey = (_a7 = this.columns.find((one) => one.isMain)) == null ? void 0 : _a7.key;
      const firstColumnKey = (_b2 = this.columns.find((one) => one.key)) == null ? void 0 : _b2.key;
      return row[isMainKey] ?? row[firstColumnKey] ?? row;
    });
    this.keyFn = __privateGet(this, _defaultKeyFn);
  }
  static get styles() {
    return [...super.styles, styles13];
  }
  async firstUpdated() {
    await this.updateComplete;
    if (this.dragAble) {
      const { DragAndDropRowsController } = await import("./omni-drag-and-drop-rows-ZPWSUT2C.js");
      new DragAndDropRowsController(
        this,
        this.shadowRoot.querySelector("table"),
        this.shadowRoot.querySelector("tbody"),
        this._nestedDataExists
      );
    }
  }
  async willUpdate(changed) {
    if (changed.has("data")) {
      this._nestedDataExists = this.data.some((val) => val.nestedData);
      if (this._nestedDataExists && this.expandAllOnLoad && !__privateGet(this, _firstUpdateCompleted)) {
        this.expandAll();
      }
      __privateSet(this, _firstUpdateCompleted, true);
    }
  }
  get _headersTemplate() {
    const columns = this.columns.map((column) => {
      const { key, dir } = this.sort;
      const isUp = dir === "asc" && key === column.key || dir === "desc" && key !== column.key;
      const sortIconId = `omni:interactive:${isUp ? "up" : "down"}`;
      return html`
        <th
          align
          part="th table-header-cell table-header-${column.key}"
          @click="${this._headerCellClicked}"
          class="${classMap({
        "is-clamped": true,
        "is-uppercase": true,
        "is-size-6": true,
        "is-sortable": column.isSortable ? true : false,
        "is-sorted": column.key ? key === column.key : false
      })}"
          data-key="${ifDefined(column.key)}">
          <span part="th-content">${column.label}</span>
          ${column.isSortable ? html`<omni-icon class="is-size-4" icon-id="${sortIconId}"></omni-icon>` : nothing}
        </th>
      `;
    });
    return columns;
  }
  get _rowsTemplate() {
    return repeat(this.data, this.keyFn, (row, idx) => this._buildRow(row, idx));
  }
  _draggableCell(level, id) {
    if (this.dragAble) {
      if (level === 0) {
        return html`
          <td style="padding: 0; padding-left: 25px;" part="draggable-cell-${id}">
            <omni-icon icon-id="omni:interactive:reorder" style="cursor: grab"></omni-icon>
          </td>
        `;
      } else {
        return html`<td></td>`;
      }
    } else {
      return nothing;
    }
  }
  _buildRow(row, idx, level = 0) {
    const id = typeof this.keyFn(row) === "string" || typeof this.keyFn(row) === "number" ? String(this.keyFn(row)) : `L${level}-I${idx}`;
    return html`
      ${this.dragAble && level === 0 ? html` <tr>
            <td colspan="${this.columns.length + 1}" style="padding: 0; height: auto; border: none">
              <div class="line-container" line-id="${idx}">
                <span class="circle-1"></span>
                <div class="line"></div>
                <span class="circle-2"></span>
              </div>
            </td>
          </tr>` : nothing}
      <tr
        part="table-body-row"
        class="${row.highlight || this._highlightSet.has(this.keyFn(row)) ? "highlight" : ""} ${this._hoverSet.has(
      this.keyFn(row)
    ) ? "is-hovered" : ""}"
        id=${id}
        drag-id=${idx}
        @mouseover=${() => this.dispatchNewEvent("hover-row-enter", { detail: row })}
        @mouseout=${() => this.dispatchNewEvent("hover-row-exit", { detail: row })}>
        ${this._draggableCell(level, id)}
        ${this.columns.map((column, cIdx) => this._cellTemplate(row, idx, column, cIdx, level))}
      </tr>
      ${this.dragAble && level === 0 && idx === this.data.length - 1 ? html`
            <tr>
              <td colspan="${this.columns.length + 1}" style="padding: 0; height: auto; border: none">
                <div class="line-container" line-id="${idx + 1}">
                  <span class="circle-1"></span>
                  <div class="line"></div>
                  <span class="circle-2"></span>
                </div>
              </td>
            </tr>
          ` : nothing}
      ${row.nestedData && this._treeSet.has(this.keyFn(row)) ? repeat(row.nestedData, this.keyFn, (nRow, nIdx) => this._buildRow(nRow, nIdx, level + 1)) : nothing}
    `;
  }
  _cellTemplate(row, idx, column, cIdx, level) {
    let value = column.passthrough ? row : row[column.key];
    if (value === null || value === void 0)
      value = column.default;
    value = column.format ? column.format(value, idx) : value;
    if (this._nestedDataExists && cIdx === 0 && !this.hideNestedIndent) {
      const expandCellConfig = {
        row,
        level,
        template: column.template ? column.template(value, idx) : html`<span part="td-content" class="expand-content">${value}</span>`,
        shouldClamp: column.isClamped ?? true,
        isMain: column.isMain
      };
      return __privateMethod(this, _expandCollapseCellTemplate, expandCollapseCellTemplate_fn).call(this, expandCellConfig);
    }
    if (column.template) {
      return column.template(value, idx);
    }
    return html`
      <td
        part="td table-body-cell table-body-${column.key}"
        class="${classMap({
      "is-clamped": column.isClamped ?? true,
      "is-main": column.isMain
    })}">
        <span part="td-content">${value}</span>
      </td>
    `;
  }
  _findColumn(col, key) {
    return col.isSortable && col.key === key;
  }
  _headerCellClicked(e) {
    const { key = "" } = e.currentTarget.dataset;
    if (!key) {
      return;
    }
    const column = this.columns.find((col) => this._findColumn(col, key));
    if (!column) {
      return;
    }
    if (key === this.sort.key) {
      this.sort = { ...this.sort, dir: this.sort.dir === "asc" ? "desc" : "asc" };
    } else {
      this.sort = { ...this.sort, key, dir: "asc" };
    }
    let evtDetail = { detail: { ...this.sort } };
    if (this._nestedDataExists) {
      evtDetail = { detail: { sort: this.sort, data: this.data } };
    }
    this.dispatchNewEvent("sort", evtDetail);
  }
  /** toggle the highlight for a given row	*/
  toggleRowHighlight(row) {
    this._highlightSet.has(this.keyFn(row)) ? this._highlightSet.delete(this.keyFn(row)) : this._highlightSet.add(this.keyFn(row));
    this._highlightSet = new Set(this._highlightSet);
  }
  toggleRowExpansion(row) {
    this._treeSet.has(this.keyFn(row)) ? this._treeSet.delete(this.keyFn(row)) : this._treeSet.add(this.keyFn(row));
    this._treeSet = new Set(this._treeSet);
  }
  /** if children exist, expands rows for provided array of rows	*/
  expandRows(rows) {
    rows.forEach((row) => this._treeSet.add(this.keyFn(row)));
    this._treeSet = new Set(this._treeSet);
    this.dispatchNewEvent("expand-or-collapse-rows");
  }
  /**if children exist, collapse rows for provided array of rows	*/
  collapseRows(rows) {
    rows.forEach((row) => this._treeSet.delete(this.keyFn(row)));
    this._treeSet = new Set(this._treeSet);
    this.dispatchNewEvent("expand-or-collapse-rows");
  }
  /** collapse all rows with nested data */
  collapseAll() {
    this.collapseRows(__privateMethod(this, _flatten, flatten_fn).call(this, this.data));
  }
  /** expand all rows with nested data */
  expandAll() {
    this.expandRows(__privateMethod(this, _flatten, flatten_fn).call(this, this.data));
  }
  toggleRowHover(row) {
    this._hoverSet.has(this.keyFn(row)) ? this._hoverSet.delete(this.keyFn(row)) : this._hoverSet.add(this.keyFn(row));
    this._hoverSet = new Set(this._hoverSet);
  }
  hoverRow(row) {
    this._hoverSet.add(this.keyFn(row));
    this._hoverSet = new Set(this._hoverSet);
  }
  removeHoverRow(row) {
    this._hoverSet.delete(this.keyFn(row));
    this._hoverSet = new Set(this._hoverSet);
  }
  render() {
    return html`
      <omni-style>
        <div class="table-container" part="table-container">
          <table part="table" class="table is-fullwidth is-hoverable">
            <thead part="table-header">
              <tr part="table-header-row" class="header">
                ${this.dragAble ? html`<th style="padding: 0; width: 0"></th>` : nothing} ${this._headersTemplate}
              </tr>
            </thead>
            <tbody part="table-body">
              ${this._rowsTemplate}
            </tbody>
          </table>
          <div id="table-footer">
            <slot name="table-footer"></slot>
          </div>
        </div>
      </omni-style>
    `;
  }
};
_firstUpdateCompleted = new WeakMap();
_defaultKeyFn = new WeakMap();
_expandCollapseCellTemplate = new WeakSet();
expandCollapseCellTemplate_fn = function({ row, level, template, shouldClamp, isMain }) {
  const leftbar = (color) => html` <span class="leftbar" style="background-color: ${color}"></span> `;
  return html`
      <td
        class="expand ${isMain ? "is-main" : ""}"
        part="td-expand-collapse-level-${level}-${row.nestedData ? "has-children" : "no-children"}">
        ${row.leftbar ? leftbar(row.leftbar) : nothing}
        <div
          class="expand-wrapper ${shouldClamp ? "is-clamped" : ""}"
          style="margin-left: ${level * this.nestedIndent + "px"}">
          ${row.nestedData ? html`
                <button
                  class="button is-text is-stateless"
                  alt="Indicator to expand or collapse nested rows"
                  @click=${() => __privateMethod(this, _toggleShowHideChildren, toggleShowHideChildren_fn).call(this, row)}>
                  <omni-icon
                    class="is-size-1"
                    icon-id="omni:interactive:${this._treeSet.has(this.keyFn(row)) ? "down" : "right"}"></omni-icon>
                </button>
              ` : html`<div class="expand-spacer"></div>`}
          ${template}
        </div>
      </td>
    `;
};
_toggleShowHideChildren = new WeakSet();
toggleShowHideChildren_fn = function(row) {
  this._treeSet.has(this.keyFn(row)) ? this._treeSet.delete(this.keyFn(row)) : this._treeSet.add(this.keyFn(row));
  this._treeSet = new Set(this._treeSet);
  this.dispatchNewEvent("expand-or-collapse-rows", { detail: row });
};
_flatten = new WeakSet();
flatten_fn = function(data) {
  const flattened = [];
  const walk = (levelData) => {
    for (const row of levelData) {
      flattened.push(row);
      if (row.nestedData) {
        walk(row.nestedData);
      }
    }
  };
  walk(data);
  return flattened;
};
__decorateClass16([
  state()
], OmniTable.prototype, "_treeSet", 2);
__decorateClass16([
  state()
], OmniTable.prototype, "_highlightSet", 2);
__decorateClass16([
  state()
], OmniTable.prototype, "_hoverSet", 2);
__decorateClass16([
  state()
], OmniTable.prototype, "_nestedDataExists", 2);
__decorateClass16([
  property({ type: Number })
], OmniTable.prototype, "nestedIndent", 2);
__decorateClass16([
  property({ attribute: false })
], OmniTable.prototype, "keyFn", 2);
__decorateClass16([
  property({ type: Boolean })
], OmniTable.prototype, "expandAllOnLoad", 2);
__decorateClass16([
  property({ type: Boolean })
], OmniTable.prototype, "hideNestedIndent", 2);
__decorateClass16([
  property({ type: Array, attribute: false })
], OmniTable.prototype, "columns", 2);
__decorateClass16([
  property({ type: Array, attribute: false })
], OmniTable.prototype, "data", 2);
__decorateClass16([
  property({ type: Object, attribute: false })
], OmniTable.prototype, "sort", 2);
__decorateClass16([
  property({ type: Boolean, attribute: "drag-able" })
], OmniTable.prototype, "dragAble", 2);
OmniElement.register("omni-table", OmniTable);
function handleNestedDataSort({ detail: { data, sort: sort2 } }) {
  const sortLevel = (levelData) => {
    const sortedData2 = sortObjects(levelData, sort2.key);
    if (sort2.dir === "desc") {
      sortedData2.reverse();
    }
    for (const obj of sortedData2) {
      if (obj.nestedData) {
        obj.nestedData = sortLevel(obj.nestedData);
      }
    }
    return sortedData2;
  };
  const sortedData = sortLevel(data);
  return { data: sortedData, sort: sort2 };
}

// node_modules/omni-ui/dist/controllers/draggable-controller.js
var _noDragSelectors, _originalBodyStyle, _positionThroughCssProperties, _stopPropagationForElements, stopPropagationForElements_fn, _updateCursorState, _handlePointerDown, _handlePointerMove, _handlePointerUp, _emitDragEvent;
var DraggableController = class {
  constructor(host, noDragSelector, positionThroughCssProperties = false) {
    __privateAdd(this, _stopPropagationForElements);
    __privateAdd(this, _noDragSelectors, void 0);
    __privateAdd(this, _originalBodyStyle, void 0);
    /** position with the css properties found in the draggable mixin */
    __privateAdd(this, _positionThroughCssProperties, void 0);
    __privateAdd(this, _updateCursorState, void 0);
    __privateAdd(this, _handlePointerDown, void 0);
    __privateAdd(this, _handlePointerMove, void 0);
    __privateAdd(this, _handlePointerUp, void 0);
    __privateAdd(this, _emitDragEvent, void 0);
    this.isDragging = false;
    this.startX = 0;
    this.startY = 0;
    this.eleRefs = [];
    this.secondaryEvents = ["mouseleave", "mouseup", "pointerup", "pointerleave", "pointercancel"];
    __privateSet(this, _updateCursorState, (e) => {
      const path = e.composedPath();
      this.eleRefs.forEach((ele) => {
        if (path.includes(ele)) {
          ele.style.cursor = "default";
        } else {
          ele.style.cursor = "grab";
        }
      });
    });
    __privateSet(this, _handlePointerDown, (e) => {
      this.isDragging = true;
      this.startX = e.clientX - this.host.offsetLeft;
      this.startY = e.clientY - this.host.offsetTop;
      this.host.style.cursor = "grabbing";
      document.addEventListener("pointermove", __privateGet(this, _handlePointerMove));
      this.secondaryEvents.forEach((event) => {
        document.addEventListener(event, __privateGet(this, _handlePointerUp));
      });
      __privateSet(this, _originalBodyStyle, document.body.style.cssText);
      __privateGet(this, _emitDragEvent).call(this, "dragstart", e);
    });
    __privateSet(this, _handlePointerMove, (e) => {
      if (!this.isDragging)
        return;
      document.body.style.cursor = "grabbing";
      document.body.style.userSelect = "none";
      document.body.style["-webkit-user-select"] = "none";
      const { width, height } = this.host.getBoundingClientRect();
      const left = e.clientX - this.startX;
      const top = e.clientY - this.startY;
      if (!__privateGet(this, _positionThroughCssProperties)) {
        this.host.style.left = `${left}px`;
        this.host.style.top = `${top}px`;
      } else {
        this.host.style.setProperty("--drag-left", `${Math.round(left)}px`);
        this.host.style.setProperty("--drag-top", `${Math.round(top)}px`);
        this.host.style.setProperty("--drag-width", `${Math.round(width)}px`);
        this.host.style.setProperty("--drag-height", `${Math.round(height)}px`);
      }
      __privateGet(this, _emitDragEvent).call(this, "drag", e);
    });
    __privateSet(this, _handlePointerUp, () => {
      this.isDragging = false;
      this.host.style.cursor = "grab";
      document.removeEventListener("pointermove", __privateGet(this, _handlePointerMove));
      this.secondaryEvents.forEach((event) => {
        document.removeEventListener(event, __privateGet(this, _handlePointerUp));
      });
      document.body.style.cssText = __privateGet(this, _originalBodyStyle);
      __privateGet(this, _emitDragEvent).call(this, "dragend");
    });
    __privateSet(this, _emitDragEvent, (name, e = null) => {
      const { pageX, pageY } = e ?? { pageX: 0, pageY: 0 };
      const { left, top, width, height } = this.host.getBoundingClientRect();
      const offsetX = pageX - left;
      const offsetY = pageY - top;
      const { innerWidth, innerHeight } = window;
      const currPosition = {
        left,
        top,
        width,
        height,
        offsetX,
        offsetY,
        availableWidth: innerWidth,
        availableHeight: innerHeight
      };
      this.host.dispatchEvent(new CustomEvent(name, { bubbles: true, composed: true, detail: currPosition }));
    });
    this.host = host;
    this.host.addController(this);
    __privateSet(this, _noDragSelectors, noDragSelector ?? []);
    __privateSet(this, _positionThroughCssProperties, positionThroughCssProperties);
  }
  async hostConnected() {
    this.host.addEventListener("pointerdown", __privateGet(this, _handlePointerDown));
    await this.host.updateComplete;
    __privateGet(this, _noDragSelectors).forEach((selector) => {
      const elements = this.host.shadowRoot.querySelectorAll(selector);
      this.eleRefs.push(...elements);
      elements.forEach((element) => {
        element.addEventListener("mouseover", __privateGet(this, _updateCursorState));
        element.addEventListener("pointerdown", __privateMethod(this, _stopPropagationForElements, stopPropagationForElements_fn));
      });
    });
  }
  hostDisconnected() {
    this.host.removeEventListener("pointerdown", __privateGet(this, _handlePointerDown));
    __privateGet(this, _noDragSelectors).forEach((selector) => {
      const elements = this.host.querySelectorAll(selector);
      elements.forEach((element) => {
        element.removeEventListener("mouseover", __privateGet(this, _updateCursorState));
        element.removeEventListener("pointerdown", __privateMethod(this, _stopPropagationForElements, stopPropagationForElements_fn));
      });
    });
  }
};
_noDragSelectors = new WeakMap();
_originalBodyStyle = new WeakMap();
_positionThroughCssProperties = new WeakMap();
_stopPropagationForElements = new WeakSet();
stopPropagationForElements_fn = function(e) {
  e.stopPropagation();
};
_updateCursorState = new WeakMap();
_handlePointerDown = new WeakMap();
_handlePointerMove = new WeakMap();
_handlePointerUp = new WeakMap();
_emitDragEvent = new WeakMap();

// node_modules/omni-ui/dist/component/omni-tile/omni-tile.js
var __defProp17 = Object.defineProperty;
var __getOwnPropDesc17 = Object.getOwnPropertyDescriptor;
var __decorateClass17 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc17(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp17(target, key, result);
  return result;
};
var styles14 = css`:host{--drag-left: auto;--drag-left-min: 0vw;--drag-left-max: calc(100vw - 4rem);--drag-top: auto;--drag-top-min: 0vh;--drag-top-max: calc(100vh - 4rem);--drag-top-max: calc(100vh - var(--drag-height));--drag-left-max: calc(100vw - var(--drag-width))}:host([drag-able]),::slotted([drag-able]),:is([drag-able]){position:fixed;cursor:grab;top:clamp(var(--drag-top-min, 0vh),var(--drag-top, 0),var(--drag-top-max, calc(100vh - var(--drag-height, 50px))));left:clamp(var(--drag-left-min, 0vw),var(--drag-left, 0),var(--drag-left-max, calc(100vw - var(--drag-width, 20px))));z-index:var(--drag-able-z, auto)}:host(:is([drag-able][active])),::slotted(:is([drag-able][active])),:is([drag-able][active]){z-index:var(--drag-z, 39)}:host,omni-style,.omni section,.omni .box,.scroll,#body-scroller{display:flex;flex-direction:column}omni-style,.omni section,.omni .box,.scroll,#body-scroller,#body{flex-grow:1}omni-style,.omni section,.omni .box{min-height:100%}.has-heading .box{min-height:calc(100% - 37px)}h2.title{flex-shrink:0;letter-spacing:0.0571428571rem !important}:host([maximized]) h2.title{display:none}:host([maximized]){position:fixed;top:var(--omni-tile-maximized-top, 0);left:0;right:0;height:calc(100vh - var(--omni-tile-maximized-top, 0px)) !important;z-index:39}:host([scroll]) #body-scroller,:host([maximized]) #body-scroller{overflow:auto}.omni .box{padding:0;background-color:var(--omni-tile-background-color, #fcfdff);position:relative}slot{display:block}[name=header]{border-bottom:0.1428571429rem solid #f1f5fa;border-radius:0.7142857143rem 0.7142857143rem 0 0}#body{padding:var(--omni-tile-body-gutter, 1.7142857143rem);min-height:var(--omni-tile-body-min-height, auto);max-height:var(--omni-tile-body-max-height, auto)}section:not(.has-header) [name=header]{display:none}.has-subheader #body{padding-top:0}.has-footer #body{padding-bottom:0}.scroll,[name=footer]{border-radius:0 0 0.7142857143rem 0.7142857143rem}`;
var OmniTile = class extends DocumentElementClipMixin(OmniElement) {
  constructor() {
    super(...arguments);
    this.maximized = false;
    this.drag = false;
    this.noDragSlots = [];
    this._hasHeader = false;
    this._hasSubheader = false;
    this._hasFooter = false;
  }
  static get styles() {
    return [...super.styles, styles14];
  }
  connectedCallback() {
    super.connectedCallback();
    if (this.drag) {
      new DraggableController(
        this,
        this.noDragSlots.map((slot) => slot === "body" ? "#body" : `[slot=${slot}]`),
        true
      );
    }
  }
  _onSlotChange(e) {
    ["header", "subheader", "footer"].forEach((name) => {
      if (e.target.matches(`[name=${name}]`)) {
        this[`_has${capitalizeFirstWord(name)}`] = e.target.assignedElements().length > 0;
      }
    });
  }
  updated(changedProps) {
    if (changedProps.has("maximized")) {
      this[this.maximized ? "_clipDocumentElement" : "_unclipDocumentElement"]();
    }
  }
  render() {
    var _a7;
    return html`
      <omni-style>
        <section
          @slotchange=${this._onSlotChange}
          class=${classMap({
      "has-heading": (_a7 = this.heading) == null ? void 0 : _a7.length,
      "has-header": this._hasHeader,
      "has-subheader": this._hasSubheader,
      "has-footer": this._hasFooter
    })}>
          ${!this.heading ? "" : html` <h2 class="title is-size-6 is-clamped has-text-grey-dark is-uppercase">${this.heading}</h2> `}
          <div class="box" part="box">
            <slot name="header" part="header-slot"></slot>
            <!--div class=scroll part=scroll-->
            <slot name="subheader" part="subheader-slot"></slot>
            <div id="body-scroller" part="body-scroller">
              <slot id="body" part="body-slot"></slot>
            </div>
            <slot name="footer" part="footer-slot"></slot>
            <!--/div-->
          </div>
        </section>
      </omni-style>
    `;
  }
};
__decorateClass17([
  property({ type: String })
], OmniTile.prototype, "heading", 2);
__decorateClass17([
  property({ type: Boolean, reflect: true })
], OmniTile.prototype, "maximized", 2);
__decorateClass17([
  property({ type: Boolean, attribute: "drag-able", reflect: true })
], OmniTile.prototype, "drag", 2);
__decorateClass17([
  property({ type: Array })
], OmniTile.prototype, "noDragSlots", 2);
__decorateClass17([
  state()
], OmniTile.prototype, "_hasHeader", 2);
__decorateClass17([
  state()
], OmniTile.prototype, "_hasSubheader", 2);
__decorateClass17([
  state()
], OmniTile.prototype, "_hasFooter", 2);
__decorateClass17([
  query("#body-scroller")
], OmniTile.prototype, "bodyScrollerDiv", 2);
OmniElement.register("omni-tile", OmniTile);

// node_modules/omni-ui/dist/component/omni-theme/omni-theme.js
var OmniTheme = class _OmniTheme extends OmniStyle {
  static get defaultSelector() {
    return ".omni";
  }
  constructor() {
    super();
    this._themeListener = this._themeListener.bind(this);
  }
  get selector() {
    return (this.getAttribute("selector") || "").trim();
  }
  // @ts-ignore
  set selector(cssSelector = "") {
    return cssSelector.trim() ? this.setAttribute("selector", cssSelector) : this.removeAttribute("selector");
  }
  /* 
      @return {return} the theme-specific stylesheet that's inherited everywhere (document and shadowRoots) via omni-style
   */
  get styleSheet() {
    const { adoptedStyleSheets = [] } = this.ownerDocument;
    return adoptedStyleSheets[0] ?? null;
  }
  _formatRule([property2, value]) {
    const name = this[property2] ?? property2;
    return `${name}:${value} !important;`;
  }
  _filterProperties([property2]) {
    return property2.startsWith("--");
  }
  _themeListener(event) {
    const { detail } = event;
    requestAnimationFrame(() => {
      var _a7;
      const { selector, styleSheet } = this;
      const selectorMark = this.nodeName.toLowerCase() + (selector ? `[selector="${selector}"]` : "");
      const { rules } = styleSheet;
      for (let rule, i = rules.length; i--; i >= 0) {
        rule = rules[i];
        if ((_a7 = rule.selectorText) == null ? void 0 : _a7.includes(selectorMark)) {
          styleSheet.deleteRule(i);
          break;
        }
      }
      const { translate = {} } = detail;
      const cssRule = `${selectorMark}, ${selector || _OmniTheme.defaultSelector}{${Object.entries(detail).filter(this._filterProperties).map(this._formatRule, translate).join(" ")}}`;
      styleSheet.insertRule(cssRule, styleSheet.rules.length);
    });
  }
  connectedCallback() {
    super.connectedCallback();
    self.addEventListener("omni-theme", this._themeListener);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    self.removeEventListener("omni-theme", this._themeListener);
  }
};
OmniElement.register("omni-theme", OmniTheme);

// node_modules/omni-ui/dist/component/omni-modal/omni-modal.js
var __defProp18 = Object.defineProperty;
var __getOwnPropDesc18 = Object.getOwnPropertyDescriptor;
var __decorateClass18 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc18(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp18(target, key, result);
  return result;
};
var styles15 = css`:host{--left: 100px;--top: 100px;--z-index: 1000}dialog{border:none;border-radius:5px;padding:1rem}dialog[non-modal]{margin:0;border:none;border-radius:5px;z-index:var(--z-index);box-shadow:0 0 15px rgba(0,0,0,.1);position:fixed;left:var(--left);top:var(--top)}dialog::backdrop{background-color:rgba(0,0,0,.4)}dialog[cursor-pointer]::backdrop{background-color:rgba(0,0,0,.4)}header.has-header{border-bottom:1px solid #e9ecef;margin:0 -1rem;padding:0 1rem 1rem}`;
var _handleHeaderSlotChange, handleHeaderSlotChange_fn;
var OmniModal = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _handleHeaderSlotChange);
    this._hasHeader = false;
    this._isModal = false;
    this.initialFocus = false;
  }
  static get styles() {
    return [...super.styles, styles15];
  }
  show() {
    this._isModal = false;
    this._dialogEl.show();
    if (this.initialFocus) {
      this._dialogEl.focus();
    }
  }
  showModal() {
    this._isModal = true;
    this._dialogEl.showModal();
    if (this.initialFocus) {
      this._dialogEl.focus();
    }
  }
  close() {
    this.dispatchNewEvent("cancel");
    return this._dialogEl.close();
  }
  render() {
    return html`
      <dialog part="dialog" ?non-modal=${!this._isModal}>
        <header class=${classMap({ "has-header": this._hasHeader })} part="header">
          <slot name="header" @slotchange=${__privateMethod(this, _handleHeaderSlotChange, handleHeaderSlotChange_fn)}></slot>
        </header>
        <slot></slot>
        <slot name="footer"></slot>
      </dialog>
    `;
  }
};
_handleHeaderSlotChange = new WeakSet();
handleHeaderSlotChange_fn = function(e) {
  this._hasHeader = e.target.assignedElements({ flatten: true }).length > 0;
};
__decorateClass18([
  state()
], OmniModal.prototype, "_hasHeader", 2);
__decorateClass18([
  state()
], OmniModal.prototype, "_isModal", 2);
__decorateClass18([
  query("dialog")
], OmniModal.prototype, "_dialogEl", 2);
__decorateClass18([
  property({ type: Boolean, reflect: true })
], OmniModal.prototype, "initialFocus", 2);
OmniElement.register("omni-modal", OmniModal);

// node_modules/omni-ui/dist/component/omni-card/omni-card.js
var __defProp19 = Object.defineProperty;
var __getOwnPropDesc19 = Object.getOwnPropertyDescriptor;
var __decorateClass19 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc19(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp19(target, key, result);
  return result;
};
var styles16 = css`:host{--omni-card-font-size: 11px;--omni-card-title-font-size: 16px;--omni-card-img-height: 185px;--omni-card-icon-bubble-size: 48px;--omni-card-icon-bubble-ml: 12px;--omni-card-icon-size: 21px;--omni-card-p: 17px;--omni-card-footer-pr: 11px;flex-grow:1;min-width:var(--omni-card-min-width, 200px);max-width:var(--omni-card-max-width, 240px)}.card{height:var(--omni-card-height, 312px)}.card>div{height:100%;position:relative}[name=card-img]{display:block;height:var(--omni-card-img-height);border:.5px solid #fff;border-radius:8px 8px 0 0;clip-path:polygon(0 0, 100% 0, 100% 100%, 0 75%)}[name=card-img]::slotted(img){width:100%;height:100% !important;object-fit:cover;object-position:center;border-radius:8px 8px 0 0}[name=card-icon]{position:absolute;top:calc(var(--omni-card-img-height)*.75 - var(--omni-card-icon-bubble-size)/2 + var(--omni-card-icon-bubble-ml)/2);margin-left:var(--omni-card-icon-bubble-ml);border:.5px solid #fff;border-radius:50%;width:var(--omni-card-icon-bubble-size);height:var(--omni-card-icon-bubble-size);background-image:linear-gradient(to bottom, rgba(255, 255, 255, 0.54), #edf0f5);-webkit-backdrop-filter:blur(8px);backdrop-filter:blur(8px);display:flex;align-items:center;justify-content:center}[name=card-icon]::slotted(*){width:var(--omni-card-icon-size);height:var(--omni-card-icon-size);fill:var(--omni-card-icon-color, var(--color-electric-blue))}#card-content{padding:calc(var(--omni-card-p)/2) var(--omni-card-p)}[name=card-title]::slotted(*){font-weight:inherit !important}[name=card-title]::slotted(*),[name=card-type]::slotted(*),[name=card-desc]::slotted(*),[name=card-status]::slotted(*),[name=card-time]::slotted(*){display:block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}[name=card-title]::slotted(*),[name=card-desc]::slotted(*){display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;white-space:normal}[name=card-desc]::slotted(*){-webkit-line-clamp:3}[name=card-desc]::slotted(*){opacity:.5}[name=card-type]{font-size:var(--omni-card-font-size);margin:0}[name=card-title]{font-size:var(--omni-card-title-font-size);line-height:1.25;margin:0}[name=card-content]>ul{list-style-type:none;display:flex}#card-footer{padding:var(--omni-card-p);padding-right:var(--omni-card-footer-pr);position:absolute;bottom:0;width:100%;display:flex}#card-footer .button{width:38px;padding:0}#card-footer .control:not(:last-child),#card-footer .toolbar-divider{margin-right:6px}#card-metadata{overflow:hidden}#card-footer .field.is-grouped{margin-left:auto}omni-tooltip>[slot=content]{white-space:nowrap}.omni .dropdown-menu{position:fixed;display:block;visibility:hidden;padding-bottom:4px}.dropdown.is-active>.dropdown-menu{visibility:visible}.overlay{display:flex;flex-direction:column;justify-content:flex-end;padding-bottom:75px;position:absolute;top:0;align-items:center;height:100%;width:100%;border-radius:8px;background-color:rgba(20,32,51,.85)}[name=overlay-header]{text-align:center;color:#fff;word-break:break-all;overflow:hidden;text-overflow:ellipsis;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical}[name=overlay-content]{display:block;max-height:160px;overflow:hidden}.overlay-card-actions{z-index:1}#card-footer .overlay-card-actions omni-icon{fill:#fff}.overlay-card-actions .button:focus,.overlay-card-actions .button:hover,.overlay-card-actions .is-active{border-radius:8px;border-color:rgba(0,0,0,0) !important;background-color:#2f587a !important}.is-opacity-75{opacity:.75}#image-loading-container{position:absolute;top:0;width:100%;padding-top:66px}omni-loading-indicator{width:32px;margin:auto}omni-modal::part(dialog){padding:0}`;
var OmniCard = class extends OmniElement {
  constructor() {
    super();
    this._hasMenu = false;
    this.href = "";
    this.target = "";
    this.menuOpen = false;
    this.isEditable = false;
    this.showOverlay = false;
    this.isLoadingCard = false;
    this.openMsg = "";
    this.closeMenu = this.closeMenu.bind(this);
  }
  static get styles() {
    return [...super.styles, styles16];
  }
  connectedCallback() {
    super.connectedCallback();
    window.addEventListener("click", this.closeMenu);
    window.addEventListener("resize", this.closeMenu);
    window.addEventListener("scroll", this.closeMenu);
  }
  update(changedProps) {
    if (changedProps.has("menuOpen")) {
      const menuTooltipEl = this.shadowRoot.querySelector(".dropdown-trigger omni-tooltip");
      if (menuTooltipEl) {
        const { menuOpen = false } = this;
        menuTooltipEl.disabled = menuOpen;
        if (menuOpen)
          menuTooltipEl.open = !menuOpen;
      }
    }
    super.update(changedProps);
  }
  disconnectedCallback() {
    window.removeEventListener("click", this.closeMenu);
    window.removeEventListener("resize", this.closeMenu);
    window.removeEventListener("scroll", this.closeMenu);
    super.disconnectedCallback();
  }
  _positionMenu() {
    const trigger = this.shadowRoot.querySelector(".dropdown-trigger");
    const triggerRect = trigger.getBoundingClientRect();
    const { clientWidth: docWidth, clientHeight: docHeight } = document.documentElement;
    this.modal.show();
    const modalHeight = this.modal.shadowRoot.querySelector("dialog").offsetHeight;
    const modalWidth = this.modal.shadowRoot.querySelector("dialog").offsetWidth;
    this.modal.close();
    const offset = 4;
    if (triggerRect.top + triggerRect.height + modalHeight > docHeight) {
      this.modal.style.setProperty("--top", `${triggerRect.top - modalHeight - offset}px`);
    } else {
      this.modal.style.setProperty("--top", `${triggerRect.top + triggerRect.height + offset}px`);
    }
    if (triggerRect.right + triggerRect.width + modalWidth > docWidth) {
      this.modal.style.setProperty("--left", `${triggerRect.right - modalWidth}px`);
    } else {
      this.modal.style.setProperty("--left", `${triggerRect.left}px`);
    }
  }
  _onMenuSlotChange(e) {
    this._hasMenu = e.target.assignedElements().length > 0;
  }
  _onOpen(e) {
    const { cancelled } = this.dispatchNewEvent("open");
    if (cancelled)
      e.preventDefault();
  }
  _onEdit() {
    this.dispatchNewEvent("edit");
  }
  _onMenuTriggerClick() {
    if (!this.menuOpen) {
      this._positionMenu();
      setTimeout(() => this.toggleMenu(true));
    }
  }
  async toggleMenu(open = !this.menuOpen) {
    this.menuOpen = open;
    await this.updateComplete;
    if (this.menuOpen) {
      this.modal.show();
    } else {
      this.modal.close();
    }
  }
  closeMenu() {
    this.toggleMenu(false);
    this.dispatchNewEvent("closeMenu");
  }
  render() {
    return html`
      <omni-style>
        <article class="card transition-raise-hover">
          <div>
            <slot name="card-img" part="card-img" class="${classMap({ "is-opacity-75": this.isLoadingCard })}"></slot>
            <slot name="card-icon" part="card-icon"></slot>
            <div id="card-content">
              <slot name="card-type" class="has-text-grey"></slot>
              <slot name="card-title" class="has-text-weight-bold"></slot>
              <slot name="card-desc" class="is-size-6"></slot>
            </div>
            <div id="card-footer" part="card-footer">
              <div id="card-metadata">
                <slot name="card-status" class="is-size-7 has-text-grey"></slot>
                <slot name="card-time" class="is-size-7 has-text-weight-bold"></slot>
              </div>

              <div class="field is-grouped ${classMap({ "overlay-card-actions": this.showOverlay })}">
                <div class="control" ?hidden=${!this.isEditable}>
                  <omni-tooltip relateby="label">
                    <button slot="invoker" class="button is-text is-shadowless" @click=${this._onEdit}>
                      <omni-icon class="is-size-2" icon-id="omni:interactive:edit"></omni-icon>
                    </button>
                    <div slot="content">Edit</div>
                  </omni-tooltip>
                </div>
                <div class="control" ?hidden=${!this.href}>
                  <omni-tooltip relateby="label">
                    <a
                      slot="invoker"
                      class="button is-text is-shadowless"
                      href=${ifDefined(this.href)}
                      target=${ifDefined(this.target ? this.target : void 0)}
                      rel=${ifDefined(this.target ? "noopener noreferrer" : void 0)}
                      @click=${this._onOpen}>
                      <omni-icon class="is-size-2" icon-id="omni:interactive:launch"></omni-icon>
                    </a>
                    <div slot="content">
                      ${this.openMsg ? this.openMsg : `Open in ${/^(?:|_parent|_top|_self)$/.test(this.target) ? "App" : "tab"}`}
                    </div>
                  </omni-tooltip>
                </div>
                <div
                  class="toolbar-divider ${classMap({ "is-invisible": this.showOverlay })}"
                  ?hidden=${!this.href || !this._hasMenu}></div>
                <div class="control" ?hidden=${!this._hasMenu}>
                  <div class="dropdown ${classMap({ "is-active": this.menuOpen })}" justify="end">
                    <div class="dropdown-trigger" slot="trigger">
                      <omni-tooltip relateby="label">
                        <button
                          slot="invoker"
                          class="button is-text is-shadowless ${classMap({
      "is-active": this.menuOpen
    })}"
                          aria-haspopup="true"
                          aria-controls="dropdown-menu"
                          @click=${this._onMenuTriggerClick}>
                          <omni-icon class="is-size-2" icon-id="omni:interactive:actions"></omni-icon>
                        </button>
                        <div slot="content">More Actions</div>
                      </omni-tooltip>
                    </div>
                    <omni-modal>
                      <slot id="menu-slot" name="card-menu" @slotchange=${this._onMenuSlotChange}></slot>
                    </omni-modal>
                  </div>
                </div>
              </div>
            </div>
            ${this.isLoadingCard ? html` <div id="image-loading-container" part="image-loading-container">
                  <omni-loading-indicator></omni-loading-indicator>
                </div>` : nothing}
            <div class="overlay ${classMap({ "is-hidden": !this.showOverlay })}" part="overlay">
              <slot name="overlay-header" part="overlay-header"></slot>
              <slot name="overlay-content" part="overlay-content"></slot>
            </div>
          </div>
        </article>
      </omni-style>
    `;
  }
};
__decorateClass19([
  state()
], OmniCard.prototype, "_hasMenu", 2);
__decorateClass19([
  query("omni-modal")
], OmniCard.prototype, "modal", 2);
__decorateClass19([
  property({ type: String })
], OmniCard.prototype, "href", 2);
__decorateClass19([
  property({ type: String, reflect: true })
], OmniCard.prototype, "target", 2);
__decorateClass19([
  property({ type: Boolean, reflect: true })
], OmniCard.prototype, "menuOpen", 2);
__decorateClass19([
  property({ type: Boolean, reflect: true })
], OmniCard.prototype, "isEditable", 2);
__decorateClass19([
  property({ type: Boolean, reflect: true })
], OmniCard.prototype, "showOverlay", 2);
__decorateClass19([
  property({ type: Boolean, reflect: true })
], OmniCard.prototype, "isLoadingCard", 2);
__decorateClass19([
  property({ type: String })
], OmniCard.prototype, "openMsg", 2);
OmniElement.register("omni-card", OmniCard);

// node_modules/omni-ui/dist/component/omni-chip/omni-chip.js
var __defProp20 = Object.defineProperty;
var __getOwnPropDesc20 = Object.getOwnPropertyDescriptor;
var __decorateClass20 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc20(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp20(target, key, result);
  return result;
};
var styles17 = css`:host{--chip-background: var(--white);--color-icon-override: var(--color-icon-lines);--cursor-state: not-allowed}:host(:not([disabled]):hover){--color-icon-override: var(--color-primary);--cursor-state: pointer}:host([blue]){--chip-background: #daf4fc}:host([disabled]:hover),:host([disabled]){--chip-background: var(--white);--cursor-state: not-allowed;opacity:50%;cursor:not-allowed}.chip{color:var(--color-core-dark);display:inline-flex;justify-content:space-between;align-items:center;white-space:nowrap;margin-right:0.2857142857rem;padding:0.2857142857rem 0.8571428571rem;background-color:var(--chip-background);border-radius:0.2142857143rem}.chip omni-icon{cursor:var(--cursor-state);min-width:1rem;min-height:1rem;margin-left:1.0714285714rem;--color-icon-lines: var(--color-icon-override)}.chip ::slotted(omni-icon){cursor:var(--cursor-state);min-width:1rem;min-height:1rem;margin-left:1.0714285714rem;--color-icon-lines: var(--color-icon-override)}`;
var _onClick, onClick_fn;
var OmniChip = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _onClick);
    this.label = "Label";
    this.action = false;
    this.disabled = false;
    this.blue = false;
  }
  static get styles() {
    return [...super.styles, styles17];
  }
  render() {
    return html`
      <div class="chip" part="chip">
        ${this.label}
        ${this.action ? html`
              <slot @click=${__privateMethod(this, _onClick, onClick_fn)}>
                <omni-icon icon-id="omni:interactive:remove"></omni-icon>
              </slot>
            ` : nothing}
        <slot></slot>
      </div>
    `;
  }
};
_onClick = new WeakSet();
onClick_fn = function() {
  this.dispatchNewEvent("remove", { detail: this.label });
};
__decorateClass20([
  property({ type: String, reflect: true })
], OmniChip.prototype, "label", 2);
__decorateClass20([
  property({ type: Boolean, reflect: true, attribute: true })
], OmniChip.prototype, "action", 2);
__decorateClass20([
  property({ type: Boolean, reflect: true, attribute: true })
], OmniChip.prototype, "disabled", 2);
__decorateClass20([
  property({ type: Boolean, reflect: true, attribute: true })
], OmniChip.prototype, "blue", 2);
OmniElement.register("omni-chip", OmniChip);

// node_modules/omni-ui/dist/deprecated-export.js
console.warn(
  "Component name update: We are aligning our component names with their custom element representation to make them shorter and more intuitive. We are removing the suffix 'Element' from all components except 'OmniElement', so 'OmniIconElement' becomes 'OmniIcon', etc. These 'Element' appended component names are deprecated and will be removed in the next major version.\n\nUse the `update-imports` code mod to make all of these rewrites at once `npx omni-ui update-imports --include=path` where path equals your directory path to project components."
);

// node_modules/omni-ui/dist/omni-form-control.js
var OmniFormControl = class extends OmniElement {
  // value implement in component
  static get properties() {
    return {
      autofocus: { type: Boolean, reflect: true },
      autocomplete: { type: Boolean, reflect: true },
      disabled: { type: Boolean, reflect: true },
      required: { type: Boolean, reflect: true },
      name: {
        type: String,
        reflect: true,
        converter: {
          // when the name is empty remove the attribute
          toAttribute(value) {
            const name = value.trim();
            return name || void 0;
          }
        }
      }
    };
  }
  static get styles() {
    return [
      css`
        :host {
          --bg-color: var(--color-pale-grey-two, #fff);
          background-color: var(--bg-color);
          border: var(--form-input-border, #ddd);
          --color: var(--color-gray-36);
          --color-disabled: #aaa;
        }
        :host([disabled]) {
        }
      `
    ];
  }
  connectedCallback() {
    super.connectedCallback();
    OmniOverlay.overlay;
    if (!this.hasAttribute("tabindex")) {
      this.tabIndex = 0;
    }
  }
  static get formAssociated() {
    return true;
  }
  constructor() {
    super();
    this.name = "";
    this.required = false;
    this.disabled = false;
    this.internals = this.attachInternals();
  }
  get form() {
    return this.internals.form;
  }
  get labels() {
    return this.internals.labels;
  }
  get type() {
    return this.localName;
  }
  get validity() {
    return this.internals.validity;
  }
  get validationMessage() {
    return this.internals.validationMessage;
  }
  get willValidate() {
    return this.internals.willValidate;
  }
  setCustomValidity(msg) {
    msg ? this.internals.setValidity({ customError: true }, msg) : this.internals.setValidity({});
    return this.validationMessage;
  }
  /*
  TODO implement validity checks for the attributes in the link
  static validation
  @return {Boolean} true ok, false fail
  @see {@link https://developer.mozilla.org/docs/Web/Guide/HTML/Constraint_validation} Constraint_validation API
   */
  checkValidity() {
    return this.internals.checkValidity();
  }
  /*
    interactive validation, ie shows ui elements related to invalid
    TODO
   */
  reportValidity() {
    return this.internals.reportValidity();
  }
  /** setup in components if indicated
   formAssociatedCallback(form){ }
   formResetCallback(){ }
   // called when ancestor fieldset and similar are [disabled], and the element itself is NOT [disabled]
   formDisabledCallback(disabled){ }
   // mode === 'restore' when browser restarts, navigation; or alternately 'autocomplete' where enabled on the form or element
   formStateRestoreCallback(state, mode){}
  */
  formStateRestoreCallback(state2, mode) {
    console.warn("formStateRestoreCallback", mode, state2);
  }
};

// node_modules/omni-ui/dist/component/omni-origin/omni-origin.js
var __defProp21 = Object.defineProperty;
var __getOwnPropDesc21 = Object.getOwnPropertyDescriptor;
var __decorateClass21 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc21(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp21(target, key, result);
  return result;
};
var OmniOrigin = class extends OmniElement {
  constructor() {
    super();
    this._target = null;
    this.attachShadow({ mode: "open" }).innerHTML = `<slot></slot>`;
  }
  static get styles() {
    return [
      css`
        :host {
          display: contents;
        }
      `
    ];
  }
  get target() {
    return this._target ?? null;
  }
  set target(node) {
    const { target } = this;
    if (!node) {
      if (target && target.origin) {
        target.origin = null;
        target.removeAttribute("origin");
      }
      this.removeAttribute("target");
      this._target = null;
      this.remove();
      return;
    }
    if (node.nodeType !== 1) {
      throw new Error(`invalid node type ${node.nodeType}`);
    }
    if (this.target) {
      throw new Error(`origin has a target ${target.localName}`);
    }
    this._target = node;
    this.setAttribute("target", node.localName);
    node.origin = this;
    node.setAttribute("origin", this.localName);
    node.before(this);
  }
  connectedCallback() {
    super.connectedCallback();
    this.dispatchEvent(new CustomEvent("origin", { detail: this, composed: true, cancelable: true, bubbles: true }));
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.target = null;
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  render() {
  }
};
__decorateClass21([
  state()
], OmniOrigin.prototype, "_target", 2);
OmniElement.register("omni-origin", OmniOrigin);

// node_modules/omni-ui/dist/component/omni-option.js
var OmniOption = class extends OmniFormControl {
  constructor() {
    super();
    this._index = 0;
    this.selected = false;
    this.indeterminate = false;
    this.setAttribute("role", "option");
    this.tabIndex = -1;
  }
  updated(changedProperties) {
    if (changedProperties.has("selected")) {
      if (Boolean(changedProperties.get("selected")) !== this.selected) {
        this.dispatchNewEvent("option");
      }
    }
  }
  get index() {
    return this._index;
  }
  get value() {
    const { label, textContent } = this;
    return this.getAttribute("value") ?? (label ? label + (textContent.length ? " " : "") : "") + textContent;
  }
  set value(value) {
    this.setAttribute("value", value);
  }
  get label() {
    const label = this.getAttribute("label") ?? "";
    return label;
  }
  set label(value) {
    this.requestUpdate("label", this.getAttribute("label"));
    if (value) {
      this.setAttribute("label", value);
    } else {
      this.removeAttribute("label");
    }
  }
  get text() {
    const { label, textContent } = this;
    return `${label ? label + " " : ""}${textContent}`;
  }
  static get properties() {
    return {
      indeterminate: { type: Boolean, reflect: true },
      selected: { type: Boolean, reflect: true },
      defaultSelected: { type: Boolean, reflect: true },
      _index: { type: Number }
    };
  }
  static get styles() {
    return [
      css`
        :host {
          content-visibility: auto;
          contain: strict style;
          display: flex;
          flex-wrap: nowrap;
          border: 0;
          margin: 0.1rem;
          padding: var(--padding);
          margin: 0px;
          font-family: var(--family-sans-serif);
          color: var(--color);
          box-sizing: border-box;
          outline: none;
          user-select: none;
        }
        :host([hidden]) {
          display: none;
        }
        :host([optgroup]) {
          color: var(--color-disabled);
        }
        :host(:not([optgroup])) {
          padding-left: var(--padding-adjust, 0);
        }
        :host([optgroup]) omni-icon {
          display: var(--optgroup-first-icon);
        }
        :host(:not([disabled]):hover) {
          background-color: var(--option-hover, #ddd);
        }
        :host([disabled]) {
          pointer-events: none;
        }
        :host(:-internal-direct-focus),
        :host(:focus-visible),
        :host(:focus-within),
        :host(:focus) {
          outline: none;
        }
        omni-icon {
          contain: strict style;
          border: 1px solid #333;
          border-color: var(--icon-border, #333);
          border-radius: var(--radius-small);
          background-image: var(--icon-bg, #fff);
          --color-almost-black: #fff;
          padding: 0;
          margin: var(--icon-margin, 0.3em 0.3em 0.1em 0);
          width: var(--icon-size, 1em);
          height: var(--icon-size, 1em);
          min-width: 10px;
          min-height: 10px;
          max-width: 1rem;
          max-height: 1rem;
        }
        :host(:not([multiple])) omni-icon {
          --color-almost-black: var(--icon-color, #111);
        }
        :host([indeterminate]) omni-icon {
          --color-almost-black: #111;
        }
        :host([selected]) omni-icon {
          border-color: var(--icon-border-selected, #333);
          background-image: var(--icon-bg-selected, #fff);
        }
        :host(:not([optgroup]):not([selected])) omni-icon::part(icon) {
          visibility: hidden;
        }
        [part='text'] {
          max-width: var(--text-max-width, 20em);
          white-space: var(--text-white-space, inherit);
        }
      `
    ];
  }
  render() {
    const { label } = this;
    return html`<omni-icon icon-id="omni:informative:check"></omni-icon>
      <div part="text">${label || ""} <slot></slot></div>`;
  }
};
OmniOption.register("omni-option", OmniOption);

// node_modules/omni-ui/dist/component/omni-optgroup.js
var OmniOptgroup = class extends OmniElement {
  static get properties() {
    return {
      indeterminate: {
        type: Boolean
      },
      disabled: { type: Boolean, reflect: true },
      label: {
        type: String,
        reflect: true,
        converter: {
          // when the name is empty remove the attribute
          toAttribute(value) {
            const name = value.trim();
            return name || void 0;
          }
        }
      }
    };
  }
  static get styles() {
    return [
      css`
        :host {
          contain: strict style;
          display: flex;
          flex-direction: column;
          margin: 0.1rem;
          padding: 0;
          margin: 0;
          border: 0;
          --padding-adjust: 1em;
        }
        :host([disabled]) {
          pointer-events: none;
          --color: var(--color-disabled);
          --icon-border: var(--icon-border-disabled);
          --option-hover: transparent;
        }
      `
    ];
  }
  constructor() {
    super();
    this.addEventListener("option", this._option);
  }
  _option(event) {
    if (this.disabled) {
      event.stopPropagation();
    }
    const node = event.target;
    const optgroup = node.hasAttribute("optgroup");
    if (optgroup) {
      event.stopPropagation();
      return;
    }
    this.determine();
  }
  toggle(on) {
    const option = this.shadowRoot.querySelector("omni-option");
    if (on === void 0) {
      on = !option.selected;
    }
    const direction = Boolean(on);
    this.options.forEach((node) => {
      node.selected = direction;
    });
    this.indeterminate = false;
    option.selected = direction;
  }
  /* debounced, updates the indeterminate attribute
    based on a mix of events
   */
  determine() {
    cancelAnimationFrame(this._determine);
    this._determine = requestAnimationFrame(() => {
      if (!this.closest("[multiple]"))
        return;
      const { options: options2 } = this;
      const selectedCount = this.selectedOptions.length;
      const total = options2.length;
      this.indeterminate = !(!selectedCount || total === selectedCount);
      this.shadowRoot.querySelector("omni-option[optgroup]").selected = total === selectedCount;
    });
  }
  // returns selected children
  get selectedOptions() {
    return this.querySelectorAll(":scope > omni-option[selected], :scope > option[selected]");
  }
  // returns option children
  get options() {
    return this.querySelectorAll(":scope > omni-option, :scope > option");
  }
  _slotchange() {
    this.determine();
  }
  render() {
    return html`
      <omni-option ?indeterminate=${this.indeterminate} optgroup>${this.label}</omni-option>
      <div><slot @slotchange=${this._slotchange}></slot></div>
    `;
  }
};
OmniOptgroup.register("omni-optgroup", OmniOptgroup);

// node_modules/omni-ui/dist/component/omni-select.js
var OmniSelect = class extends OmniFormControl {
  formResetCallback() {
    const { options: options2, _originalOptions } = this;
    options2.forEach((option) => {
      const { index } = option;
      option.selected = _originalOptions.has(index);
    }, this);
    this.firstUpdated();
  }
  /* formStateRestoreCallback callback when client restores
  	to trigger submit the form and hit the browser back button (mode='restore') or enable mode="autocomplete" (mode='autocomplete'
  	WIP TODO this is incomplete
  	@state {any} state - value sent
  	 @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html} reference spec
  Chrome currently doesn't handle autofill for form-associated
  custom elements. In the autofill case, you might need to handle a raw value.
  	@param {string} mode - 'restore' (submit then go back) or 'autocomplete'
   */
  formStateRestoreCallback(state2, mode) {
    this.setValidity();
    if (mode === "restore") {
      const [controlMode, value] = state2.split("/");
      this._mode = `${controlMode}/${value}`;
    }
  }
  formAssociatedCallback(form) {
    this.form === form;
    this.setValidity();
  }
  static get properties() {
    return {
      _size: { type: Number },
      disabled: { type: Boolean, reflect: true },
      /*
      @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#usage_notes} Selecting multiple behavior
      */
      open: { type: Boolean, reflect: true },
      multiple: { type: Boolean, reflect: true },
      required: { type: Boolean, reflect: true },
      /* @prop size default: 0 as in not-set and interpreted as lines to show: 1 or with multiple 4 lines;
       */
      size: {
        type: Number,
        reflect: true,
        converter: {
          // remove if not truthy
          toAttribute(value) {
            return value || void 0;
          }
        }
      }
    };
  }
  constructor() {
    super();
    this.addEventListener("click", this._click);
    this._closing = this._closing.bind(this);
    this._opening = this._opening.bind(this);
    this.addEventListener("overlay-remove", this._closing);
    this.addEventListener("overlay", this._opening);
    this.addEventListener("option", this._option);
    this.addEventListener("focus", this._focus);
    this.__observer = new MutationObserver(this._mutationCallback.bind(this));
    this.setAttribute("init", "");
    this.addEventListener("invalid", this._invalid);
    this.addEventListener("input", this._remit);
    this.addEventListener("change", this._remit);
    console.warn(
      "OmniSelect is deprecated and will be removed in the upcoming Omni-UI 8.0 release. Please use OmniDropdown instead. https://omni-ui.annalect.com/dropdown"
    );
  }
  _selection({ detail } = {}) {
    if (!this.matches("omni-select:not([multiple])")) {
      return;
    }
    const option = detail && detail.matches("omni-option") ? detail : this.querySelector("omni-option[selected]") || this.querySelector("omni-option");
    if (!option)
      return;
    requestAnimationFrame(() => {
      this.shadowRoot.querySelector("section").scrollTop = option.offsetTop;
    });
  }
  /* when this element is in the overlay, and not in the original context (eg a form)
  this listener will re-emit the event on the origin element in that context,
  omni-dropdown and any similar scenario uses this */
  _remit(event) {
    if (this === event.target && this.matches("omni-overlay > *")) {
      const { type, bubbles, cancelable, composed, detail } = event;
      this.origin.dispatchEvent(new CustomEvent(type, { bubbles, cancelable, composed, detail }));
    }
    this._selection(event);
  }
  _mutationCallback(mutations, observer) {
    cancelAnimationFrame(this.__mutated);
    this.__mutated = requestAnimationFrame(() => {
      this._index();
      this.dispatchEvent(new CustomEvent("mutation", { detail: mutations }));
    });
  }
  _invalid() {
    this.removeAttribute("init");
  }
  /*
  retrieve and tranform values in this component to primitives expected for consumption
  ie passing it to URLSearchParams and other in-transit/payload related next-steps (in the DOM or over HTTP, etc)
  @returns {array} array of zero or more option-value strings
  */
  get value() {
    return Array.from(this.selectedOptions).map((option) => option.value);
  }
  setValidity() {
    const values = this.value.filter((val) => !!val.trim());
    if (!this.matches(":disabled") && this.required && !values.length) {
      this.internals.setValidity({ valueMissing: true }, "Selection required.");
    } else {
      this.internals.setValidity({});
    }
    this.setFormValue(values);
  }
  setFormValue(values) {
    this.internals.setFormValue(values);
  }
  _option({ target }) {
    cancelAnimationFrame(this._setvalidity);
    this._setvalidity = requestAnimationFrame(() => {
      this.setValidity();
    });
  }
  connectedCallback() {
    super.connectedCallback();
    this.__observer.observe(this, { childList: true, subtree: true });
    if (!this.hasAttribute("role")) {
      this.setAttribute("role", "combobox");
    }
    let { origin } = this;
    if (!origin) {
      origin = this.ownerDocument.createElement("omni-origin");
      origin.target = this;
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.__observer.disconnect();
  }
  willUpdate(changedProperties) {
    if (changedProperties.has("size")) {
      const size = Number(this.size || 0);
      if (!isNaN(size) && size > 0) {
        this._size = size;
      }
    }
  }
  _position() {
    const { style: style2, origin } = this;
    const { x, y, width, height } = this.getBoundingClientRect();
    const computed = getComputedStyle(this);
    const { clientWidth, clientHeight } = this.ownerDocument.documentElement;
    const { scrollWidth, scrollHeight } = this.shadowRoot.querySelector("section");
    let offsetLeft = "- 2px";
    let offsetTop = "- 2px";
    let [left, top] = [x, y];
    const [useWidth, useHeight] = this.multiple ? [width, height] : [scrollWidth, scrollHeight];
    if (left + useWidth > clientWidth) {
      left = clientWidth - useWidth;
      offsetLeft = "- 1rem";
      if (left < 1) {
        offsetLeft = "+ 1rem";
        left = 0;
      }
    }
    if (top + useHeight > clientHeight) {
      offsetTop = "- 1rem";
      top = clientHeight - useHeight;
      if (top < 1) {
        offsetTop = "+ 1rem";
        top = 0;
      }
    }
    const originstyle = origin.style;
    originstyle.setProperty("display", computed.display);
    originstyle.setProperty("position", computed.position);
    originstyle.setProperty("width", `calc(${width}px + 3px)`);
    originstyle.setProperty("height", `calc(${height}px - 2px)`);
    originstyle.setProperty("visibility", `hidden`);
    style2.setProperty("--open-height", `${Math.round(useHeight)}px`);
    style2.setProperty("--open-width", `${Math.round(useWidth)}px`);
    style2.setProperty("--open-left", `calc(${Math.round(left)}px ${offsetLeft})`);
    style2.setProperty("--open-top", `calc(${Math.round(top)}px ${offsetTop})`);
  }
  /*
  returns base 0 index of first selected option, including for multiple
  default: 0 || -1 with multiple
  */
  get selectedIndex() {
    const { selectedOptions } = this;
    if (!selectedOptions.length) {
      return -1;
    }
    return selectedOptions[0].index;
  }
  /*	this.selectedIndex returns the input param
  @param {number} the base 0 index for an option
  @prop {number} last selected index
  @returns {number} base 0 inex for last [selected] option, or first or -1 when none present
  */
  set selectedIndex(index) {
    if (!isNaN(index)) {
      const { options: options2 } = this;
      let node;
      if (index < 0 || index >= options2.length) {
        if (!this.multiple) {
          node = options2[this.selectedIndex];
          node.selected = false;
          node = options2[this._originalOptions.values().next().value];
          node.selected = true;
        } else {
          let i = 0;
          for (; node = options2[i]; i++) {
            node.selected = false;
          }
        }
      } else if (!this.multiple) {
        node = options2[this.selectedIndex];
        node.selected = false;
        options2[index].selected = true;
      } else {
        options2[index].selected = true;
      }
    }
  }
  /* this.selectedOptions
  @prop {object}
  @returns all selected options as NodeList
  */
  get selectedOptions() {
    return this.querySelectorAll("omni-option[selected], option[selected]");
  }
  _indexEach(node, i) {
    node._index = i;
    return node;
  }
  _index() {
    const options2 = Array.from(this.options);
    options2.forEach(this._indexEach);
    return options2;
  }
  /* this.options emulate HTMLOptionsCollection
  @prop {object}
  @return NodeList of options with selectedIndex property for currently selected option's index
  @example this.options // [omni-option, omni-option, selectedIndex: 1]
  */
  get options() {
    return this.querySelectorAll("omni-option, option");
  }
  _closing(event) {
    requestAnimationFrame(() => {
      this.removeAttribute("init");
      this.removeAttribute("open");
      this.slot = this.__slot ?? "";
      const { origin } = this;
      origin.style.setProperty("display", "none");
      if (origin.nextElementSibling !== this) {
        origin.after(this);
      }
    });
  }
  _opening(event) {
    this.open = true;
    this.__slot = this.slot;
    this.slot = "form";
    this._position();
  }
  _click(event) {
    var _a7;
    const { target } = event;
    const { multiple, open } = this;
    if (multiple) {
      this._change(event);
    } else {
      if (open) {
        if (!((_a7 = target.assignedSlot) == null ? void 0 : _a7.name)) {
          this._change(event);
        }
        if (!multiple) {
          this.dispatchEvent(new CustomEvent("overlay-remove", { detail: this, bubbles: true, composed: true }));
        }
      } else {
        this.dispatchEvent(new CustomEvent("overlay", { detail: this, bubbles: true, composed: true }));
      }
    }
  }
  firstUpdated() {
    const options2 = this._index();
    if (!this._originalOptions) {
      const { selectedOptions } = this;
      let selected = Array.from(selectedOptions);
      if (!selectedOptions.length && !this.multiple && options2.length) {
        let node = options2.find((node2) => node2.defaultSelected);
        if (!node) {
          node = options2[0];
        }
        node.selected = true;
        selected = [node];
      }
      this._originalOptions = new Set(selected.map((option) => option.index));
    }
    requestAnimationFrame(() => {
      this._selection();
    });
  }
  __deselect(node) {
    if (this.index === node.index) {
      return;
    }
    node.selected = false;
  }
  _change(event) {
    const [option, optgroup] = this.pathfinder(event, "omni-option, option, optgroup, omni-optgroup", true);
    if (!option || !option.matches("omni-option,option")) {
      return;
    }
    let { index } = option;
    const isOptgroup = option.hasAttribute("optgroup");
    const disabled = option.closest("[disabled]");
    if (isOptgroup) {
      index = optgroup.querySelector(":scope > omni-option").index;
    }
    if (disabled) {
      return;
    }
    if (!this.multiple && (option.selected || isOptgroup)) {
      return;
    }
    option.toggleAttribute("selected");
    if (isOptgroup) {
      const selected = option.hasAttribute("selected");
      option.getRootNode().host.toggle(selected);
    }
    if (!this.multiple && option.selected) {
      this.selectedOptions.forEach(this.__deselect, { index });
    }
    requestAnimationFrame(() => {
      this.dispatchEvent(
        new CustomEvent("input", {
          bubbles: true,
          cancelable: false,
          composed: true,
          detail: option
        })
      );
      this.dispatchEvent(
        new CustomEvent("change", {
          bubbles: true,
          cancelable: false,
          composed: false,
          detail: option
        })
      );
    });
  }
  static get styles() {
    return [
      ...super.styles,
      css`
        :host {
          contain: paint;
          content-visibility: auto;
          --option-hover: transparent;
          --icon-color: var(--color-electric-blue);
          --icon-size: 1em;
          --icon-bg: transparent;
          --icon-bg-selected: transparent;
          --icon-border: transparent;
          --icon-border-selected: transparent;
          --icon-margin: 0.2em 0.1em 0.1em 0.2em;
          --icon-border-disabled: transparent;
          --padding: 0.3em 1.6em 0.2em 0.5em;
          --padding-adjust: 0.1em;
          --optgroup-first-icon: none;
          display: inline-block;
          box-sizing: border-box;
          border: thin solid var(--bg-color, #555);
          margin: 0.1rem;
          cursor: pointer;
          appearance: none;
          align-items: center;
          border-radius: var(--radius-small, 0.3em);
          box-shadow: none;
          box-sizing: border-box;
          font-size: 1em;
          justify-content: flex-start;
          line-height: 1.5;
          position: relative;
          vertical-align: top;
          outline: none;
          color: var(--color);
          --option-size: 2.4em;
          --option-count: 1;
          height: calc(var(--option-size) * var(--option-count));
        }
        :host(omni-select[multiple]) {
          --option-count: 4;
        }
        :host([multiple]) {
          --inactive-display: flex;
          --icon-color: #fff;
          --icon-bg: none;
          --icon-bg-selected: var(--gradient-electric-blue);
          --icon-border: #555;
          --icon-border-selected: var(--gradient-electric-blue);
          --padding: 0.3em 0.5em 0.2em 0.2em;
          --padding-adjust: 0.2em;
          --icon-margin: 0.22em 0.3em 0.1em 0.3em;
          --icon-size: 0.8em;
          --icon-border-disabled: #aaa;
          --optgroup-first-icon: block;
        }
        :host([disabled][multiple]) {
          --icon-border: var(--color-disabled);
        }
        :host(:where(:active, :focus, :focus-within, :hover):not([disabled])) {
          background-color: #fff;
          --option-hover: #d6f5fc;
          max-height: calc(100vh - 2rem) !important;
          max-width: calc(100vw - 2rem) !important;
        }
        :host(omni-select:not([disabled]):active) {
          border-color: var(--color-electric-blue);
          box-shadow: var(--bulma-shadow-1);
        }
        :host(:hover) {
          border-color: var(--color-gray-b5);
        }
        :host(omni-select:not([disabled]):focus) {
          border-color: var(--color-electric-blue);
          box-shadow: var(--bulma-shadow-1);
        }
        :host(:is([open])),
        :host(:not([disabled]):focus-visible) {
          outline: 0.125em var(--blue);
          box-shadow: 0 0 0 0.125em var(--blue) !important;
        }
        /* TODO remove?
				:host(:not([multiple]):not([active])) {
					--inactive-options: none;
				}
*/
        :host([disabled]) {
          background-color: transparent;
          border-color: var(--color-gray-b5);
          box-shadow: none;
          cursor: not-allowed;
        }
        :host([disabled]) section:focus-visible {
          outline: none;
          pointer-events: none;
        }
        /* icon */
        section {
          display: flex;
          overflow: hidden;
          height: 100%;
          box-sizing: border-box;
        }
        :host(:where([open], omni-select[multiple]):where(:active, :focus, :focus-within, :hover):not([disabled]))
          section {
          overflow: auto;
        }
        [options] {
          padding: 0;
          display: flex;
          flex-direction: column;
        }
        :host(omni-select[multiple]) [icon] {
          display: none;
        }
        [icon] {
          direction: rtl;
          pointer-events: none;
          position: absolute;
          inset: 0 0 auto auto;
        }
        [icon] omni-icon {
          width: 1em;
          padding: 0.6em 0.5em;
          transform: rotate(0);
        }
        :host([open]) [icon] omni-icon,
        :host(omni-select[open]) [icon] omni-icon {
          transform: rotate(-180deg);
        }
        /* align on other edge, more on :dir at
					https://developer.mozilla.org/docs/Web/CSS/:dir
					https://www.chromestatus.com/features/5751531651465216
				 */
        :dir(rtl) [icon] {
          direction: ltr;
        }
        :host(:not(:is([init], [open], [disabled])):is([aria-invalid='true'], [internals-invalid], :invalid)) {
          border-color: var(--error-color, red);
        }

        :host([open][style]) {
          width: var(--open-width);
          height: var(--open-height);
          top: var(--open-top);
          left: var(--open-left);
        }
      `
    ];
  }
  render() {
    return html`
      <style>
        ${this._size ? `
				:host([size]){
			--option-count:${this._size};
				}
				` : ""}
      </style>
      <section tabindex=${this.disabled ? -1 : 0}>
        <div options>
          <slot></slot>
        </div>
        <div icon>
          <omni-icon class="is-size-1" icon-id="omni:interactive:down"></omni-icon>
        </div>
      </section>
    `;
  }
};
OmniSelect.register("omni-select", OmniSelect);

// node_modules/lit-html/development/static.js
var brand = Symbol.for("");
var unwrapStaticValue = (value) => {
  if ((value === null || value === void 0 ? void 0 : value.r) !== brand) {
    return void 0;
  }
  return value === null || value === void 0 ? void 0 : value["_$litStatic$"];
};
var unsafeStatic = (value) => ({
  ["_$litStatic$"]: value,
  r: brand
});
var stringsCache = /* @__PURE__ */ new Map();
var withStatic = (coreTag) => (strings, ...values) => {
  const l = values.length;
  let staticValue;
  let dynamicValue;
  const staticStrings = [];
  const dynamicValues = [];
  let i = 0;
  let hasStatics = false;
  let s;
  while (i < l) {
    s = strings[i];
    while (i < l && (dynamicValue = values[i], staticValue = unwrapStaticValue(dynamicValue)) !== void 0) {
      s += staticValue + strings[++i];
      hasStatics = true;
    }
    if (i !== l) {
      dynamicValues.push(dynamicValue);
    }
    staticStrings.push(s);
    i++;
  }
  if (i === l) {
    staticStrings.push(strings[l]);
  }
  if (hasStatics) {
    const key = staticStrings.join("$$lit$$");
    strings = stringsCache.get(key);
    if (strings === void 0) {
      staticStrings.raw = staticStrings;
      stringsCache.set(key, strings = staticStrings);
    }
    values = dynamicValues;
  }
  return coreTag(strings, ...values);
};
var html2 = withStatic(html);
var svg2 = withStatic(svg);

// node_modules/lit-html/development/async-directive.js
var DEV_MODE = true;
var notifyChildrenConnectedChanged = (parent, isConnected) => {
  var _a7, _b2;
  const children = parent._$disconnectableChildren;
  if (children === void 0) {
    return false;
  }
  for (const obj of children) {
    (_b2 = (_a7 = obj)["_$notifyDirectiveConnectionChanged"]) === null || _b2 === void 0 ? void 0 : _b2.call(_a7, isConnected, false);
    notifyChildrenConnectedChanged(obj, isConnected);
  }
  return true;
};
var removeDisconnectableFromParent = (obj) => {
  let parent, children;
  do {
    if ((parent = obj._$parent) === void 0) {
      break;
    }
    children = parent._$disconnectableChildren;
    children.delete(obj);
    obj = parent;
  } while ((children === null || children === void 0 ? void 0 : children.size) === 0);
};
var addDisconnectableToParent = (obj) => {
  for (let parent; parent = obj._$parent; obj = parent) {
    let children = parent._$disconnectableChildren;
    if (children === void 0) {
      parent._$disconnectableChildren = children = /* @__PURE__ */ new Set();
    } else if (children.has(obj)) {
      break;
    }
    children.add(obj);
    installDisconnectAPI(parent);
  }
};
function reparentDisconnectables(newParent) {
  if (this._$disconnectableChildren !== void 0) {
    removeDisconnectableFromParent(this);
    this._$parent = newParent;
    addDisconnectableToParent(this);
  } else {
    this._$parent = newParent;
  }
}
function notifyChildPartConnectedChanged(isConnected, isClearingValue = false, fromPartIndex = 0) {
  const value = this._$committedValue;
  const children = this._$disconnectableChildren;
  if (children === void 0 || children.size === 0) {
    return;
  }
  if (isClearingValue) {
    if (Array.isArray(value)) {
      for (let i = fromPartIndex; i < value.length; i++) {
        notifyChildrenConnectedChanged(value[i], false);
        removeDisconnectableFromParent(value[i]);
      }
    } else if (value != null) {
      notifyChildrenConnectedChanged(value, false);
      removeDisconnectableFromParent(value);
    }
  } else {
    notifyChildrenConnectedChanged(this, isConnected);
  }
}
var installDisconnectAPI = (obj) => {
  var _a7, _b2;
  var _c, _d;
  if (obj.type == PartType.CHILD) {
    (_a7 = (_c = obj)._$notifyConnectionChanged) !== null && _a7 !== void 0 ? _a7 : _c._$notifyConnectionChanged = notifyChildPartConnectedChanged;
    (_b2 = (_d = obj)._$reparentDisconnectables) !== null && _b2 !== void 0 ? _b2 : _d._$reparentDisconnectables = reparentDisconnectables;
  }
};
var AsyncDirective = class extends Directive {
  constructor() {
    super(...arguments);
    this._$disconnectableChildren = void 0;
  }
  /**
   * Initialize the part with internal fields
   * @param part
   * @param parent
   * @param attributeIndex
   */
  _$initialize(part, parent, attributeIndex) {
    super._$initialize(part, parent, attributeIndex);
    addDisconnectableToParent(this);
    this.isConnected = part._$isConnected;
  }
  // This property needs to remain unminified.
  /**
   * Called from the core code when a directive is going away from a part (in
   * which case `shouldRemoveFromParent` should be true), and from the
   * `setChildrenConnected` helper function when recursively changing the
   * connection state of a tree (in which case `shouldRemoveFromParent` should
   * be false).
   *
   * @param isConnected
   * @param isClearingDirective - True when the directive itself is being
   *     removed; false when the tree is being disconnected
   * @internal
   */
  ["_$notifyDirectiveConnectionChanged"](isConnected, isClearingDirective = true) {
    var _a7, _b2;
    if (isConnected !== this.isConnected) {
      this.isConnected = isConnected;
      if (isConnected) {
        (_a7 = this.reconnected) === null || _a7 === void 0 ? void 0 : _a7.call(this);
      } else {
        (_b2 = this.disconnected) === null || _b2 === void 0 ? void 0 : _b2.call(this);
      }
    }
    if (isClearingDirective) {
      notifyChildrenConnectedChanged(this, isConnected);
      removeDisconnectableFromParent(this);
    }
  }
  /**
   * Sets the value of the directive's Part outside the normal `update`/`render`
   * lifecycle of a directive.
   *
   * This method should not be called synchronously from a directive's `update`
   * or `render`.
   *
   * @param directive The directive to update
   * @param value The value to set
   */
  setValue(value) {
    if (isSingleExpression(this.__part)) {
      this.__part._$setValue(value, this);
    } else {
      if (DEV_MODE && this.__attributeIndex === void 0) {
        throw new Error(`Expected this.__attributeIndex to be a number`);
      }
      const newValues = [...this.__part._$committedValue];
      newValues[this.__attributeIndex] = value;
      this.__part._$setValue(newValues, this, 0);
    }
  }
  /**
   * User callbacks for implementing logic to release any resources/subscriptions
   * that may have been retained by this directive. Since directives may also be
   * re-connected, `reconnected` should also be implemented to restore the
   * working state of the directive prior to the next render.
   */
  disconnected() {
  }
  reconnected() {
  }
};

// node_modules/lit-html/development/directives/private-async-helpers.js
var forAwaitOf = async (iterable, callback) => {
  for await (const v of iterable) {
    if (await callback(v) === false) {
      return;
    }
  }
};
var PseudoWeakRef = class {
  constructor(ref2) {
    this._ref = ref2;
  }
  /**
   * Disassociates the ref with the backing instance.
   */
  disconnect() {
    this._ref = void 0;
  }
  /**
   * Reassociates the ref with the backing instance.
   */
  reconnect(ref2) {
    this._ref = ref2;
  }
  /**
   * Retrieves the backing instance (will be undefined when disconnected)
   */
  deref() {
    return this._ref;
  }
};
var Pauser = class {
  constructor() {
    this._promise = void 0;
    this._resolve = void 0;
  }
  /**
   * When paused, returns a promise to be awaited; when unpaused, returns
   * undefined. Note that in the microtask between the pauser being resumed
   * an an await of this promise resolving, the pauser could be paused again,
   * hence callers should check the promise in a loop when awaiting.
   * @returns A promise to be awaited when paused or undefined
   */
  get() {
    return this._promise;
  }
  /**
   * Creates a promise to be awaited
   */
  pause() {
    var _a7;
    (_a7 = this._promise) !== null && _a7 !== void 0 ? _a7 : this._promise = new Promise((resolve) => this._resolve = resolve);
  }
  /**
   * Resolves the promise which may be awaited
   */
  resume() {
    var _a7;
    (_a7 = this._resolve) === null || _a7 === void 0 ? void 0 : _a7.call(this);
    this._promise = this._resolve = void 0;
  }
};

// node_modules/lit-html/development/directives/async-replace.js
var AsyncReplaceDirective = class extends AsyncDirective {
  constructor() {
    super(...arguments);
    this.__weakThis = new PseudoWeakRef(this);
    this.__pauser = new Pauser();
  }
  // @ts-expect-error value not used, but we want a nice parameter for docs
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  render(value, _mapper) {
    return noChange;
  }
  update(_part, [value, mapper]) {
    if (!this.isConnected) {
      this.disconnected();
    }
    if (value === this.__value) {
      return;
    }
    this.__value = value;
    let i = 0;
    const { __weakThis: weakThis, __pauser: pauser } = this;
    forAwaitOf(value, async (v) => {
      while (pauser.get()) {
        await pauser.get();
      }
      const _this = weakThis.deref();
      if (_this !== void 0) {
        if (_this.__value !== value) {
          return false;
        }
        if (mapper !== void 0) {
          v = mapper(v, i);
        }
        _this.commitValue(v, i);
        i++;
      }
      return true;
    });
    return noChange;
  }
  // Override point for AsyncAppend to append rather than replace
  commitValue(value, _index) {
    this.setValue(value);
  }
  disconnected() {
    this.__weakThis.disconnect();
    this.__pauser.pause();
  }
  reconnected() {
    this.__weakThis.reconnect(this);
    this.__pauser.resume();
  }
};
var asyncReplace = directive(AsyncReplaceDirective);

// node_modules/lit-html/development/directives/async-append.js
var AsyncAppendDirective = class extends AsyncReplaceDirective {
  // Override AsyncReplace to narrow the allowed part type to ChildPart only
  constructor(partInfo) {
    super(partInfo);
    if (partInfo.type !== PartType.CHILD) {
      throw new Error("asyncAppend can only be used in child expressions");
    }
  }
  // Override AsyncReplace to save the part since we need to append into it
  update(part, params) {
    this.__childPart = part;
    return super.update(part, params);
  }
  // Override AsyncReplace to append rather than replace
  commitValue(value, index) {
    if (index === 0) {
      clearPart(this.__childPart);
    }
    const newPart = insertPart(this.__childPart);
    setChildPartValue(newPart, value);
  }
};
var asyncAppend = directive(AsyncAppendDirective);

// node_modules/lit-html/development/directives/cache.js
var getStringsFromTemplateResult = (result) => isCompiledTemplateResult(result) ? result["_$litType$"].h : result.strings;
var CacheDirective = class extends Directive {
  constructor(partInfo) {
    super(partInfo);
    this._templateCache = /* @__PURE__ */ new WeakMap();
  }
  render(v) {
    return [v];
  }
  update(containerPart, [v]) {
    const _valueKey = isTemplateResult(this._value) ? getStringsFromTemplateResult(this._value) : null;
    const vKey = isTemplateResult(v) ? getStringsFromTemplateResult(v) : null;
    if (_valueKey !== null && (vKey === null || _valueKey !== vKey)) {
      const partValue = getCommittedValue(containerPart);
      const childPart = partValue.pop();
      let cachedContainerPart = this._templateCache.get(_valueKey);
      if (cachedContainerPart === void 0) {
        const fragment = document.createDocumentFragment();
        cachedContainerPart = render(nothing, fragment);
        cachedContainerPart.setConnected(false);
        this._templateCache.set(_valueKey, cachedContainerPart);
      }
      setCommittedValue(cachedContainerPart, [childPart]);
      insertPart(cachedContainerPart, void 0, childPart);
    }
    if (vKey !== null) {
      if (_valueKey === null || _valueKey !== vKey) {
        const cachedContainerPart = this._templateCache.get(vKey);
        if (cachedContainerPart !== void 0) {
          const partValue = getCommittedValue(cachedContainerPart);
          const cachedPart = partValue.pop();
          clearPart(containerPart);
          insertPart(containerPart, void 0, cachedPart);
          setCommittedValue(containerPart, [cachedPart]);
        }
      }
      this._value = v;
    } else {
      this._value = void 0;
    }
    return this.render(v);
  }
};
var cache = directive(CacheDirective);

// node_modules/lit-html/development/directives/choose.js
var choose = (value, cases, defaultCase) => {
  for (const c of cases) {
    const caseValue = c[0];
    if (caseValue === value) {
      const fn = c[1];
      return fn();
    }
  }
  return defaultCase === null || defaultCase === void 0 ? void 0 : defaultCase();
};

// node_modules/lit-html/development/directives/guard.js
var initialValue = {};
var GuardDirective = class extends Directive {
  constructor() {
    super(...arguments);
    this._previousValue = initialValue;
  }
  render(_value, f) {
    return f();
  }
  update(_part, [value, f]) {
    if (Array.isArray(value)) {
      if (Array.isArray(this._previousValue) && this._previousValue.length === value.length && value.every((v, i) => v === this._previousValue[i])) {
        return noChange;
      }
    } else if (this._previousValue === value) {
      return noChange;
    }
    this._previousValue = Array.isArray(value) ? Array.from(value) : value;
    const r = this.render(value, f);
    return r;
  }
};
var guard = directive(GuardDirective);

// node_modules/lit-html/development/directives/join.js
function* join(items, joiner) {
  const isFunction = typeof joiner === "function";
  if (items !== void 0) {
    let i = -1;
    for (const value of items) {
      if (i > -1) {
        yield isFunction ? joiner(i) : joiner;
      }
      i++;
      yield value;
    }
  }
}

// node_modules/lit-html/development/directives/keyed.js
var Keyed = class extends Directive {
  constructor() {
    super(...arguments);
    this.key = nothing;
  }
  render(k, v) {
    this.key = k;
    return v;
  }
  update(part, [k, v]) {
    if (k !== this.key) {
      setCommittedValue(part);
      this.key = k;
    }
    return v;
  }
};
var keyed = directive(Keyed);

// node_modules/lit-html/development/directives/live.js
var LiveDirective = class extends Directive {
  constructor(partInfo) {
    super(partInfo);
    if (!(partInfo.type === PartType.PROPERTY || partInfo.type === PartType.ATTRIBUTE || partInfo.type === PartType.BOOLEAN_ATTRIBUTE)) {
      throw new Error("The `live` directive is not allowed on child or event bindings");
    }
    if (!isSingleExpression(partInfo)) {
      throw new Error("`live` bindings can only contain a single expression");
    }
  }
  render(value) {
    return value;
  }
  update(part, [value]) {
    if (value === noChange || value === nothing) {
      return value;
    }
    const element = part.element;
    const name = part.name;
    if (part.type === PartType.PROPERTY) {
      if (value === element[name]) {
        return noChange;
      }
    } else if (part.type === PartType.BOOLEAN_ATTRIBUTE) {
      if (!!value === element.hasAttribute(name)) {
        return noChange;
      }
    } else if (part.type === PartType.ATTRIBUTE) {
      if (element.getAttribute(name) === String(value)) {
        return noChange;
      }
    }
    setCommittedValue(part);
    return value;
  }
};
var live = directive(LiveDirective);

// node_modules/lit-html/development/directives/map.js
function* map(items, f) {
  if (items !== void 0) {
    let i = 0;
    for (const value of items) {
      yield f(value, i++);
    }
  }
}

// node_modules/lit-html/development/directives/range.js
function* range(startOrEnd, end, step = 1) {
  const start = end === void 0 ? 0 : startOrEnd;
  end !== null && end !== void 0 ? end : end = startOrEnd;
  for (let i = start; step > 0 ? i < end : end < i; i += step) {
    yield i;
  }
}

// node_modules/lit-html/development/directives/ref.js
var createRef = () => new Ref();
var Ref = class {
};
var lastElementForContextAndCallback = /* @__PURE__ */ new WeakMap();
var RefDirective = class extends AsyncDirective {
  render(_ref) {
    return nothing;
  }
  update(part, [ref2]) {
    var _a7;
    const refChanged = ref2 !== this._ref;
    if (refChanged && this._ref !== void 0) {
      this._updateRefValue(void 0);
    }
    if (refChanged || this._lastElementForRef !== this._element) {
      this._ref = ref2;
      this._context = (_a7 = part.options) === null || _a7 === void 0 ? void 0 : _a7.host;
      this._updateRefValue(this._element = part.element);
    }
    return nothing;
  }
  _updateRefValue(element) {
    var _a7;
    if (typeof this._ref === "function") {
      const context = (_a7 = this._context) !== null && _a7 !== void 0 ? _a7 : globalThis;
      let lastElementForCallback = lastElementForContextAndCallback.get(context);
      if (lastElementForCallback === void 0) {
        lastElementForCallback = /* @__PURE__ */ new WeakMap();
        lastElementForContextAndCallback.set(context, lastElementForCallback);
      }
      if (lastElementForCallback.get(this._ref) !== void 0) {
        this._ref.call(this._context, void 0);
      }
      lastElementForCallback.set(this._ref, element);
      if (element !== void 0) {
        this._ref.call(this._context, element);
      }
    } else {
      this._ref.value = element;
    }
  }
  get _lastElementForRef() {
    var _a7, _b2, _c;
    return typeof this._ref === "function" ? (_b2 = lastElementForContextAndCallback.get((_a7 = this._context) !== null && _a7 !== void 0 ? _a7 : globalThis)) === null || _b2 === void 0 ? void 0 : _b2.get(this._ref) : (_c = this._ref) === null || _c === void 0 ? void 0 : _c.value;
  }
  disconnected() {
    if (this._lastElementForRef === this._element) {
      this._updateRefValue(void 0);
    }
  }
  reconnected() {
    this._updateRefValue(this._element);
  }
};
var ref = directive(RefDirective);

// node_modules/lit-html/development/directives/template-content.js
var TemplateContentDirective = class extends Directive {
  constructor(partInfo) {
    super(partInfo);
    if (partInfo.type !== PartType.CHILD) {
      throw new Error("templateContent can only be used in child bindings");
    }
  }
  render(template) {
    if (this._previousTemplate === template) {
      return noChange;
    }
    this._previousTemplate = template;
    return document.importNode(template.content, true);
  }
};
var templateContent = directive(TemplateContentDirective);

// node_modules/lit-html/development/directives/unsafe-html.js
var HTML_RESULT = 1;
var UnsafeHTMLDirective = class extends Directive {
  constructor(partInfo) {
    super(partInfo);
    this._value = nothing;
    if (partInfo.type !== PartType.CHILD) {
      throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);
    }
  }
  render(value) {
    if (value === nothing || value == null) {
      this._templateResult = void 0;
      return this._value = value;
    }
    if (value === noChange) {
      return value;
    }
    if (typeof value != "string") {
      throw new Error(`${this.constructor.directiveName}() called with a non-string value`);
    }
    if (value === this._value) {
      return this._templateResult;
    }
    this._value = value;
    const strings = [value];
    strings.raw = strings;
    return this._templateResult = {
      // Cast to a known set of integers that satisfy ResultType so that we
      // don't have to export ResultType and possibly encourage this pattern.
      // This property needs to remain unminified.
      ["_$litType$"]: this.constructor.resultType,
      strings,
      values: []
    };
  }
};
UnsafeHTMLDirective.directiveName = "unsafeHTML";
UnsafeHTMLDirective.resultType = HTML_RESULT;
var unsafeHTML = directive(UnsafeHTMLDirective);

// node_modules/lit-html/development/directives/unsafe-svg.js
var SVG_RESULT = 2;
var UnsafeSVGDirective = class extends UnsafeHTMLDirective {
};
UnsafeSVGDirective.directiveName = "unsafeSVG";
UnsafeSVGDirective.resultType = SVG_RESULT;
var unsafeSVG = directive(UnsafeSVGDirective);

// node_modules/lit-html/development/directives/until.js
var isPromise = (x) => {
  return !isPrimitive(x) && typeof x.then === "function";
};
var _infinity = 1073741823;
var UntilDirective = class extends AsyncDirective {
  constructor() {
    super(...arguments);
    this.__lastRenderedIndex = _infinity;
    this.__values = [];
    this.__weakThis = new PseudoWeakRef(this);
    this.__pauser = new Pauser();
  }
  render(...args) {
    var _a7;
    return (_a7 = args.find((x) => !isPromise(x))) !== null && _a7 !== void 0 ? _a7 : noChange;
  }
  update(_part, args) {
    const previousValues = this.__values;
    let previousLength = previousValues.length;
    this.__values = args;
    const weakThis = this.__weakThis;
    const pauser = this.__pauser;
    if (!this.isConnected) {
      this.disconnected();
    }
    for (let i = 0; i < args.length; i++) {
      if (i > this.__lastRenderedIndex) {
        break;
      }
      const value = args[i];
      if (!isPromise(value)) {
        this.__lastRenderedIndex = i;
        return value;
      }
      if (i < previousLength && value === previousValues[i]) {
        continue;
      }
      this.__lastRenderedIndex = _infinity;
      previousLength = 0;
      Promise.resolve(value).then(async (result) => {
        while (pauser.get()) {
          await pauser.get();
        }
        const _this = weakThis.deref();
        if (_this !== void 0) {
          const index = _this.__values.indexOf(value);
          if (index > -1 && index < _this.__lastRenderedIndex) {
            _this.__lastRenderedIndex = index;
            _this.setValue(result);
          }
        }
      });
    }
    return noChange;
  }
  disconnected() {
    this.__weakThis.disconnect();
    this.__pauser.pause();
  }
  reconnected() {
    this.__weakThis.reconnect(this);
    this.__pauser.resume();
  }
};
var until = directive(UntilDirective);

// node_modules/omni-ui/dist/color.js
var Color = class _Color {
  static number(input, relativeTo = 1) {
    let n;
    if (typeof input === "string" && input.endsWith("%")) {
      n = (Number(input.slice(0, -1)) || 0) / 100 * relativeTo;
    } else {
      n = Number(input) || 0;
    }
    return n;
  }
  /*
         parse input to an expected color dictionary describing a color
         @param {object|string} input - like css strings 'rgb(0,0,0)' 'hsl(1turn, 50%, 50% / 0.5)' '#11223344' and objects {r:255,g:255,b:255} from vanilla-colorful picker events for various types
         @returns {type: 'rgb|hsl', r, g, b, h, s, l, a, grad: 'deg|grad|rad|turn'} with whatever values correlate, all number values on properties except type (and angle for hsl)
       */
  static parse(input) {
    let output = {};
    let alpha;
    if (typeof input === "object") {
      const { r, g, b, h, s, l, a, angle = "deg" } = input;
      if (typeof r === "number") {
        output = { r, g, b, a };
      } else if (typeof h === "number") {
        output = { h, s, l, a, angle };
      }
    } else if (typeof input === "string") {
      const txt = input.trim();
      let r;
      let g;
      let b;
      let a;
      if (txt.startsWith("#")) {
        const size = txt.length;
        if (size <= 5) {
          r = _Color.number(`0x${txt[1]}${txt[1]}`);
          g = _Color.number(`0x${txt[2]}${txt[2]}`);
          b = _Color.number(`0x${txt[3]}${txt[3]}`);
          if (size > 4)
            a = _Color.number(`0x${txt[4]}${txt[4]}`) / 255;
        } else {
          r = _Color.number(`0x${txt[1]}${txt[2]}`);
          g = _Color.number(`0x${txt[3]}${txt[4]}`);
          b = _Color.number(`0x${txt[5]}${txt[6]}`);
          if (size > 7)
            a = _Color.number(`0x${txt[7]}${txt[8]}`) / 255;
        }
        alpha = a;
        output = { r, g, b };
      } else if (txt.startsWith("rgb") || txt.startsWith("hsl")) {
        const [prefix = "", value = ""] = txt.split(/[()]/);
        const [v1 = "", v2 = "", v3 = "", v4] = value.trim().split(/[,\s/]+/) ?? [];
        if (prefix.startsWith("hsl")) {
          let [s, h = "", angle = "", l] = v1.match(/^([0-9.]+)([a-z]*)/) ?? [];
          if (!/deg|turn|grad|rad/.test(angle))
            angle = "deg";
          h = _Color.number(h);
          s = _Color.number(v2);
          l = _Color.number(v3);
          output = { h, s, l, angle };
        } else {
          r = _Color.number(v1, 255);
          g = _Color.number(v2, 255);
          b = _Color.number(v3, 255);
          output = { r, g, b };
        }
        if (v4) {
          a = _Color.number(v4);
        }
        alpha = a;
      }
      if (alpha !== void 0) {
        alpha = _Color.number(alpha);
        if (alpha < 0) {
          alpha = 0;
        } else if (alpha > 1) {
          alpha = 1;
        }
        output.a = alpha;
      }
    }
    return output;
  }
  static convertRGBtoHSL(r, g, b) {
    if (typeof r !== "number")
      throw new Error("missing red for conversion to HSL");
    const [red, green, blue] = [r / 255, g / 255, b / 255];
    const [min, max] = [Math.min(red, green, blue), Math.max(red, green, blue)];
    const diff = max - min;
    let h;
    let s;
    let l;
    h = s = l = 0;
    if (diff === 0) {
      h = 0;
    } else if (max === red) {
      h = (green - blue) / diff % 6;
    } else if (max === green) {
      h = (blue - red) / diff + 2;
    } else {
      h = (red - green) / diff + 4;
    }
    const angle = "deg";
    h = Math.round(h * 60) % 360;
    if (h < 0)
      h += 360;
    l = (max + min) / 2;
    s = diff / (1 - Math.abs(2 * l - 1));
    return { h, s, l, angle };
  }
  static convertHSLtoRGB(hue, saturation, luminescence, angleUnits = "deg") {
    if (typeof hue !== "number")
      throw new Error("missing hue for conversion to RGB");
    let degrees = hue;
    if (!angleUnits.includes("deg")) {
      if (angleUnits.includes("rad")) {
        degrees = hue * 180 / Math.PI;
      } else if (angleUnits.includes("grad")) {
        degrees = hue * 360 / 400;
      } else if (angleUnits.includes("turn")) {
        degrees = hue * 360;
      }
    }
    let r;
    let g;
    let b;
    r = g = b = 0;
    const chroma = (1 - Math.abs(2 * luminescence - 1)) * saturation;
    const x = chroma * (1 - Math.abs(degrees / 60 % 2 - 1));
    const m = luminescence - chroma / 2;
    const section = Math.floor(degrees % 360 / 60);
    switch (section) {
      case 0:
        r = chroma;
        g = x;
        b = 0;
        break;
      case 1:
        r = x;
        g = chroma;
        b = 0;
        break;
      case 2:
        r = 0;
        g = chroma;
        b = x;
        break;
      case 3:
        r = 0;
        g = x;
        b = chroma;
        break;
      case 4:
        r = x;
        g = 0;
        b = chroma;
        break;
      default:
        r = chroma;
        g = 0;
        b = x;
    }
    r = Math.round((r + m) * 255);
    g = Math.round((g + m) * 255);
    b = Math.round((b + m) * 255);
    return { r, g, b };
  }
  toHSL() {
    const { r, g, b } = this;
    const convert = _Color.convertRGBtoHSL(r, g, b);
    Object.assign(this, convert);
    return this;
  }
  toRGB() {
    const { h, s, l, angle = "deg" } = this;
    const convert = _Color.convertHSLtoRGB(h, s, l, angle);
    Object.assign(this, convert);
    return this;
  }
  constructor(colorLike) {
    const input = _Color.parse(colorLike);
    Object.assign(this, { a: 1 }, input);
  }
  // explicit rgba(r,g,b, alpha)
  get rgba() {
    return this.toString("rgba");
  }
  // rgb(r,g,b) include alpha when it exists
  get rgb() {
    return this.toString("rgb");
  }
  // hsl(h, s, l, a) hsl includes optional alpha when exists
  get hsl() {
    return this.toString("hsl");
  }
  // #rgb and alpha when it exists #rrggbbaa
  get hex() {
    return this.toString("hex");
  }
  toString(as = "hex") {
    let { r, g, b, h, s, l, a, angle } = this;
    if (typeof r !== "number" && typeof h !== "number")
      return "Invalid Color";
    let prefix = as || (typeof h === "number" ? "hsl" : "rgb");
    let alpha = "";
    if (prefix.endsWith("a") || a >= 0 && a < 1) {
      a = +a || 0;
      if (a < 0 || a > 1) {
        a = 1;
      }
      alpha = a.toPrecision(2);
      if (alpha.length > 2 && alpha.endsWith("0")) {
        alpha = a.toPrecision(1);
      }
    }
    if (prefix.startsWith("hsl")) {
      if (typeof h !== "number") {
        this.toHSL();
        h = this.h;
        s = this.s;
        l = this.l;
      }
      const hsl = [h + (angle || ""), `${(s * 100).toFixed()}%`, `${(l * 100).toFixed()}%`];
      if (alpha)
        hsl.push(alpha);
      return `hsl(${hsl.join(", ")})`;
    }
    if (typeof r !== "number") {
      this.toRGB();
      r = this.r;
      g = this.g;
      b = this.b;
    }
    if (prefix.startsWith("hex")) {
      const rgb = [r, g, b];
      if (alpha) {
        rgb.push(Math.round(a * 255));
      }
      const short = ["", ""];
      const rrggbb = rgb.map((n) => {
        if (n === void 0)
          return "";
        let hx = n.toString(16);
        if (hx.length < 2)
          hx = `0${hx}`;
        const [h0, h1] = hx.split("");
        short[0] += h0;
        short[1] += h1;
        return hx;
      });
      const hex = short[0];
      return `#${hex === short[1] ? hex : rrggbb.join("")}`;
    }
    if (prefix.startsWith("rgb")) {
      const rgb = [r, g, b];
      prefix = "rgb";
      if (alpha) {
        prefix = "rgba";
        rgb.push(alpha);
      }
      return `${prefix}(${rgb.join(", ")})`;
    }
    return "Invalid Color";
  }
};

// node_modules/omni-ui/dist/controllers/click-outside-controller.js
var _handleClickOutside;
var ClickOutsideController = class {
  constructor(host, closeFn = null) {
    __privateAdd(this, _handleClickOutside, (e) => {
      if (!e.composedPath().includes(this.host)) {
        if ("opened" in this.host && !this.closeFn) {
          this.host.opened = false;
        } else if (this.closeFn) {
          this.closeFn(e);
        } else {
        }
      }
    });
    this.host = host;
    this.closeFn = closeFn;
    this.host.addController(this);
  }
  hostConnected() {
    document.addEventListener("click", __privateGet(this, _handleClickOutside));
  }
  hostDisconnected() {
    document.removeEventListener("click", __privateGet(this, _handleClickOutside));
  }
};
_handleClickOutside = new WeakMap();

// node_modules/omni-ui/dist/component/omni-pill-list/omni-pill-list.js
var __defProp22 = Object.defineProperty;
var __getOwnPropDesc22 = Object.getOwnPropertyDescriptor;
var __decorateClass22 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc22(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp22(target, key, result);
  return result;
};
var styles18 = css`.container{overflow:hidden;min-width:100%;flex:0 0 100%;display:flex;justify-content:space-between;align-items:center}.pills-container{display:flex;justify-content:space-between;align-items:center}.pills{display:flex}.pills omni-chip{cursor:pointer;display:flex;justify-content:space-between;align-items:center;white-space:nowrap;margin-right:.2857142857rem}.pills omni-chip::part(chip){padding:0;background-color:rgba(0,0,0,0)}.pills omni-chip:hover{--color-icon-override: var(--color-gray-0a)}.pills omni-icon{min-width:1.1428571429rem;min-height:1.1428571429rem;margin-right:.2857142857rem;margin-left:1.0714285714rem;font-size:1rem}.pills omni-icon:hover{--color-icon-override: var(--color-primary)}omni-tooltip{margin-left:.4285714286rem}.hint{color:var(--color-electric-blue);white-space:nowrap}`;
var _getTextWidth2, getTextWidth_fn2;
var OmniPillList = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _getTextWidth2);
    this.pillList = [];
    this.tooltipList = [];
    this.items = [];
    this.sliceAt = 10;
    this.overflowWidth = 300;
  }
  static get styles() {
    return [...super.styles, styles18];
  }
  willUpdate(changed) {
    if (changed.has("items")) {
      this.pillList = [];
      this.tooltipList = [];
      const canvas = document.createElement("canvas");
      const context = canvas.getContext("2d");
      let currTotalPillWidth = 0;
      this.items.map((option) => {
        const formattedVal = this.format(typeof option === "object" ? option.value : option);
        const marginRight = 4;
        const canvasErrorBuffer = 10;
        const width = __privateMethod(this, _getTextWidth2, getTextWidth_fn2).call(this, formattedVal, context) + marginRight + canvasErrorBuffer;
        return {
          option,
          value: formattedVal,
          tooltipValue: typeof option === "object" ? option.value : option,
          width
        };
      }).forEach((option) => {
        currTotalPillWidth += option.width + 32;
        if (currTotalPillWidth < this.overflowWidth) {
          this.pillList.push(option);
        } else {
          this.tooltipList.push(option);
        }
      });
      canvas.remove();
    }
  }
  format(words) {
    if (typeof words === "string") {
      return words.slice(0, this.sliceAt) + (words.length > this.sliceAt ? "..." : "");
    } else {
      return words;
    }
  }
  // pills if not overflowing
  get pillsTemplate() {
    if (!this.pillList.length)
      return nothing;
    return html`
      <section class="pills">
        ${this.pillList.map(
      (pill) => html`
            <omni-chip action label=${pill.value}>
              <omni-icon
                icon-id="omni:interactive:remove"
                @click="${(e) => {
        e.stopPropagation();
        this.dispatchNewEvent("remove", { detail: pill.option });
      }}">
              </omni-icon>
            </omni-chip>
          `
    )}
      </section>
    `;
  }
  // items in tooltip not shown in pills
  get tooltipTemplate() {
    if (!this.tooltipList.length)
      return nothing;
    return html`
      <omni-tooltip>
        <span slot="invoker" part="hint" class="hint">+ ${this.tooltipList.length}</span>
        <div slot="content">
          ${this.tooltipList.map((pill) => {
      return html` <p>${pill.tooltipValue}</p> `;
    })}
        </div>
      </omni-tooltip>
    `;
  }
  // prettier-ignore
  render() {
    return html` 
    <div class="container">
      <div class="pills-container">
        ${this.pillsTemplate} 
        ${this.tooltipTemplate}
      </div>
    </div>
    `;
  }
};
_getTextWidth2 = new WeakSet();
getTextWidth_fn2 = function(text2, context) {
  context.font = getComputedStyle(document.documentElement).font;
  let width = context.measureText(String(text2)).width;
  if (String(text2).includes("...")) {
    width = width + context.measureText("...").width;
  }
  return Math.floor(width);
};
__decorateClass22([
  state()
], OmniPillList.prototype, "pillList", 2);
__decorateClass22([
  state()
], OmniPillList.prototype, "tooltipList", 2);
__decorateClass22([
  property({ type: Array, attribute: false })
], OmniPillList.prototype, "items", 2);
__decorateClass22([
  property({ type: Number })
], OmniPillList.prototype, "sliceAt", 2);
__decorateClass22([
  property({ type: Number })
], OmniPillList.prototype, "overflowWidth", 2);
OmniElement.register("omni-pill-list", OmniPillList);

// node_modules/omni-ui/dist/component/omni-dropdown/omni-dropdown.js
var __defProp23 = Object.defineProperty;
var __getOwnPropDesc23 = Object.getOwnPropertyDescriptor;
var __decorateClass23 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc23(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp23(target, key, result);
  return result;
};
var styles19 = css`:host{width:21.4285714286rem;--cursor-state: pointer}:host([disabled]){opacity:.45;--cursor-state: not-allowed;cursor:not-allowed}:host(:not([disabled]):hover){--cursor-state: pointer}:host(:focus-visible){outline:none}:host(:focus-visible) .target{border:.0714285714rem solid var(--color-primary)}.container{position:relative;display:flex;flex-direction:column}.container .wrapper{display:flex;justify-content:flex-start;align-items:center}p.single-select{text-overflow:ellipsis;overflow:hidden;white-space:nowrap;padding-right:.5714285714rem;font-size:1rem}p.single-select.label-variant{font-weight:600}.label-container{display:flex;justify-content:flex-start;align-items:center;height:.9285714286rem}.label-container.top{margin-bottom:.6428571429rem;margin-left:.5rem}.label-container.left{margin-right:.7142857143rem}.label-container label{line-height:.9285714286rem;white-space:nowrap;color:var(--color-core-dark);font-size:.7857142857rem;opacity:.6}.label-container omni-tooltip{padding:0 0 .4285714286rem .4285714286rem}.label-container omni-tooltip omni-icon{--color-icon-lines: var(--color-core-dark)}.target{background-color:var(--color-pale-grey-two);height:2.5714285714rem;display:flex;align-items:center;justify-content:space-between;cursor:var(--cursor-state);user-select:none;border-radius:.2857142857rem;border:.0714285714rem solid rgba(0,0,0,0);padding:0 1.3571428571rem 0 1.3571428571rem}.target.label-variant{height:1.8571428571rem;background-color:rgba(0,0,0,0);padding:.3571428571rem .8571428571rem}.target.label-variant:hover{background-color:#f5f8fb}.target.label-variant:focus,.target.label-variant.opened{background-color:#fff;border:.0714285714rem solid var(--color-primary)}.target.left{flex-grow:1}.target.opened{background-color:#fff}.target.opened p{color:var(--color-core-dark)}.target.opened:not(.label-variant){border:.0714285714rem solid var(--color-primary)}.target.filled p{color:var(--color-core-dark)}.target.has-error{border:.0714285714rem solid var(--color-error)}.target.typeahead{padding-left:0;padding-right:0}.target .target-icons{display:flex;justify-content:flex-end;align-items:center}.target .target-icons .x-close{margin-left:3.2857142857rem}.target omni-icon{min-width:1.2857142857rem;min-height:1.2857142857rem}.target omni-pill-list{flex:0 0 calc(100% - 2rem);max-width:calc(100% - 2rem)}.target omni-search{flex:0 0 100%;height:100%;height:2.5714285714rem;border:none}.target omni-search::part(search-icon-opened-wrapper){margin-left:.8571428571rem}.target omni-search::part(search-icon-opened){--color-icon-lines: var(--color-shark);--size-1: 1rem}.target omni-search::part(input){font-size:.8571428571rem;background-color:rgba(0,0,0,0);border:none;box-shadow:none;padding-left:3.0714285714rem}.target omni-search::part(input)::placeholder{font-size:.8571428571rem}.target p{color:var(--color-core-medium);margin:0}.target p.label-variant{color:var(--color-core-dark);font-weight:600}.target .enable-tooltip::part(hint){pointer-events:auto;cursor:default}.dropdown{width:100%;left:0;max-height:15.1428571429rem;padding:0;border-radius:.7142857143rem;box-shadow:0 .5714285714rem 3.1428571429rem -.3571428571rem rgba(38,55,79,.29);overflow:auto;cursor:pointer;background-color:#fff;position:absolute;z-index:6;top:2.8571428571rem}.dropdown.top{top:4.4285714286rem}.dropdown.no-label{top:2.8571428571rem}.dropdown.label-variant{top:2.1428571429rem}.dropdown.cursor-default{cursor:default}.dropdown .no-results,.dropdown .add-dynamic{margin:0 0 0 2.2857142857rem}.dropdown .add-dynamic{cursor:pointer}.dropdown.extend-right{width:calc(100% + 3.1428571429rem)}.dropdown.padding{padding:.5714285714rem 0}.dropdown omni-tooltip{display:flex;flex-direction:column}.dropdown .select-all-button{display:flex;justify-content:flex-end;align-items:center;padding:.4285714286rem 1.2857142857rem}.dropdown .select-all-button a{color:#00a1d2}.dropdown .select-all-button p{color:rgba(59,62,63,.5019607843);margin:0;font-size:.8571428571rem;line-height:.8571428571rem;letter-spacing:.0023rem}.dropdown omni-search{height:2.5714285714rem;border:.0714285714rem solid rgba(0,0,0,0);border-bottom:.0714285714rem solid #edf0f5;padding-bottom:.1428571429rem;box-sizing:content-box}.dropdown omni-search::part(search-icon-opened){--color-icon-lines: var(--color-shark);--size-1: 1rem}.dropdown omni-search::part(input){background-color:rgba(0,0,0,0);border:none;box-shadow:none;border:.0714285714rem solid rgba(0,0,0,0);font-size:.8571428571rem}.dropdown omni-search::part(input):focus{border:.0714285714rem solid var(--color-primary)}.dropdown omni-search::part(input)::placeholder{font-size:.8571428571rem}.dropdown omni-loading-indicator{padding-top:.5714285714rem;min-height:2.5714285714rem}.dropdown omni-loading-indicator::part(svg){width:2rem}.dropdown .item{min-height:2.5714285714rem;padding:.5714285714rem .5714285714rem .5714285714rem 0;margin:0;user-select:none;display:flex;flex-grow:1;align-items:flex-start;justify-content:flex-start;border:.0714285714rem solid rgba(0,0,0,0)}.dropdown .item:focus,.dropdown .item:active,.dropdown .item.selected,.dropdown .item:hover{background-color:var(--white);outline:none}.dropdown .item omni-checkbox{margin-top:calc(1rem - 0.7857142857rem)}.dropdown .item:not(.disabled):hover omni-checkbox{--checkbox-border-color: var(--color-primary)}.dropdown .item label{color:#3b3e3f;pointer-events:none}.dropdown .item .item-gutter{display:flex;justify-content:center;align-items:center;min-width:2.2857142857rem;margin-top:.1428rem}.dropdown .item .item-gutter.groupheader{min-width:1.1428571429rem}.dropdown .item .item-gutter omni-icon{--color-icon-lines: var(--color-primary);height:1.1428571429rem;width:1.1428571429rem}.dropdown .item.disabled{cursor:not-allowed}.dropdown .item.disabled:hover{background-color:rgba(0,0,0,0)}.dropdown .item.disabled:focus,.dropdown .item.disabled:active{outline:none;border:.0714285714rem solid rgba(0,0,0,0);background-color:rgba(0,0,0,0)}.dropdown .item.disabled label{color:#a2a9ad !important}.dropdown .item.groupheader span{color:#a2a9ad !important;font-weight:600}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{padding:.5714285714rem 0 0 .7142857143rem;display:flex;flex:0 0 100%}.footer-container.help-text{justify-content:flex-end;align-items:center}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}`;
var _clickOutsideController, _disableOnMaxLimit, disableOnMaxLimit_fn, _getFilteredOptions, getFilteredOptions_fn, _handleKeysOnDropdown, _toDisplayValue2, toDisplayValue_fn2, _handleRemoveItem, handleRemoveItem_fn, _emitChange, emitChange_fn, _selectedToFormDataString, selectedToFormDataString_get, _labelTemplate, labelTemplate_get, _handleTargetClicked, handleTargetClicked_fn, _handleSearchChange, handleSearchChange_fn, _searchInputTemplate, searchInputTemplate_get, _handleVariantClear, handleVariantClear_fn, _innerTargetTemplateForType, innerTargetTemplateForType_get, _targetTemplate, targetTemplate_get, _handleEnterOnItem3, handleEnterOnItem_fn3, _handleDynamicAddition, handleDynamicAddition_fn, _handleSelectChange2, handleSelectChange_fn2, _dropdownTemplate, dropdownTemplate_get, _footerTemplate2, footerTemplate_get2, _shouldPreventLastDeselect, shouldPreventLastDeselect_fn, _commitSelections, commitSelections_fn, _updateReflectedValue, updateReflectedValue_fn, _conditionalLeftLabelWrapper, conditionalLeftLabelWrapper_fn, _a6;
var _OmniDropdown = (_a6 = class extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    __privateAdd(this, _disableOnMaxLimit);
    __privateAdd(this, _getFilteredOptions);
    __privateAdd(this, _toDisplayValue2);
    __privateAdd(this, _handleRemoveItem);
    __privateAdd(this, _emitChange);
    __privateAdd(this, _selectedToFormDataString);
    __privateAdd(this, _labelTemplate);
    /** toggles opened property and emits event */
    __privateAdd(this, _handleTargetClicked);
    __privateAdd(this, _handleSearchChange);
    __privateAdd(this, _searchInputTemplate);
    // TODO decide what the 'clear' event does. does it clear the current selection and emit an event?
    __privateAdd(this, _handleVariantClear);
    __privateAdd(this, _innerTargetTemplateForType);
    __privateAdd(this, _targetTemplate);
    __privateAdd(this, _handleEnterOnItem3);
    __privateAdd(this, _handleDynamicAddition);
    __privateAdd(this, _handleSelectChange2);
    __privateAdd(this, _dropdownTemplate);
    __privateAdd(this, _footerTemplate2);
    __privateAdd(this, _shouldPreventLastDeselect);
    /**
     * - logic for selecting single, multi, noselct, and disabled options.
     * - handles form value and validity
     * - TODO: refactor for simplicity and handle revalidating on min/max changes after init */
    __privateAdd(this, _commitSelections);
    __privateAdd(this, _updateReflectedValue);
    /** @internal */
    __privateAdd(this, _conditionalLeftLabelWrapper);
    __privateAdd(this, _clickOutsideController, void 0);
    __privateAdd(this, _handleKeysOnDropdown, void 0);
    __privateSet(this, _clickOutsideController, new ClickOutsideController(this, () => {
      this.opened = false;
      this._searchTerm = "";
    }));
    this._selected = /* @__PURE__ */ new Set();
    this._disabled = /* @__PURE__ */ new Set();
    this._disabledOnMaxSet = /* @__PURE__ */ new Set();
    this._searchTerm = "";
    this._filteredOptions = [];
    this._isLoading = false;
    this._hasGroupHeaders = false;
    this.opened = false;
    this.disableonmax = false;
    this.multiselect = false;
    this.preventLastRemoval = false;
    this.noselect = false;
    this.selectall = false;
    this.typeahead = false;
    this.searchindropdown = false;
    this.dynamicadditions = false;
    this.hidefooter = false;
    this.valueMissingMessage = "Please select an option";
    this.label = "";
    this.labelTooltip = "";
    this.placeholder = "Select an option";
    this.searchPlaceholder = "Search";
    this.helpText = "";
    this.error = "";
    this.disabledMessage = "";
    this.labelPosition = "top";
    this.dropdownAlignment = "vertical";
    this.inputDebounceTimer = 0;
    this.variant = "default";
    this.showxicon = false;
    this.options = [];
    this.value = [];
    this.pillListSliceAt = 10;
    __privateSet(this, _handleKeysOnDropdown, (e) => {
      this.updateComplete.then(() => {
        if (e.key === "Enter" && !this.opened) {
          __privateMethod(this, _handleTargetClicked, handleTargetClicked_fn).call(this, e);
        }
        if (e.key === "Escape") {
          __privateMethod(this, _handleTargetClicked, handleTargetClicked_fn).call(this, e, true);
        }
      });
    });
  }
  static get styles() {
    return [...super.styles, styles19];
  }
  /** given an option, find first group header with higher index than option */
  static findGroupHeaderForItem(option, allOptions) {
    const index = allOptions.indexOf(option);
    const reversedOptions = [...allOptions].reverse();
    for (const option2 of reversedOptions.slice(reversedOptions.length - index)) {
      if (typeof option2 === "object" && option2.groupheader) {
        return option2;
      }
    }
    return null;
  }
  async connectedCallback() {
    super.connectedCallback();
    this.addEventListener("keyup", __privateGet(this, _handleKeysOnDropdown));
    this.tabIndex = 0;
    this._internals.setFormValue("");
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("keyup", __privateGet(this, _handleKeysOnDropdown));
  }
  async willUpdate(changed) {
    var _a7, _b2, _c, _d;
    if (changed.has("options")) {
      this.options.forEach((option) => {
        if (option && typeof option === "object" && option.disabled) {
          this._disabled.add(option);
        }
        if (option && isGroupHeader(option)) {
          this._disabled.add(option);
        }
      });
      this._hasGroupHeaders = (_a7 = this.options) == null ? void 0 : _a7.some((option) => isGroupHeader(option));
      this._isLoading = true;
      this._filteredOptions = await __privateMethod(this, _getFilteredOptions, getFilteredOptions_fn).call(this);
      this._isLoading = false;
    }
    if ((changed.has("min") || changed.has("max")) && !this.multiselect) {
      console.warn(`${this.localName}: setting min or max is only allowed when multiselect = true`);
    }
    if (changed.has("value") || changed.has("min") || changed.has("max")) {
      if (((_b2 = changed.get("value")) == null ? void 0 : _b2.toString()) !== ((_c = this.value) == null ? void 0 : _c.toString())) {
        this._selected.clear();
        const add = [];
        for (const option of this.value) {
          if (!this._selected.has(option)) {
            add.push(option);
          }
        }
        __privateMethod(this, _commitSelections, commitSelections_fn).call(this, add, false, true);
      }
    }
    if (changed.has("variant") && this.variant === "label") {
      this.dropdownAlignment = "extend-right";
      this.helpText = "";
      this.label = "";
      this.labelTooltip = "";
      this.multiselect = false;
      this.error = "";
      this.labelPosition = "top";
      this.hidefooter = true;
      this.typeahead = false;
      this.searchindropdown = false;
      this.selectall = false;
    }
    if (changed.has("fetchOptionsFn")) {
      if ((_d = this.options) == null ? void 0 : _d.length) {
        console.warn("<omni-dropdown>: options should not be set by property when providing a fetchOptionsFn");
      }
    }
    if (changed.has("_searchTerm")) {
      this._isLoading = true;
      __privateMethod(this, _getFilteredOptions, getFilteredOptions_fn).call(this).then((options2) => {
        this._filteredOptions = options2;
        this._isLoading = false;
      });
    }
    if (changed.has("_selected") && this.disableonmax) {
      __privateMethod(this, _disableOnMaxLimit, disableOnMaxLimit_fn).call(this);
    }
  }
  async firstUpdated() {
    await this.updateComplete;
    if (this.required && !this._selected.size) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.targetEl);
    }
    this._computedTargetWidth = this.targetEl.clientWidth;
    this._computedLabelWidth = this.labelEl ? getElementSize(this.labelEl).width : null;
    this._isLoading = true;
    __privateMethod(this, _getFilteredOptions, getFilteredOptions_fn).call(this).then((options2) => {
      this._isLoading = false;
      this._filteredOptions = options2;
    });
  }
  updated(changed) {
    if (!changed.has("_computedTargetWidth")) {
      this._computedTargetWidth = this.targetEl.clientWidth;
    }
    if (!changed.has("_computedLabelWidth")) {
      this._computedLabelWidth = this.labelEl ? getElementSize(this.labelEl).width : null;
    }
  }
  /** select items in dropdown */
  select(options2) {
    __privateMethod(this, _commitSelections, commitSelections_fn).call(this, options2, false);
  }
  /** unselect items in dropdown */
  unselect(options2) {
    __privateMethod(this, _commitSelections, commitSelections_fn).call(this, options2, true);
  }
  /** toggle items to be selected or unselected based on current state */
  toggle(options2) {
    __privateMethod(this, _commitSelections, commitSelections_fn).call(this, options2);
  }
  /** add options to the list of disabled options */
  disableOptions(options2) {
    options2.forEach((option) => {
      this._disabled.add(option);
    });
  }
  /** add options to the list to remove it from disabled options , NOTE: if using object as option
   * then either use disabled property or public method, Using both can cause unexpected behavior.
   */
  enableOptions(options2) {
    options2.forEach((option) => {
      this._disabled.delete(option);
    });
  }
  /** reset all selected options, form value, and reflected value */
  reset() {
    this._selected = /* @__PURE__ */ new Set();
    this._disabled = /* @__PURE__ */ new Set();
    this.options.forEach((option) => {
      if (option && typeof option === "object" && option.disabled) {
        this._disabled.add(option);
      }
    });
    __privateMethod(this, _updateReflectedValue, updateReflectedValue_fn).call(this);
    if (this.required) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.targetEl);
    } else {
      this._internals.setValidity({});
    }
    this._internals.setFormValue("");
    __privateMethod(this, _emitChange, emitChange_fn).call(this);
  }
  //prettier-ignore
  render() {
    return html`
      <div class="container ${this.labelPosition}">
        ${__privateMethod(this, _conditionalLeftLabelWrapper, conditionalLeftLabelWrapper_fn).call(this, html` 
          ${__privateGet(this, _labelTemplate, labelTemplate_get)} 
          ${__privateGet(this, _targetTemplate, targetTemplate_get)} 
        `)}
        ${__privateGet(this, _footerTemplate2, footerTemplate_get2)} 
        ${__privateGet(this, _dropdownTemplate, dropdownTemplate_get)}
      </div>
    `;
  }
}, _clickOutsideController = new WeakMap(), _disableOnMaxLimit = new WeakSet(), disableOnMaxLimit_fn = function() {
  if (this.max && this._selected.size >= this.max) {
    this.options.forEach((option) => {
      if (!this._selected.has(option)) {
        this._disabledOnMaxSet.add(option);
      }
    });
  } else {
    this._disabledOnMaxSet = /* @__PURE__ */ new Set();
  }
}, _getFilteredOptions = new WeakSet(), getFilteredOptions_fn = async function() {
  if (this.fetchOptionsFn) {
    return this.fetchOptionsFn(this._searchTerm);
  }
  const groupHeadersExist = this.options.some(
    (option) => typeof option === "object" && option.groupheader
  );
  const foundInSearch = [];
  for (const option of this.options) {
    if (!this.typeahead) {
      foundInSearch.push({ match: true, option });
    } else if (typeof option === "object" && option.groupheader) {
      foundInSearch.push({ match: false, option });
    } else {
      const val = String(__privateMethod(this, _toDisplayValue2, toDisplayValue_fn2).call(this, option));
      const match = val.toLowerCase().trim().includes(this._searchTerm.trim().toLowerCase());
      foundInSearch.push({ match, option });
    }
  }
  if (groupHeadersExist && this.typeahead) {
    const groupHeaders = /* @__PURE__ */ new Set();
    for (const result of foundInSearch) {
      if (!isGroupHeader(result.option) && result.match) {
        const header = _a6.findGroupHeaderForItem(result.option, this.options);
        if (header) {
          groupHeaders.add(header);
        }
      }
    }
    foundInSearch.forEach((result) => {
      if (groupHeaders.has(result.option)) {
        result.match = true;
      }
    });
  }
  return foundInSearch.filter((result) => result.match).map((result) => result.option);
}, _handleKeysOnDropdown = new WeakMap(), _toDisplayValue2 = new WeakSet(), toDisplayValue_fn2 = function(option) {
  return option && typeof option === "object" ? option.value : option;
}, _handleRemoveItem = new WeakSet(), handleRemoveItem_fn = function(e) {
  e.stopPropagation();
  if (!this.disabled) {
    __privateMethod(this, _handleSelectChange2, handleSelectChange_fn2).call(this, e);
  }
}, _emitChange = new WeakSet(), emitChange_fn = function() {
  const [firstSelected] = [...this._selected.values()];
  const allSelected = [...this._selected.values()];
  const eventDetail = {
    detail: this.multiselect ? allSelected : firstSelected ? firstSelected : null
  };
  this.dispatchNewEvent("change", eventDetail);
}, _selectedToFormDataString = new WeakSet(), selectedToFormDataString_get = function() {
  return [...this._selected.values()].map((one) => {
    if (one && typeof one === "object") {
      return String(one.value);
    }
    return String(one);
  }).join(",");
}, _labelTemplate = new WeakSet(), labelTemplate_get = function() {
  if (!this.label)
    return nothing;
  const tooltipLabel = html`
      <div class="label-container ${this.labelPosition}">
        <label part="label">${this.label}</label>
        ${this.labelTooltip ? html`
              <omni-tooltip>
                <omni-icon slot="invoker" icon-id="icon:informative:info"></omni-icon>
                <span slot="content">${this.labelTooltip}</span>
              </omni-tooltip>
            ` : nothing}
      </div>
    `;
  return tooltipLabel;
}, _handleTargetClicked = new WeakSet(), handleTargetClicked_fn = function(e, opened = this.opened) {
  this.opened = this.disabled ? false : !opened;
  if (this.typeahead && !this.searchindropdown && !this.opened) {
    this.opened = true;
  }
  this.dispatchNewEvent("dropdown", { detail: this.opened });
}, _handleSearchChange = new WeakSet(), handleSearchChange_fn = function({ detail: { value } }) {
  this._searchTerm = value;
}, _searchInputTemplate = new WeakSet(), searchInputTemplate_get = function() {
  return html`
      <omni-search
        .inputDebounceTimer=${this.inputDebounceTimer}
        .value=${this._searchTerm}
        .ph="${this.searchPlaceholder}"
        isopen
        @search-update=${__privateMethod(this, _handleSearchChange, handleSearchChange_fn)}>
      </omni-search>
    `;
}, _handleVariantClear = new WeakSet(), handleVariantClear_fn = function(e) {
  e.stopPropagation();
  this.reset();
  this.dispatchNewEvent("clear");
}, _innerTargetTemplateForType = new WeakSet(), innerTargetTemplateForType_get = function() {
  const targetTypes = {
    placeholder: () => {
      const sliceAt = 30;
      const placeholderToDisplay = this.placeholder.slice(0, sliceAt) + (this.placeholder.length > sliceAt ? "..." : "");
      return html`<p class="${this.variant === "label" ? "single-select label-variant" : ""}">
          ${placeholderToDisplay}
        </p>`;
    },
    one: () => {
      const selected = [...this._selected.values()][0];
      return html`<p class="single-select ${this.variant === "label" ? "label-variant" : ""}">
          ${__privateMethod(this, _toDisplayValue2, toDisplayValue_fn2).call(this, selected)}
        </p>`;
    },
    multi: () => {
      if (!this._computedTargetWidth)
        return nothing;
      const selectedForPillList = [...this._selected.values()];
      const innerWidths = 20 + 18 + 26 + 30;
      return html`<omni-pill-list
          class="${this.disabled ? "enable-tooltip" : ""}"
          .items=${selectedForPillList}
          .overflowWidth=${this._computedTargetWidth - innerWidths}
          .sliceAt=${this.pillListSliceAt}
          @remove=${__privateMethod(this, _handleRemoveItem, handleRemoveItem_fn)}>
        </omni-pill-list>`;
    },
    typeahead: () => __privateGet(this, _searchInputTemplate, searchInputTemplate_get)
  };
  if (this.multiselect && this._hasGroupHeaders) {
    return targetTypes.placeholder();
  }
  if (this.typeahead && !this.searchindropdown) {
    return targetTypes.typeahead();
  }
  if (this.placeholder && !this._selected.size) {
    return targetTypes.placeholder();
  }
  if (this._selected.size === 1 && !this.multiselect) {
    return targetTypes.one();
  }
  return targetTypes.multi();
}, _targetTemplate = new WeakSet(), targetTemplate_get = function() {
  const classes = classMap({
    target: true,
    opened: this.opened,
    filled: this._selected.size > 0,
    "has-error": this.error ? true : false,
    // TODO: make this work with internals
    typeahead: this.typeahead && !this.searchindropdown,
    [this.labelPosition]: true,
    "label-variant": this.variant === "label"
  });
  return html`
      <div class="${classes}" part="target ${this.opened ? "opened" : ""}" @click=${__privateMethod(this, _handleTargetClicked, handleTargetClicked_fn)}>
        ${__privateGet(this, _innerTargetTemplateForType, innerTargetTemplateForType_get)}
        <div class="target-icons">
          ${!this.typeahead || this.searchindropdown ? html`<omni-icon icon-id="omni:interactive:${this.opened ? "up" : "down"}"> </omni-icon>` : nothing}
          ${this.variant === "label" && this._selected.size && this.showxicon ? html`<omni-icon
                class="x-close is-size-6"
                icon-id="icon:interactive:remove"
                @click=${__privateMethod(this, _handleVariantClear, handleVariantClear_fn)}></omni-icon>` : nothing}
        </div>
      </div>
    `;
}, _handleEnterOnItem3 = new WeakSet(), handleEnterOnItem_fn3 = function(e) {
  if (e.detail.eventKey === "Enter") {
    __privateMethod(this, _commitSelections, commitSelections_fn).call(this, [e.detail.value]);
  }
}, _handleDynamicAddition = new WeakSet(), handleDynamicAddition_fn = function() {
  this.options.push(this._searchTerm);
  this.select([this._searchTerm]);
  __privateMethod(this, _handleTargetClicked, handleTargetClicked_fn).call(this, null);
  this._searchTerm = "";
}, _handleSelectChange2 = new WeakSet(), handleSelectChange_fn2 = function({ detail: activeOption }) {
  __privateMethod(this, _commitSelections, commitSelections_fn).call(this, [activeOption]);
}, _dropdownTemplate = new WeakSet(), dropdownTemplate_get = function() {
  var _a7, _b2, _c, _d, _e;
  if (!this.opened)
    return nothing;
  const classes = classMap({
    dropdown: true,
    "no-label": !this.label,
    top: this.labelPosition === "top",
    left: this.labelPosition === "left",
    [this.dropdownAlignment]: true,
    "label-variant": this.variant === "label",
    "cursor-default": this._isLoading || !((_a7 = this._filteredOptions) == null ? void 0 : _a7.length),
    padding: ((_b2 = this._filteredOptions) == null ? void 0 : _b2.length) || this._searchTerm || this._isLoading || this.searchindropdown
  });
  const inlineStyles = styleMap(
    this.labelPosition === "left" ? {
      ...this._computedLabelWidth ? { left: `${this._computedLabelWidth}px` } : {},
      ...this._computedTargetWidth ? { width: `${this._computedTargetWidth}px` } : {}
    } : {}
  );
  return html`
      <div part="dropdown" class="${classes}" style=${inlineStyles}>
        ${this.selectall && this.multiselect ? html`<div class="select-all-button">
              <p>Select : <a @click=${() => this.select(this.options)}>All</a> | <a @click=${this.reset}>None</a></p>
            </div>` : nothing}
        ${this.searchindropdown ? __privateGet(this, _searchInputTemplate, searchInputTemplate_get) : nothing}
        ${this._isLoading ? html`<omni-loading-indicator></omni-loading-indicator>` : nothing}
        ${((_c = this._filteredOptions) == null ? void 0 : _c.length) && !this._isLoading ? html` <omni-options
              ?hasgroupheaders=${this.options.some((one) => one.groupheader)}
              .options=${this._filteredOptions}
              .multiselect=${this.multiselect}
              .disabledList=${/* @__PURE__ */ new Set([...this._disabled, ...this._disabledOnMaxSet])}
              .disabledMessage=${this.disabledMessage}
              .selected=${this._selected}
              .optionsPostTemplate=${this.optionsPostTemplate}
              @selectChange=${__privateMethod(this, _handleSelectChange2, handleSelectChange_fn2)}
              @enterOnItem=${__privateMethod(this, _handleEnterOnItem3, handleEnterOnItem_fn3)}></omni-options>` : nothing}
        ${!((_d = this._filteredOptions) == null ? void 0 : _d.length) && !this._isLoading && this.dynamicadditions && this._searchTerm ? html`<div class="item">
              <p class="add-dynamic" @click=${__privateMethod(this, _handleDynamicAddition, handleDynamicAddition_fn)}>add ${this._searchTerm} as option</p>
            </div>` : nothing}
        ${!((_e = this._filteredOptions) == null ? void 0 : _e.length) && !this._isLoading && !this.dynamicadditions && this._searchTerm ? html`<div class="item disabled">
              <p class="no-results">No results</p>
            </div>` : nothing}
      </div>
    `;
}, _footerTemplate2 = new WeakSet(), footerTemplate_get2 = function() {
  if (this.hidefooter)
    return nothing;
  const footerSpacer = html`<div class="footer-spacer"></div>`;
  if (!this.error && !this.helpText)
    return footerSpacer;
  if (this.error) {
    return html` <div class="footer-container error-text">
        <omni-icon icon-id="omni:informative:error"></omni-icon>
        <span>${this.error}</span>
      </div>`;
  }
  if (this.helpText) {
    return html`
        <div class="footer-container help-text">
          <span>${this.helpText}</span>
        </div>
      `;
  }
}, _shouldPreventLastDeselect = new WeakSet(), shouldPreventLastDeselect_fn = function(option) {
  if (this.preventLastRemoval && this._selected.has(option)) {
    if (this.multiselect && this._selected.size === 1) {
      return true;
    }
    if (!this.multiselect) {
      this.blur();
      this.opened = false;
      return true;
    }
  }
  return false;
}, _commitSelections = new WeakSet(), commitSelections_fn = function(options2, shouldSelect = null, skipEmit = false) {
  if (!options2.length)
    return;
  for (const option of options2) {
    if (this._disabled.has(option))
      continue;
    if (__privateMethod(this, _shouldPreventLastDeselect, shouldPreventLastDeselect_fn).call(this, option))
      continue;
    const existsInSelected = shouldSelect ?? this._selected.has(option);
    this._internals.setValidity({});
    const logicHandler = {
      singleselect: () => {
        this._selected.clear();
        if (!existsInSelected) {
          this._selected.add(option);
          this._internals.setFormValue(__privateGet(this, _selectedToFormDataString, selectedToFormDataString_get));
        } else {
          this._internals.setFormValue("");
          if (this.required) {
            this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.targetEl);
          }
        }
        this.opened = false;
      },
      multiselect: () => {
        if (!existsInSelected) {
          this._selected.add(option);
          this._internals.setFormValue(__privateGet(this, _selectedToFormDataString, selectedToFormDataString_get));
        } else {
          this._selected.delete(option);
          this._internals.setFormValue(__privateGet(this, _selectedToFormDataString, selectedToFormDataString_get));
        }
        if (this.required && this._selected.size < 1 && !this.min && !this.max) {
          this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.targetEl);
        }
        if (this.min && !this.max && this._selected.size < this.min) {
          this._internals.setValidity(
            { rangeUnderflow: true },
            `Must make at least ${this.min} selections.`,
            this.targetEl
          );
        }
        if (!this.min && this.max && this._selected.size > this.max) {
          this._internals.setValidity(
            { rangeOverflow: true },
            `Only ${this.max} maximum selections allowed.`,
            this.targetEl
          );
        }
        if (this.min && this.max && (this._selected.size < this.min || this._selected.size > this.max)) {
          this._internals.setValidity(
            { customError: true },
            `Must make at least ${this.min} minimum and ${this.max} maximum selections.`,
            this.targetEl
          );
        }
      }
    };
    logicHandler[this.multiselect ? "multiselect" : "singleselect"]();
  }
  if (this.valid) {
    this.error = "";
  }
  this._selected = new Set(this._selected);
  __privateMethod(this, _updateReflectedValue, updateReflectedValue_fn).call(this);
  if (!skipEmit) {
    __privateMethod(this, _emitChange, emitChange_fn).call(this);
  }
  if (this.noselect) {
    this._selected = /* @__PURE__ */ new Set();
    __privateMethod(this, _updateReflectedValue, updateReflectedValue_fn).call(this);
  }
}, _updateReflectedValue = new WeakSet(), updateReflectedValue_fn = function() {
  this.value = [...this._selected.values()];
}, _conditionalLeftLabelWrapper = new WeakSet(), conditionalLeftLabelWrapper_fn = function(template) {
  if (this.labelPosition === "left") {
    return html` <div class="wrapper">${template}</div> `;
  } else {
    return template;
  }
}, _a6);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_selected", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_disabled", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_disabledOnMaxSet", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_computedTargetWidth", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_computedLabelWidth", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_searchTerm", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_filteredOptions", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_isLoading", 2);
__decorateClass23([
  state()
], _OmniDropdown.prototype, "_hasGroupHeaders", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "opened", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "disableonmax", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "multiselect", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true })
], _OmniDropdown.prototype, "preventLastRemoval", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "noselect", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "selectall", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "typeahead", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "searchindropdown", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "dynamicadditions", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "hidefooter", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "name", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "valueMissingMessage", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "label", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "labelTooltip", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "placeholder", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "searchPlaceholder", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "helpText", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "error", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "disabledMessage", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "labelPosition", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "dropdownAlignment", 2);
__decorateClass23([
  property({ type: Number })
], _OmniDropdown.prototype, "min", 2);
__decorateClass23([
  property({ type: Number })
], _OmniDropdown.prototype, "max", 2);
__decorateClass23([
  property({ type: Number })
], _OmniDropdown.prototype, "inputDebounceTimer", 2);
__decorateClass23([
  property({ type: String })
], _OmniDropdown.prototype, "variant", 2);
__decorateClass23([
  property({ type: Boolean, attribute: true, reflect: true })
], _OmniDropdown.prototype, "showxicon", 2);
__decorateClass23([
  property({ attribute: false })
], _OmniDropdown.prototype, "options", 2);
__decorateClass23([
  property({ attribute: false })
], _OmniDropdown.prototype, "value", 2);
__decorateClass23([
  property({ attribute: false })
], _OmniDropdown.prototype, "fetchOptionsFn", 2);
__decorateClass23([
  property({ attribute: false })
], _OmniDropdown.prototype, "optionsPostTemplate", 2);
__decorateClass23([
  property({ type: Number })
], _OmniDropdown.prototype, "pillListSliceAt", 2);
__decorateClass23([
  query(".target")
], _OmniDropdown.prototype, "targetEl", 2);
__decorateClass23([
  query(".label-container")
], _OmniDropdown.prototype, "labelEl", 2);
var OmniDropdown = _OmniDropdown;
OmniElement.register("omni-dropdown", OmniDropdown);

// node_modules/omni-ui/dist/component/omni-progress-bar/omni-progress-bar.js
var __defProp24 = Object.defineProperty;
var __getOwnPropDesc24 = Object.getOwnPropertyDescriptor;
var __decorateClass24 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc24(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp24(target, key, result);
  return result;
};
var styles20 = css`:host{position:relative}div{display:flex;background-color:#e6ebf1;border-radius:4px}div.show-percent{margin-right:30px}div .bar{background-image:linear-gradient(90deg, rgb(1, 161, 210) 10%, rgb(3, 187, 243) 49%, rgb(1, 161, 210) 90%);height:12px;border-radius:4px;transition:all 300ms ease-out}span.percent{position:absolute;right:0;top:-3px;font-size:11px;font-weight:normal;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:.24px;text-align:right;color:#a2a9ad}`;
var OmniProgressBar = class extends OmniElement {
  constructor() {
    super(...arguments);
    this.value = 0;
    this.percent = false;
  }
  static get styles() {
    return [...super.styles, styles20];
  }
  render() {
    return html`
      <div class=${this.percent ? "show-percent" : ""}>
        <div class="bar" style=${styleMap({ width: `${this.value}%` })}></div>
      </div>
      ${when(this.percent, () => html` <span class="percent">${this.value}%</span> `)}
    `;
  }
};
__decorateClass24([
  property({ type: Number })
], OmniProgressBar.prototype, "value", 2);
__decorateClass24([
  property({ type: Boolean, attribute: true, reflect: true })
], OmniProgressBar.prototype, "percent", 2);
OmniElement.register("omni-progress-bar", OmniProgressBar);

// node_modules/omni-ui/dist/component/omni-modal-progress/omni-modal-progress.js
var __defProp25 = Object.defineProperty;
var __getOwnPropDesc25 = Object.getOwnPropertyDescriptor;
var __decorateClass25 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc25(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp25(target, key, result);
  return result;
};
var styles21 = css`:host{overflow:visible;position:relative;z-index:999;top:0;bottom:0;left:0;right:0}.modal-container{display:flex;flex-direction:column;align-items:center;justify-content:center;position:fixed;top:0;bottom:0;left:0;right:0}section.backdrop{position:fixed;top:0;bottom:0;left:0;right:0;background-color:#3b3e3f;opacity:.5;z-index:1000;cursor:default}section.body{position:relative;z-index:1001;width:479px;padding:40px;border:1px solid #edf0f4;border-radius:10px;background-color:#fff;display:flex;flex-direction:column;justify-content:center}section.body span.step{font-size:14px;font-weight:600;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:.31px;color:#3b3e3f;margin-bottom:20px}section.body div.bars{display:flex;align-items:center;justify-content:space-between;margin-bottom:8px}section.body div.bars omni-progress-bar{flex-grow:1;margin:0 5px}section.body span.info{font-size:14px;font-weight:normal;font-stretch:normal;font-style:normal;line-height:normal;letter-spacing:.31px;color:#a2a9ad;text-align:center}section.body ::slotted(div[slot=buttons]){margin-top:16px;display:flex;justify-content:end}`;
var _stepInterval, _elapsedInterval;
var OmniModalProgress = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _stepInterval, void 0);
    __privateAdd(this, _elapsedInterval, void 0);
    this.activeStepIdx = 0;
    this.elapsed = 0;
    this.progress = [];
    this.isRollingToComplete = false;
    this.slottedMessageExists = false;
    this.estimatedTime = 30;
    this.steps = [];
    this.showcountdown = false;
  }
  static get styles() {
    return [...super.styles, styles21];
  }
  connectedCallback() {
    super.connectedCallback();
    this.progress = new Array(this.steps.length).fill(0);
    __privateSet(this, _elapsedInterval, setInterval(() => {
      this.elapsed = this.elapsed + 1;
      if (this.elapsed >= this.estimatedTime) {
        clearInterval(__privateGet(this, _elapsedInterval));
      }
    }, 1e3));
    this.moveToStep(0);
  }
  moveToStep(idx) {
    this.activeStepIdx = idx;
    const intervalStepPeriod = 100;
    const stepsToMake100 = this.estimatedTime * this.steps[idx].ratio * 100 * (intervalStepPeriod / 1e3);
    __privateSet(this, _stepInterval, setInterval(() => {
      this.progress[idx] += intervalStepPeriod / stepsToMake100;
      this.requestUpdate();
      if (this.progress[idx] > 100) {
        clearInterval(__privateGet(this, _stepInterval));
        if (this.steps[idx + 1]) {
          this.moveToStep(idx + 1);
        }
      }
    }, intervalStepPeriod));
  }
  async rollToComplete() {
    this.isRollingToComplete = true;
    clearInterval(__privateGet(this, _stepInterval));
    this.elapsed = this.estimatedTime - 1;
    const timeout = (timeoutMs) => new Promise((resolve) => setTimeout(resolve, timeoutMs));
    for (const idx in this.steps) {
      if (this.progress[idx] < 100) {
        this.progress[idx] = 100;
        this.requestUpdate();
        await timeout(500);
      }
    }
    clearInterval(__privateGet(this, _elapsedInterval));
  }
  render() {
    const remaining = this.estimatedTime - this.elapsed;
    const countdown = this.showcountdown ? `About ${remaining} second${remaining > 1 ? "s" : ""} remaining.` : nothing;
    const countdownPadding = this.slottedMessageExists ? "margin-top: 8px" : "margin-top: 24px";
    return html`
      <omni-style>
        <div class="modal-container">
          <section class="backdrop"></section>
          <section class="body">
            <span class="step"> ${this.steps[this.activeStepIdx].text} </span>
            <div class="bars">
              ${this.steps.map(
      (step, idx) => html` <omni-progress-bar .value=${this.progress[idx]}></omni-progress-bar> `
    )}
            </div>
            <slot name="message" @slotchange=${() => this.slottedMessageExists = true}></slot>
            <span class="info" style="${countdownPadding}">
              ${remaining > 0 ? countdown : !this.isRollingToComplete ? "This is taking longer than expected" : countdown}
            </span>
            <slot name="buttons"></slot>
          </section>
        </div>
      </omni-style>
    `;
  }
};
_stepInterval = new WeakMap();
_elapsedInterval = new WeakMap();
__decorateClass25([
  state()
], OmniModalProgress.prototype, "activeStepIdx", 2);
__decorateClass25([
  state()
], OmniModalProgress.prototype, "elapsed", 2);
__decorateClass25([
  state()
], OmniModalProgress.prototype, "progress", 2);
__decorateClass25([
  state()
], OmniModalProgress.prototype, "isRollingToComplete", 2);
__decorateClass25([
  state()
], OmniModalProgress.prototype, "slottedMessageExists", 2);
__decorateClass25([
  property({ type: Number })
], OmniModalProgress.prototype, "estimatedTime", 2);
__decorateClass25([
  property({ type: Array })
], OmniModalProgress.prototype, "steps", 2);
__decorateClass25([
  property({ type: Boolean, attribute: true })
], OmniModalProgress.prototype, "showcountdown", 2);
__decorateClass25([
  query(".body")
], OmniModalProgress.prototype, "modalBody", 2);
OmniElement.register("omni-modal-progress", OmniModalProgress);

// node_modules/dompurify/dist/purify.es.mjs
var {
  entries,
  setPrototypeOf,
  isFrozen,
  getPrototypeOf,
  getOwnPropertyDescriptor
} = Object;
var {
  freeze,
  seal,
  create
} = Object;
var {
  apply,
  construct
} = typeof Reflect !== "undefined" && Reflect;
if (!freeze) {
  freeze = function freeze2(x) {
    return x;
  };
}
if (!seal) {
  seal = function seal2(x) {
    return x;
  };
}
if (!apply) {
  apply = function apply2(fun, thisValue, args) {
    return fun.apply(thisValue, args);
  };
}
if (!construct) {
  construct = function construct2(Func, args) {
    return new Func(...args);
  };
}
var arrayForEach = unapply(Array.prototype.forEach);
var arrayPop = unapply(Array.prototype.pop);
var arrayPush = unapply(Array.prototype.push);
var stringToLowerCase = unapply(String.prototype.toLowerCase);
var stringToString = unapply(String.prototype.toString);
var stringMatch = unapply(String.prototype.match);
var stringReplace = unapply(String.prototype.replace);
var stringIndexOf = unapply(String.prototype.indexOf);
var stringTrim = unapply(String.prototype.trim);
var objectHasOwnProperty = unapply(Object.prototype.hasOwnProperty);
var regExpTest = unapply(RegExp.prototype.test);
var typeErrorCreate = unconstruct(TypeError);
function unapply(func) {
  return function(thisArg) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return apply(func, thisArg, args);
  };
}
function unconstruct(func) {
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return construct(func, args);
  };
}
function addToSet(set, array) {
  let transformCaseFunc = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : stringToLowerCase;
  if (setPrototypeOf) {
    setPrototypeOf(set, null);
  }
  let l = array.length;
  while (l--) {
    let element = array[l];
    if (typeof element === "string") {
      const lcElement = transformCaseFunc(element);
      if (lcElement !== element) {
        if (!isFrozen(array)) {
          array[l] = lcElement;
        }
        element = lcElement;
      }
    }
    set[element] = true;
  }
  return set;
}
function cleanArray(array) {
  for (let index = 0; index < array.length; index++) {
    const isPropertyExist = objectHasOwnProperty(array, index);
    if (!isPropertyExist) {
      array[index] = null;
    }
  }
  return array;
}
function clone(object) {
  const newObject = create(null);
  for (const [property2, value] of entries(object)) {
    const isPropertyExist = objectHasOwnProperty(object, property2);
    if (isPropertyExist) {
      if (Array.isArray(value)) {
        newObject[property2] = cleanArray(value);
      } else if (value && typeof value === "object" && value.constructor === Object) {
        newObject[property2] = clone(value);
      } else {
        newObject[property2] = value;
      }
    }
  }
  return newObject;
}
function lookupGetter(object, prop) {
  while (object !== null) {
    const desc = getOwnPropertyDescriptor(object, prop);
    if (desc) {
      if (desc.get) {
        return unapply(desc.get);
      }
      if (typeof desc.value === "function") {
        return unapply(desc.value);
      }
    }
    object = getPrototypeOf(object);
  }
  function fallbackValue() {
    return null;
  }
  return fallbackValue;
}
var html$1 = freeze(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
var svg$1 = freeze(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
var svgFilters = freeze(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
var svgDisallowed = freeze(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
var mathMl$1 = freeze(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]);
var mathMlDisallowed = freeze(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
var text = freeze(["#text"]);
var html3 = freeze(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]);
var svg3 = freeze(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
var mathMl = freeze(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
var xml = freeze(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
var TMPLIT_EXPR = seal(/\${[\w\W]*}/gm);
var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
var IS_ALLOWED_URI = seal(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
);
var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
var ATTR_WHITESPACE = seal(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
);
var DOCTYPE_NAME = seal(/^html$/i);
var CUSTOM_ELEMENT = seal(/^[a-z][.\w]*(-[.\w]+)+$/i);
var EXPRESSIONS = Object.freeze({
  __proto__: null,
  MUSTACHE_EXPR,
  ERB_EXPR,
  TMPLIT_EXPR,
  DATA_ATTR,
  ARIA_ATTR,
  IS_ALLOWED_URI,
  IS_SCRIPT_OR_DATA,
  ATTR_WHITESPACE,
  DOCTYPE_NAME,
  CUSTOM_ELEMENT
});
var NODE_TYPE = {
  element: 1,
  attribute: 2,
  text: 3,
  cdataSection: 4,
  entityReference: 5,
  // Deprecated
  entityNode: 6,
  // Deprecated
  progressingInstruction: 7,
  comment: 8,
  document: 9,
  documentType: 10,
  documentFragment: 11,
  notation: 12
  // Deprecated
};
var getGlobal = function getGlobal2() {
  return typeof window === "undefined" ? null : window;
};
var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, purifyHostElement) {
  if (typeof trustedTypes !== "object" || typeof trustedTypes.createPolicy !== "function") {
    return null;
  }
  let suffix = null;
  const ATTR_NAME = "data-tt-policy-suffix";
  if (purifyHostElement && purifyHostElement.hasAttribute(ATTR_NAME)) {
    suffix = purifyHostElement.getAttribute(ATTR_NAME);
  }
  const policyName = "dompurify" + (suffix ? "#" + suffix : "");
  try {
    return trustedTypes.createPolicy(policyName, {
      createHTML(html4) {
        return html4;
      },
      createScriptURL(scriptUrl) {
        return scriptUrl;
      }
    });
  } catch (_) {
    console.warn("TrustedTypes policy " + policyName + " could not be created.");
    return null;
  }
};
function createDOMPurify() {
  let window2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
  const DOMPurify = (root) => createDOMPurify(root);
  DOMPurify.version = "3.1.6";
  DOMPurify.removed = [];
  if (!window2 || !window2.document || window2.document.nodeType !== NODE_TYPE.document) {
    DOMPurify.isSupported = false;
    return DOMPurify;
  }
  let {
    document: document2
  } = window2;
  const originalDocument = document2;
  const currentScript = originalDocument.currentScript;
  const {
    DocumentFragment: DocumentFragment2,
    HTMLTemplateElement,
    Node: Node2,
    Element: Element2,
    NodeFilter: NodeFilter2,
    NamedNodeMap = window2.NamedNodeMap || window2.MozNamedAttrMap,
    HTMLFormElement: HTMLFormElement2,
    DOMParser,
    trustedTypes
  } = window2;
  const ElementPrototype = Element2.prototype;
  const cloneNode = lookupGetter(ElementPrototype, "cloneNode");
  const remove = lookupGetter(ElementPrototype, "remove");
  const getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
  const getChildNodes = lookupGetter(ElementPrototype, "childNodes");
  const getParentNode = lookupGetter(ElementPrototype, "parentNode");
  if (typeof HTMLTemplateElement === "function") {
    const template = document2.createElement("template");
    if (template.content && template.content.ownerDocument) {
      document2 = template.content.ownerDocument;
    }
  }
  let trustedTypesPolicy;
  let emptyHTML = "";
  const {
    implementation,
    createNodeIterator,
    createDocumentFragment,
    getElementsByTagName
  } = document2;
  const {
    importNode
  } = originalDocument;
  let hooks = {};
  DOMPurify.isSupported = typeof entries === "function" && typeof getParentNode === "function" && implementation && implementation.createHTMLDocument !== void 0;
  const {
    MUSTACHE_EXPR: MUSTACHE_EXPR2,
    ERB_EXPR: ERB_EXPR2,
    TMPLIT_EXPR: TMPLIT_EXPR2,
    DATA_ATTR: DATA_ATTR2,
    ARIA_ATTR: ARIA_ATTR2,
    IS_SCRIPT_OR_DATA: IS_SCRIPT_OR_DATA2,
    ATTR_WHITESPACE: ATTR_WHITESPACE2,
    CUSTOM_ELEMENT: CUSTOM_ELEMENT2
  } = EXPRESSIONS;
  let {
    IS_ALLOWED_URI: IS_ALLOWED_URI$1
  } = EXPRESSIONS;
  let ALLOWED_TAGS = null;
  const DEFAULT_ALLOWED_TAGS = addToSet({}, [...html$1, ...svg$1, ...svgFilters, ...mathMl$1, ...text]);
  let ALLOWED_ATTR = null;
  const DEFAULT_ALLOWED_ATTR = addToSet({}, [...html3, ...svg3, ...mathMl, ...xml]);
  let CUSTOM_ELEMENT_HANDLING = Object.seal(create(null, {
    tagNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    attributeNameCheck: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: true,
      configurable: false,
      enumerable: true,
      value: false
    }
  }));
  let FORBID_TAGS = null;
  let FORBID_ATTR = null;
  let ALLOW_ARIA_ATTR = true;
  let ALLOW_DATA_ATTR = true;
  let ALLOW_UNKNOWN_PROTOCOLS = false;
  let ALLOW_SELF_CLOSE_IN_ATTR = true;
  let SAFE_FOR_TEMPLATES = false;
  let SAFE_FOR_XML = true;
  let WHOLE_DOCUMENT = false;
  let SET_CONFIG = false;
  let FORCE_BODY = false;
  let RETURN_DOM = false;
  let RETURN_DOM_FRAGMENT = false;
  let RETURN_TRUSTED_TYPE = false;
  let SANITIZE_DOM = true;
  let SANITIZE_NAMED_PROPS = false;
  const SANITIZE_NAMED_PROPS_PREFIX = "user-content-";
  let KEEP_CONTENT = true;
  let IN_PLACE = false;
  let USE_PROFILES = {};
  let FORBID_CONTENTS = null;
  const DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
  let DATA_URI_TAGS = null;
  const DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
  let URI_SAFE_ATTRIBUTES = null;
  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
  const MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
  const SVG_NAMESPACE = "http://www.w3.org/2000/svg";
  const HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
  let NAMESPACE = HTML_NAMESPACE;
  let IS_EMPTY_INPUT = false;
  let ALLOWED_NAMESPACES = null;
  const DEFAULT_ALLOWED_NAMESPACES = addToSet({}, [MATHML_NAMESPACE, SVG_NAMESPACE, HTML_NAMESPACE], stringToString);
  let PARSER_MEDIA_TYPE = null;
  const SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
  const DEFAULT_PARSER_MEDIA_TYPE = "text/html";
  let transformCaseFunc = null;
  let CONFIG = null;
  const formElement = document2.createElement("form");
  const isRegexOrFunction = function isRegexOrFunction2(testValue) {
    return testValue instanceof RegExp || testValue instanceof Function;
  };
  const _parseConfig = function _parseConfig2() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (CONFIG && CONFIG === cfg) {
      return;
    }
    if (!cfg || typeof cfg !== "object") {
      cfg = {};
    }
    cfg = clone(cfg);
    PARSER_MEDIA_TYPE = // eslint-disable-next-line unicorn/prefer-includes
    SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? DEFAULT_PARSER_MEDIA_TYPE : cfg.PARSER_MEDIA_TYPE;
    transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? stringToString : stringToLowerCase;
    ALLOWED_TAGS = objectHasOwnProperty(cfg, "ALLOWED_TAGS") ? addToSet({}, cfg.ALLOWED_TAGS, transformCaseFunc) : DEFAULT_ALLOWED_TAGS;
    ALLOWED_ATTR = objectHasOwnProperty(cfg, "ALLOWED_ATTR") ? addToSet({}, cfg.ALLOWED_ATTR, transformCaseFunc) : DEFAULT_ALLOWED_ATTR;
    ALLOWED_NAMESPACES = objectHasOwnProperty(cfg, "ALLOWED_NAMESPACES") ? addToSet({}, cfg.ALLOWED_NAMESPACES, stringToString) : DEFAULT_ALLOWED_NAMESPACES;
    URI_SAFE_ATTRIBUTES = objectHasOwnProperty(cfg, "ADD_URI_SAFE_ATTR") ? addToSet(
      clone(DEFAULT_URI_SAFE_ATTRIBUTES),
      // eslint-disable-line indent
      cfg.ADD_URI_SAFE_ATTR,
      // eslint-disable-line indent
      transformCaseFunc
      // eslint-disable-line indent
    ) : DEFAULT_URI_SAFE_ATTRIBUTES;
    DATA_URI_TAGS = objectHasOwnProperty(cfg, "ADD_DATA_URI_TAGS") ? addToSet(
      clone(DEFAULT_DATA_URI_TAGS),
      // eslint-disable-line indent
      cfg.ADD_DATA_URI_TAGS,
      // eslint-disable-line indent
      transformCaseFunc
      // eslint-disable-line indent
    ) : DEFAULT_DATA_URI_TAGS;
    FORBID_CONTENTS = objectHasOwnProperty(cfg, "FORBID_CONTENTS") ? addToSet({}, cfg.FORBID_CONTENTS, transformCaseFunc) : DEFAULT_FORBID_CONTENTS;
    FORBID_TAGS = objectHasOwnProperty(cfg, "FORBID_TAGS") ? addToSet({}, cfg.FORBID_TAGS, transformCaseFunc) : {};
    FORBID_ATTR = objectHasOwnProperty(cfg, "FORBID_ATTR") ? addToSet({}, cfg.FORBID_ATTR, transformCaseFunc) : {};
    USE_PROFILES = objectHasOwnProperty(cfg, "USE_PROFILES") ? cfg.USE_PROFILES : false;
    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
    ALLOW_SELF_CLOSE_IN_ATTR = cfg.ALLOW_SELF_CLOSE_IN_ATTR !== false;
    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
    SAFE_FOR_XML = cfg.SAFE_FOR_XML !== false;
    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
    RETURN_DOM = cfg.RETURN_DOM || false;
    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
    FORCE_BODY = cfg.FORCE_BODY || false;
    SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
    SANITIZE_NAMED_PROPS = cfg.SANITIZE_NAMED_PROPS || false;
    KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
    IN_PLACE = cfg.IN_PLACE || false;
    IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;
    NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
    CUSTOM_ELEMENT_HANDLING = cfg.CUSTOM_ELEMENT_HANDLING || {};
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
      CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
    }
    if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
      CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
    }
    if (SAFE_FOR_TEMPLATES) {
      ALLOW_DATA_ATTR = false;
    }
    if (RETURN_DOM_FRAGMENT) {
      RETURN_DOM = true;
    }
    if (USE_PROFILES) {
      ALLOWED_TAGS = addToSet({}, text);
      ALLOWED_ATTR = [];
      if (USE_PROFILES.html === true) {
        addToSet(ALLOWED_TAGS, html$1);
        addToSet(ALLOWED_ATTR, html3);
      }
      if (USE_PROFILES.svg === true) {
        addToSet(ALLOWED_TAGS, svg$1);
        addToSet(ALLOWED_ATTR, svg3);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.svgFilters === true) {
        addToSet(ALLOWED_TAGS, svgFilters);
        addToSet(ALLOWED_ATTR, svg3);
        addToSet(ALLOWED_ATTR, xml);
      }
      if (USE_PROFILES.mathMl === true) {
        addToSet(ALLOWED_TAGS, mathMl$1);
        addToSet(ALLOWED_ATTR, mathMl);
        addToSet(ALLOWED_ATTR, xml);
      }
    }
    if (cfg.ADD_TAGS) {
      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
        ALLOWED_TAGS = clone(ALLOWED_TAGS);
      }
      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS, transformCaseFunc);
    }
    if (cfg.ADD_ATTR) {
      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
        ALLOWED_ATTR = clone(ALLOWED_ATTR);
      }
      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR, transformCaseFunc);
    }
    if (cfg.ADD_URI_SAFE_ATTR) {
      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR, transformCaseFunc);
    }
    if (cfg.FORBID_CONTENTS) {
      if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
        FORBID_CONTENTS = clone(FORBID_CONTENTS);
      }
      addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS, transformCaseFunc);
    }
    if (KEEP_CONTENT) {
      ALLOWED_TAGS["#text"] = true;
    }
    if (WHOLE_DOCUMENT) {
      addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
    }
    if (ALLOWED_TAGS.table) {
      addToSet(ALLOWED_TAGS, ["tbody"]);
      delete FORBID_TAGS.tbody;
    }
    if (cfg.TRUSTED_TYPES_POLICY) {
      if (typeof cfg.TRUSTED_TYPES_POLICY.createHTML !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.');
      }
      if (typeof cfg.TRUSTED_TYPES_POLICY.createScriptURL !== "function") {
        throw typeErrorCreate('TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.');
      }
      trustedTypesPolicy = cfg.TRUSTED_TYPES_POLICY;
      emptyHTML = trustedTypesPolicy.createHTML("");
    } else {
      if (trustedTypesPolicy === void 0) {
        trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, currentScript);
      }
      if (trustedTypesPolicy !== null && typeof emptyHTML === "string") {
        emptyHTML = trustedTypesPolicy.createHTML("");
      }
    }
    if (freeze) {
      freeze(cfg);
    }
    CONFIG = cfg;
  };
  const MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
  const HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "annotation-xml"]);
  const COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
  const ALL_SVG_TAGS = addToSet({}, [...svg$1, ...svgFilters, ...svgDisallowed]);
  const ALL_MATHML_TAGS = addToSet({}, [...mathMl$1, ...mathMlDisallowed]);
  const _checkValidNamespace = function _checkValidNamespace2(element) {
    let parent = getParentNode(element);
    if (!parent || !parent.tagName) {
      parent = {
        namespaceURI: NAMESPACE,
        tagName: "template"
      };
    }
    const tagName = stringToLowerCase(element.tagName);
    const parentTagName = stringToLowerCase(parent.tagName);
    if (!ALLOWED_NAMESPACES[element.namespaceURI]) {
      return false;
    }
    if (element.namespaceURI === SVG_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "svg";
      }
      if (parent.namespaceURI === MATHML_NAMESPACE) {
        return tagName === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
      }
      return Boolean(ALL_SVG_TAGS[tagName]);
    }
    if (element.namespaceURI === MATHML_NAMESPACE) {
      if (parent.namespaceURI === HTML_NAMESPACE) {
        return tagName === "math";
      }
      if (parent.namespaceURI === SVG_NAMESPACE) {
        return tagName === "math" && HTML_INTEGRATION_POINTS[parentTagName];
      }
      return Boolean(ALL_MATHML_TAGS[tagName]);
    }
    if (element.namespaceURI === HTML_NAMESPACE) {
      if (parent.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      if (parent.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
        return false;
      }
      return !ALL_MATHML_TAGS[tagName] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName] || !ALL_SVG_TAGS[tagName]);
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && ALLOWED_NAMESPACES[element.namespaceURI]) {
      return true;
    }
    return false;
  };
  const _forceRemove = function _forceRemove2(node) {
    arrayPush(DOMPurify.removed, {
      element: node
    });
    try {
      getParentNode(node).removeChild(node);
    } catch (_) {
      remove(node);
    }
  };
  const _removeAttribute = function _removeAttribute2(name, node) {
    try {
      arrayPush(DOMPurify.removed, {
        attribute: node.getAttributeNode(name),
        from: node
      });
    } catch (_) {
      arrayPush(DOMPurify.removed, {
        attribute: null,
        from: node
      });
    }
    node.removeAttribute(name);
    if (name === "is" && !ALLOWED_ATTR[name]) {
      if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
        try {
          _forceRemove(node);
        } catch (_) {
        }
      } else {
        try {
          node.setAttribute(name, "");
        } catch (_) {
        }
      }
    }
  };
  const _initDocument = function _initDocument2(dirty) {
    let doc = null;
    let leadingWhitespace = null;
    if (FORCE_BODY) {
      dirty = "<remove></remove>" + dirty;
    } else {
      const matches = stringMatch(dirty, /^[\r\n\t ]+/);
      leadingWhitespace = matches && matches[0];
    }
    if (PARSER_MEDIA_TYPE === "application/xhtml+xml" && NAMESPACE === HTML_NAMESPACE) {
      dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
    }
    const dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
    if (NAMESPACE === HTML_NAMESPACE) {
      try {
        doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
      } catch (_) {
      }
    }
    if (!doc || !doc.documentElement) {
      doc = implementation.createDocument(NAMESPACE, "template", null);
      try {
        doc.documentElement.innerHTML = IS_EMPTY_INPUT ? emptyHTML : dirtyPayload;
      } catch (_) {
      }
    }
    const body = doc.body || doc.documentElement;
    if (dirty && leadingWhitespace) {
      body.insertBefore(document2.createTextNode(leadingWhitespace), body.childNodes[0] || null);
    }
    if (NAMESPACE === HTML_NAMESPACE) {
      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
    }
    return WHOLE_DOCUMENT ? doc.documentElement : body;
  };
  const _createNodeIterator = function _createNodeIterator2(root) {
    return createNodeIterator.call(
      root.ownerDocument || root,
      root,
      // eslint-disable-next-line no-bitwise
      NodeFilter2.SHOW_ELEMENT | NodeFilter2.SHOW_COMMENT | NodeFilter2.SHOW_TEXT | NodeFilter2.SHOW_PROCESSING_INSTRUCTION | NodeFilter2.SHOW_CDATA_SECTION,
      null
    );
  };
  const _isClobbered = function _isClobbered2(elm) {
    return elm instanceof HTMLFormElement2 && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function" || typeof elm.hasChildNodes !== "function");
  };
  const _isNode = function _isNode2(object) {
    return typeof Node2 === "function" && object instanceof Node2;
  };
  const _executeHook = function _executeHook2(entryPoint, currentNode, data) {
    if (!hooks[entryPoint]) {
      return;
    }
    arrayForEach(hooks[entryPoint], (hook) => {
      hook.call(DOMPurify, currentNode, data, CONFIG);
    });
  };
  const _sanitizeElements = function _sanitizeElements2(currentNode) {
    let content = null;
    _executeHook("beforeSanitizeElements", currentNode, null);
    if (_isClobbered(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    const tagName = transformCaseFunc(currentNode.nodeName);
    _executeHook("uponSanitizeElement", currentNode, {
      tagName,
      allowedTags: ALLOWED_TAGS
    });
    if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode.nodeType === NODE_TYPE.progressingInstruction) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_XML && currentNode.nodeType === NODE_TYPE.comment && regExpTest(/<[/\w]/g, currentNode.data)) {
      _forceRemove(currentNode);
      return true;
    }
    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
      if (!FORBID_TAGS[tagName] && _isBasicCustomElement(tagName)) {
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName)) {
          return false;
        }
        if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName)) {
          return false;
        }
      }
      if (KEEP_CONTENT && !FORBID_CONTENTS[tagName]) {
        const parentNode = getParentNode(currentNode) || currentNode.parentNode;
        const childNodes = getChildNodes(currentNode) || currentNode.childNodes;
        if (childNodes && parentNode) {
          const childCount = childNodes.length;
          for (let i = childCount - 1; i >= 0; --i) {
            const childClone = cloneNode(childNodes[i], true);
            childClone.__removalCount = (currentNode.__removalCount || 0) + 1;
            parentNode.insertBefore(childClone, getNextSibling(currentNode));
          }
        }
      }
      _forceRemove(currentNode);
      return true;
    }
    if (currentNode instanceof Element2 && !_checkValidNamespace(currentNode)) {
      _forceRemove(currentNode);
      return true;
    }
    if ((tagName === "noscript" || tagName === "noembed" || tagName === "noframes") && regExpTest(/<\/no(script|embed|frames)/i, currentNode.innerHTML)) {
      _forceRemove(currentNode);
      return true;
    }
    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === NODE_TYPE.text) {
      content = currentNode.textContent;
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        content = stringReplace(content, expr, " ");
      });
      if (currentNode.textContent !== content) {
        arrayPush(DOMPurify.removed, {
          element: currentNode.cloneNode()
        });
        currentNode.textContent = content;
      }
    }
    _executeHook("afterSanitizeElements", currentNode, null);
    return false;
  };
  const _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value) {
    if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value in document2 || value in formElement)) {
      return false;
    }
    if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR2, lcName))
      ;
    else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR2, lcName))
      ;
    else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
      if (
        // First condition does a very basic check if a) it's basically a valid custom element tagname AND
        // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
        _isBasicCustomElement(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || // Alternative, second condition checks if it's an `is`-attribute, AND
        // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
        lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value))
      )
        ;
      else {
        return false;
      }
    } else if (URI_SAFE_ATTRIBUTES[lcName])
      ;
    else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value, "data:") === 0 && DATA_URI_TAGS[lcTag])
      ;
    else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA2, stringReplace(value, ATTR_WHITESPACE2, "")))
      ;
    else if (value) {
      return false;
    } else
      ;
    return true;
  };
  const _isBasicCustomElement = function _isBasicCustomElement2(tagName) {
    return tagName !== "annotation-xml" && stringMatch(tagName, CUSTOM_ELEMENT2);
  };
  const _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
    _executeHook("beforeSanitizeAttributes", currentNode, null);
    const {
      attributes
    } = currentNode;
    if (!attributes) {
      return;
    }
    const hookEvent = {
      attrName: "",
      attrValue: "",
      keepAttr: true,
      allowedAttributes: ALLOWED_ATTR
    };
    let l = attributes.length;
    while (l--) {
      const attr = attributes[l];
      const {
        name,
        namespaceURI,
        value: attrValue
      } = attr;
      const lcName = transformCaseFunc(name);
      let value = name === "value" ? attrValue : stringTrim(attrValue);
      hookEvent.attrName = lcName;
      hookEvent.attrValue = value;
      hookEvent.keepAttr = true;
      hookEvent.forceKeepAttr = void 0;
      _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
      value = hookEvent.attrValue;
      if (SAFE_FOR_XML && regExpTest(/((--!?|])>)|<\/(style|title)/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (hookEvent.forceKeepAttr) {
        continue;
      }
      _removeAttribute(name, currentNode);
      if (!hookEvent.keepAttr) {
        continue;
      }
      if (!ALLOW_SELF_CLOSE_IN_ATTR && regExpTest(/\/>/i, value)) {
        _removeAttribute(name, currentNode);
        continue;
      }
      if (SAFE_FOR_TEMPLATES) {
        arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
          value = stringReplace(value, expr, " ");
        });
      }
      const lcTag = transformCaseFunc(currentNode.nodeName);
      if (!_isValidAttribute(lcTag, lcName, value)) {
        continue;
      }
      if (SANITIZE_NAMED_PROPS && (lcName === "id" || lcName === "name")) {
        _removeAttribute(name, currentNode);
        value = SANITIZE_NAMED_PROPS_PREFIX + value;
      }
      if (trustedTypesPolicy && typeof trustedTypes === "object" && typeof trustedTypes.getAttributeType === "function") {
        if (namespaceURI)
          ;
        else {
          switch (trustedTypes.getAttributeType(lcTag, lcName)) {
            case "TrustedHTML": {
              value = trustedTypesPolicy.createHTML(value);
              break;
            }
            case "TrustedScriptURL": {
              value = trustedTypesPolicy.createScriptURL(value);
              break;
            }
          }
        }
      }
      try {
        if (namespaceURI) {
          currentNode.setAttributeNS(namespaceURI, name, value);
        } else {
          currentNode.setAttribute(name, value);
        }
        if (_isClobbered(currentNode)) {
          _forceRemove(currentNode);
        } else {
          arrayPop(DOMPurify.removed);
        }
      } catch (_) {
      }
    }
    _executeHook("afterSanitizeAttributes", currentNode, null);
  };
  const _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment) {
    let shadowNode = null;
    const shadowIterator = _createNodeIterator(fragment);
    _executeHook("beforeSanitizeShadowDOM", fragment, null);
    while (shadowNode = shadowIterator.nextNode()) {
      _executeHook("uponSanitizeShadowNode", shadowNode, null);
      if (_sanitizeElements(shadowNode)) {
        continue;
      }
      if (shadowNode.content instanceof DocumentFragment2) {
        _sanitizeShadowDOM2(shadowNode.content);
      }
      _sanitizeAttributes(shadowNode);
    }
    _executeHook("afterSanitizeShadowDOM", fragment, null);
  };
  DOMPurify.sanitize = function(dirty) {
    let cfg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let body = null;
    let importedNode = null;
    let currentNode = null;
    let returnNode = null;
    IS_EMPTY_INPUT = !dirty;
    if (IS_EMPTY_INPUT) {
      dirty = "<!-->";
    }
    if (typeof dirty !== "string" && !_isNode(dirty)) {
      if (typeof dirty.toString === "function") {
        dirty = dirty.toString();
        if (typeof dirty !== "string") {
          throw typeErrorCreate("dirty is not a string, aborting");
        }
      } else {
        throw typeErrorCreate("toString is not a function");
      }
    }
    if (!DOMPurify.isSupported) {
      return dirty;
    }
    if (!SET_CONFIG) {
      _parseConfig(cfg);
    }
    DOMPurify.removed = [];
    if (typeof dirty === "string") {
      IN_PLACE = false;
    }
    if (IN_PLACE) {
      if (dirty.nodeName) {
        const tagName = transformCaseFunc(dirty.nodeName);
        if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {
          throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
        }
      }
    } else if (dirty instanceof Node2) {
      body = _initDocument("<!---->");
      importedNode = body.ownerDocument.importNode(dirty, true);
      if (importedNode.nodeType === NODE_TYPE.element && importedNode.nodeName === "BODY") {
        body = importedNode;
      } else if (importedNode.nodeName === "HTML") {
        body = importedNode;
      } else {
        body.appendChild(importedNode);
      }
    } else {
      if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && // eslint-disable-next-line unicorn/prefer-includes
      dirty.indexOf("<") === -1) {
        return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
      }
      body = _initDocument(dirty);
      if (!body) {
        return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
      }
    }
    if (body && FORCE_BODY) {
      _forceRemove(body.firstChild);
    }
    const nodeIterator = _createNodeIterator(IN_PLACE ? dirty : body);
    while (currentNode = nodeIterator.nextNode()) {
      if (_sanitizeElements(currentNode)) {
        continue;
      }
      if (currentNode.content instanceof DocumentFragment2) {
        _sanitizeShadowDOM(currentNode.content);
      }
      _sanitizeAttributes(currentNode);
    }
    if (IN_PLACE) {
      return dirty;
    }
    if (RETURN_DOM) {
      if (RETURN_DOM_FRAGMENT) {
        returnNode = createDocumentFragment.call(body.ownerDocument);
        while (body.firstChild) {
          returnNode.appendChild(body.firstChild);
        }
      } else {
        returnNode = body;
      }
      if (ALLOWED_ATTR.shadowroot || ALLOWED_ATTR.shadowrootmode) {
        returnNode = importNode.call(originalDocument, returnNode, true);
      }
      return returnNode;
    }
    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;
    if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body.ownerDocument && body.ownerDocument.doctype && body.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body.ownerDocument.doctype.name)) {
      serializedHTML = "<!DOCTYPE " + body.ownerDocument.doctype.name + ">\n" + serializedHTML;
    }
    if (SAFE_FOR_TEMPLATES) {
      arrayForEach([MUSTACHE_EXPR2, ERB_EXPR2, TMPLIT_EXPR2], (expr) => {
        serializedHTML = stringReplace(serializedHTML, expr, " ");
      });
    }
    return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
  };
  DOMPurify.setConfig = function() {
    let cfg = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    _parseConfig(cfg);
    SET_CONFIG = true;
  };
  DOMPurify.clearConfig = function() {
    CONFIG = null;
    SET_CONFIG = false;
  };
  DOMPurify.isValidAttribute = function(tag, attr, value) {
    if (!CONFIG) {
      _parseConfig({});
    }
    const lcTag = transformCaseFunc(tag);
    const lcName = transformCaseFunc(attr);
    return _isValidAttribute(lcTag, lcName, value);
  };
  DOMPurify.addHook = function(entryPoint, hookFunction) {
    if (typeof hookFunction !== "function") {
      return;
    }
    hooks[entryPoint] = hooks[entryPoint] || [];
    arrayPush(hooks[entryPoint], hookFunction);
  };
  DOMPurify.removeHook = function(entryPoint) {
    if (hooks[entryPoint]) {
      return arrayPop(hooks[entryPoint]);
    }
  };
  DOMPurify.removeHooks = function(entryPoint) {
    if (hooks[entryPoint]) {
      hooks[entryPoint] = [];
    }
  };
  DOMPurify.removeAllHooks = function() {
    hooks = {};
  };
  return DOMPurify;
}
var purify = createDOMPurify();

// node_modules/omni-ui/dist/component/omni-media-embed/omni-media-embed.js
var __defProp26 = Object.defineProperty;
var __getOwnPropDesc26 = Object.getOwnPropertyDescriptor;
var __decorateClass26 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc26(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp26(target, key, result);
  return result;
};
var styles22 = css`:host{--aspect-ratio: 16/9}iframe,.skeleton{aspect-ratio:var(--aspect-ratio);max-height:100%}.skeleton{width:100%}`;
var _fetchEmbed, fetchEmbed_fn;
var OmniMediaEmbed = class extends OmniElement {
  constructor() {
    super(...arguments);
    __privateAdd(this, _fetchEmbed);
    this._loading = true;
    this._noContent = false;
  }
  static get styles() {
    return [...super.styles, styles22];
  }
  willUpdate(changed) {
    if (changed.has("src")) {
      if (this.src.includes("youtube") || this.src.includes("youtu.be")) {
        this._loading = true;
        __privateMethod(this, _fetchEmbed, fetchEmbed_fn).call(this, "https://www.youtube.com/oembed", "_youtube");
        return;
      }
      if (this.src.includes("vimeo")) {
        this._loading = true;
        __privateMethod(this, _fetchEmbed, fetchEmbed_fn).call(this, "https://vimeo.com/api/oembed.json", "_vimeo");
        return;
      }
      if (this.src.includes("spotify")) {
        this._loading = true;
        __privateMethod(this, _fetchEmbed, fetchEmbed_fn).call(this, "https://open.spotify.com/oembed", "_spotify", false);
        return;
      }
      if (this.src.includes("soundcloud")) {
        this._loading = true;
        __privateMethod(this, _fetchEmbed, fetchEmbed_fn).call(this, "https://soundcloud.com/oembed", "_soundcloud");
        return;
      }
      this._noContent = true;
    }
  }
  render() {
    if (this._noContent)
      return nothing;
    return !this._loading ? this[this._mediaType] ?? nothing : html`<omni-style><div class="skeleton"></div></omni-style>`;
  }
};
_fetchEmbed = new WeakSet();
fetchEmbed_fn = function(oembedUrl, mediaType, replaceHeight = true) {
  fetch(`${oembedUrl}?url=${encodeURIComponent(this.src)}`).then((resp) => resp.json()).then((resp) => {
    let snippet = resp.html.replace(/width="\d+"/, 'width="100%"');
    if (replaceHeight) {
      snippet = snippet.replace(/height="\d+"/, "");
    }
    const cleanSnippet = purify.sanitize(snippet, {
      ADD_TAGS: ["iframe"],
      ADD_ATTR: ["allow", "allowfullscreen", "frameborder", "scrolling"]
    });
    this[mediaType] = html`${unsafeHTML(cleanSnippet)}`;
    this._mediaType = mediaType;
    this._loading = false;
  }).catch(() => {
    this[mediaType] = nothing;
    this._mediaType = mediaType;
    this._loading = false;
  });
};
__decorateClass26([
  state()
], OmniMediaEmbed.prototype, "_mediaType", 2);
__decorateClass26([
  state()
], OmniMediaEmbed.prototype, "_loading", 2);
__decorateClass26([
  state()
], OmniMediaEmbed.prototype, "_noContent", 2);
__decorateClass26([
  property({ type: String })
], OmniMediaEmbed.prototype, "src", 2);
OmniElement.register("omni-media-embed", OmniMediaEmbed);

// node_modules/omni-ui/dist/component/omni-radio/omni-radio.js
var __defProp27 = Object.defineProperty;
var __getOwnPropDesc27 = Object.getOwnPropertyDescriptor;
var __decorateClass27 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc27(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp27(target, key, result);
  return result;
};
var styles23 = css`:host{--radio-height-width: 1.2857142857rem;--radio-border-width: calc(var(--radio-height-width) / 9);--radio-background: var(--color-almost-black);--radio-background-hover: var(--color-primary);--radio-background-error: var(--color-error);--radio-font-color: var(--color-almost-black);display:flex;flex-direction:column;color:var(--radio-font-color)}:host([haslabel]){--radio-height-width: 0.8571428571rem}:host([dark]){--radio-background: var(--color-white);--radio-background-hover: var(--color-white)}:host([haslabel][dark]) ::slotted(*){color:var(--color-white) !important;opacity:.78}:host(:not([disabled]):hover),:host(:not([disabled]):active),:host(:not([disabled])[hover]){opacity:.75;outline:none;cursor:pointer}:host(:not([disabled]):hover) .radio,:host(:not([disabled]):active) .radio,:host(:not([disabled])[hover]) .radio{border:var(--radio-border-width) solid var(--radio-background-hover)}:host(:not([disabled]):hover) .radio.error,:host(:not([disabled]):active) .radio.error,:host(:not([disabled])[hover]) .radio.error{border:var(--radio-border-width) solid var(--color-error)}:host(:not([disabled]):hover) ::slotted(*){opacity:.75;cursor:pointer}::slotted(*){margin-left:.5714285714rem !important;line-height:1.4285714286rem !important}:host([disabled]:hover),:host([disabled]){cursor:not-allowed;opacity:.5}.container{display:flex;justify-content:flex-start;align-items:center}.radio{box-sizing:border-box;width:var(--radio-height-width);height:var(--radio-height-width);border:var(--radio-border-width) solid var(--radio-background);border-radius:50%;display:flex;justify-content:center;align-items:center}.radio .radio-inner-circle{background:var(--radio-background);border-radius:50%;width:calc(var(--radio-height-width)/2);height:calc(var(--radio-height-width)/2)}.radio.checked{border:var(--radio-border-width) solid var(--radio-background-hover)}.radio.checked .radio-inner-circle{background:var(--radio-background-hover)}.radio.error{border:var(--radio-border-width) solid var(--color-error)}.radio.checked.error{border:var(--radio-border-width) solid var(--color-error)}.radio.checked.error .radio-inner-circle{background:var(--radio-background-error)}.radio.disabled{border:var(--radio-border-width) solid var(--color-shark)}.radio.checked.disabled{border:var(--radio-border-width) solid var(--color-shark)}.radio.checked.disabled .radio-inner-circle{background:var(--color-shark)}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.help-text{justify-content:flex-end;align-items:center}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}`;
var _determineValidityAndValue2, determineValidityAndValue_fn2, _toggle2, _footerTemplate3, footerTemplate_get3;
var OmniRadio = class extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    __privateAdd(this, _determineValidityAndValue2);
    __privateAdd(this, _footerTemplate3);
    __privateAdd(this, _toggle2, void 0);
    this.valueMissingMessage = "Please check this radio button if you want to proceed.";
    this.checked = false;
    this.showfooter = false;
    this._handleKeyup = (e) => {
      if (e.key === "Enter") {
        __privateGet(this, _toggle2).call(this);
      }
      if (e.key === "Escape") {
        this.blur();
      }
    };
    __privateSet(this, _toggle2, (e = null, toggleTo = !this.checked) => {
      if (this.disabled)
        return;
      this.checked = toggleTo;
      __privateMethod(this, _determineValidityAndValue2, determineValidityAndValue_fn2).call(this);
      this.dispatchNewEvent("change", { detail: this.checked });
    });
  }
  static get styles() {
    return [...super.styles, styles23];
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", __privateGet(this, _toggle2));
    this.addEventListener("keyup", this._handleKeyup);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", __privateGet(this, _toggle2));
    this.removeEventListener("keyup", this._handleKeyup);
  }
  async firstUpdated() {
    await this.updateComplete;
    __privateMethod(this, _determineValidityAndValue2, determineValidityAndValue_fn2).call(this);
  }
  updated() {
    if (this.slottedElements.length || this._internals.labels.length) {
      this.setAttribute("haslabel", "");
    } else {
      this.removeAttribute("haslabel");
    }
  }
  toggle() {
    __privateGet(this, _toggle2).call(this);
  }
  check() {
    __privateGet(this, _toggle2).call(this, null, true);
  }
  uncheck() {
    __privateGet(this, _toggle2).call(this, null, false);
  }
  render() {
    const innerRadioButtonError = typeof this.error !== "undefined" && this.error !== null;
    const classes = classMap({
      checked: this.checked,
      error: innerRadioButtonError,
      radio: true,
      disabled: this.disabled
    });
    return html`
      <div class="container" part="container">
        <div class=${classes} part="radio">
          ${this.checked ? html`<div class="radio-inner-circle"></div>` : nothing}
        </div>
        <slot></slot>
      </div>
      ${__privateGet(this, _footerTemplate3, footerTemplate_get3)}
    `;
  }
};
_determineValidityAndValue2 = new WeakSet();
determineValidityAndValue_fn2 = function() {
  this._internals.setValidity({});
  switch (this.checked) {
    case true:
      if (!this.value) {
        this.value = "on";
      }
      if (this.required) {
        this._internals.setValidity({});
        this._internals.setFormValue(this.value);
      } else {
        this._internals.setFormValue(this.value);
      }
      break;
    case false:
    default:
      if (this.required) {
        this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.radioEl);
        this._internals.setFormValue("");
      } else {
        this._internals.setFormValue(null);
      }
      break;
  }
};
_toggle2 = new WeakMap();
_footerTemplate3 = new WeakSet();
footerTemplate_get3 = function() {
  if (!this.showfooter)
    return nothing;
  const footerSpacer = html`<div class="footer-spacer"></div>`;
  if (!this.error)
    return footerSpacer;
  if (this.error) {
    return html` <div class="footer-container error-text">
        <omni-icon icon-id="omni:informative:error"></omni-icon>
        <span>${this.error}</span>
      </div>`;
  }
};
__decorateClass27([
  property({ type: String })
], OmniRadio.prototype, "valueMissingMessage", 2);
__decorateClass27([
  property({ type: Boolean, reflect: true })
], OmniRadio.prototype, "checked", 2);
__decorateClass27([
  property({ type: String, reflect: true })
], OmniRadio.prototype, "error", 2);
__decorateClass27([
  property({ type: String, reflect: true })
], OmniRadio.prototype, "name", 2);
__decorateClass27([
  property({ type: String, reflect: true })
], OmniRadio.prototype, "value", 2);
__decorateClass27([
  property({ type: Boolean, reflect: true })
], OmniRadio.prototype, "showfooter", 2);
__decorateClass27([
  query(".radio")
], OmniRadio.prototype, "radioEl", 2);
__decorateClass27([
  queryAssignedElements()
], OmniRadio.prototype, "slottedElements", 2);
OmniElement.register("omni-radio", OmniRadio);

// node_modules/omni-ui/dist/component/omni-radio-group/omni-radio-group.js
var __defProp28 = Object.defineProperty;
var __getOwnPropDesc28 = Object.getOwnPropertyDescriptor;
var __decorateClass28 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc28(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp28(target, key, result);
  return result;
};
OmniRadio.register();
var _handleChange, handleChange_fn, _handleSlotChange, handleSlotChange_fn, _determineValidityAndValue3, determineValidityAndValue_fn3;
var OmniRadioGroup = class extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    __privateAdd(this, _handleChange);
    __privateAdd(this, _handleSlotChange);
    __privateAdd(this, _determineValidityAndValue3);
    this.valueMissingMessage = "Please select a radio if you want to proceed.";
    this.radios = [];
  }
  static get styles() {
    return [...super.styles];
  }
  render() {
    return html` <slot @change=${__privateMethod(this, _handleChange, handleChange_fn)} @slotchange=${__privateMethod(this, _handleSlotChange, handleSlotChange_fn)}></slot> `;
  }
};
_handleChange = new WeakSet();
handleChange_fn = function(e) {
  const theChangedRadio = e.target;
  if (!theChangedRadio.checked) {
    theChangedRadio.checked = true;
    e.stopPropagation();
    this.dispatchNewEvent("change", { detail: true }, theChangedRadio);
    return;
  }
  this.radios.forEach((oneRadio) => {
    if (oneRadio !== theChangedRadio) {
      oneRadio.checked = false;
    }
  });
  this.value = theChangedRadio.value;
  __privateMethod(this, _determineValidityAndValue3, determineValidityAndValue_fn3).call(this);
};
_handleSlotChange = new WeakSet();
handleSlotChange_fn = function(e) {
  this.radios = e.target.assignedElements();
  this.radios.forEach((oneRadio) => {
    if (oneRadio.value === this.value) {
      oneRadio.checked = true;
    }
  });
  if (!this.radios.length) {
    throw new Error("omni-radio-group must have at least one omni-radio");
  }
  __privateMethod(this, _determineValidityAndValue3, determineValidityAndValue_fn3).call(this);
};
_determineValidityAndValue3 = new WeakSet();
determineValidityAndValue_fn3 = function() {
  this._internals.setValidity({});
  if (!this.value && this.required) {
    this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage);
  }
  this._internals.setFormValue(this.value);
};
__decorateClass28([
  property({ type: String })
], OmniRadioGroup.prototype, "valueMissingMessage", 2);
__decorateClass28([
  property({ type: String, reflect: true })
], OmniRadioGroup.prototype, "name", 2);
__decorateClass28([
  property({ type: String, reflect: true })
], OmniRadioGroup.prototype, "value", 2);
__decorateClass28([
  state()
], OmniRadioGroup.prototype, "radios", 2);
OmniElement.register("omni-radio-group", OmniRadioGroup);

// node_modules/omni-ui/dist/component/omni-range-slider/omni-range-slider.js
var __defProp29 = Object.defineProperty;
var __getOwnPropDesc29 = Object.getOwnPropertyDescriptor;
var __decorateClass29 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc29(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp29(target, key, result);
  return result;
};
var styles24 = css`:host{--range-slider-background: var(--gradient-primary);--range-slider-thumb-border: var(--color-secondary);display:flex;flex-direction:column}:host(:focus-visible){outline:var(--color-secondary) solid 1px}:host([disabled]){--cursor-state: not-allowed;--pointer-state: none;opacity:.45;cursor:not-allowed}[slider]{position:relative;border-radius:0.7142857143rem;text-align:left;padding:0 0.5714285714rem}[slider] #sign-container{display:flex;justify-content:space-between;align-items:center;padding:0;margin:0 -0.5714285714rem}[slider] #sign-container div{display:flex}[slider] #sign-container div[sign]{color:var(--color-almost-black);width:1.4285714286rem;border-radius:0.2857142857rem;align-items:center;justify-content:center;text-align:center;background-color:var(--color-white);margin-bottom:0.7142857143rem}[slider] #sign-container div[sign] span{font-size:0.8571428571rem}[slider] .slider-container{pointer-events:var(--pointer-state, all);position:relative;display:flex;justify-content:flex-start;align-items:center;padding:0 0 0.2857142857rem 0}[slider] .slider-container [left-track],[slider] .slider-container [right-track]{height:0.5714285714rem;border-radius:0.2857142857rem;border:1px solid var(--color-pale-grey-three);background:var(--color-white)}[slider] .slider-container [middle-track]{height:0.5714285714rem;background:var(--range-slider-background)}[slider] .slider-container [thumb]{position:absolute;top:-0.25rem;height:1.1428571429rem;width:1.1428571429rem;text-align:left;background:var(--range-slider-background);border-radius:50%;border:var(--range-slider-thumb-border) solid 1px}[slider] .slider-container [thumb]:active:not([disabled]){cursor:var(--cursor-state, grabbing)}[slider] .slider-container [thumb]:hover:not(:active,[disabled]){cursor:var(--cursor-state, grab)}[slider] .slider-container [thumb]:focus{outline:var(--range-slider-thumb-border) solid 1px}[slider] .slider-container [thumb][disabled]{cursor:not-allowed}`;
var _resizeObserver, _originalBodyStyle2, _whichActiveThumb, _formatter, _isValidChange, isValidChange_fn, _emitChange2, emitChange_fn2, _calcPositions, calcPositions_fn, _positionElements, positionElements_fn, _handleKeydown, handleKeydown_fn, _blur, _handleMousemove, _handleMousedown, _handleMouseup, _stepDownMin, stepDownMin_fn, _stepUpMin, stepUpMin_fn, _stepUpMax, stepUpMax_fn, _stepDownMax, stepDownMax_fn;
var OmniRangeSlider = class extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    __privateAdd(this, _isValidChange);
    __privateAdd(this, _emitChange2);
    /** returns the fromLeft and fromRight as percentages */
    __privateAdd(this, _calcPositions);
    /**  calculates and updates the properties to position the bars and thumbs */
    __privateAdd(this, _positionElements);
    /** if a thumb is DOM focused, this increments the focused thumb up or down based on the left or right arrow keys  */
    __privateAdd(this, _handleKeydown);
    __privateAdd(this, _stepDownMin);
    __privateAdd(this, _stepUpMin);
    __privateAdd(this, _stepUpMax);
    __privateAdd(this, _stepDownMax);
    __privateAdd(this, _resizeObserver, void 0);
    __privateAdd(this, _originalBodyStyle2, void 0);
    __privateAdd(this, _whichActiveThumb, void 0);
    __privateAdd(this, _formatter, void 0);
    __privateAdd(this, _blur, void 0);
    __privateAdd(this, _handleMousemove, void 0);
    __privateAdd(this, _handleMousedown, void 0);
    __privateAdd(this, _handleMouseup, void 0);
    __privateSet(this, _resizeObserver, new ResizeObserver(
      (entries2) => __privateMethod(this, _positionElements, positionElements_fn).call(this, entries2[0].contentRect)
    ));
    __privateSet(this, _originalBodyStyle2, "");
    this.min = 0;
    this.max = 100;
    this.step = 1;
    this.valueMissingMessage = "Please select a range";
    this.numberFormatOptions = {
      locale: "en-US",
      options: {}
    };
    this.value = {
      min: 0,
      max: 100
    };
    __privateSet(this, _blur, () => {
      this.blur();
      this.leftThumbEl.blur();
      this.rightThumbEl.blur();
    });
    __privateSet(this, _handleMousemove, (e) => {
      const hostRect = this.getBoundingClientRect();
      if (__privateGet(this, _whichActiveThumb) === "min") {
        const moveDiff = e.clientX - hostRect.left;
        const decimal = moveDiff / this.clientWidth;
        const value = decimal * (this.max - this.min) + this.min;
        const roundedValue = Number((Math.round(value / this.step) * this.step).toFixed(2));
        if (!__privateMethod(this, _isValidChange, isValidChange_fn).call(this, roundedValue))
          return;
        this.value.min = roundedValue;
      } else {
        const moveDiff = hostRect.right - e.clientX;
        const decimal = moveDiff / this.clientWidth;
        const value = this.max - decimal * (this.max - this.min);
        const roundedValue = Number((Math.round(value / this.step) * this.step).toFixed(2));
        if (!__privateMethod(this, _isValidChange, isValidChange_fn).call(this, roundedValue))
          return;
        this.value.max = roundedValue;
      }
      __privateMethod(this, _positionElements, positionElements_fn).call(this, hostRect);
    });
    __privateSet(this, _handleMousedown, (e) => {
      __privateSet(this, _whichActiveThumb, e.target.hasAttribute("left") ? "min" : "max");
      __privateSet(this, _originalBodyStyle2, document.body.style.cssText);
      document.body.style.cursor = "grabbing";
      document.body.style.userSelect = "none";
      document.body.style["-webkit-user-select"] = "none";
      document.addEventListener("mousemove", __privateGet(this, _handleMousemove));
      document.addEventListener("mouseup", __privateGet(this, _handleMouseup));
    });
    __privateSet(this, _handleMouseup, () => {
      document.removeEventListener("mousemove", __privateGet(this, _handleMousemove));
      document.removeEventListener("mouseup", __privateGet(this, _handleMouseup));
      document.body.style.cssText = __privateGet(this, _originalBodyStyle2);
      __privateMethod(this, _emitChange2, emitChange_fn2).call(this);
    });
  }
  static get styles() {
    return [...super.styles, styles24];
  }
  connectedCallback() {
    super.connectedCallback();
    __privateGet(this, _resizeObserver).observe(this);
    __privateSet(this, _formatter, new Intl.NumberFormat(this.numberFormatOptions.locale, this.numberFormatOptions.options));
  }
  async firstUpdated() {
    await this.updateComplete;
    if (this.required) {
      this._internals.setFormValue(JSON.stringify(this.value));
      if (!this.value) {
        this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.containerEl);
      }
    }
    __privateMethod(this, _positionElements, positionElements_fn).call(this, this.getBoundingClientRect());
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    __privateGet(this, _resizeObserver).unobserve(this);
  }
  /** programmatically step up one step */
  stepUp(thumb) {
    __privateSet(this, _whichActiveThumb, thumb);
    if (__privateGet(this, _whichActiveThumb) === "min") {
      __privateMethod(this, _stepUpMin, stepUpMin_fn).call(this);
    } else {
      __privateMethod(this, _stepUpMax, stepUpMax_fn).call(this);
    }
    __privateMethod(this, _positionElements, positionElements_fn).call(this, this.getBoundingClientRect());
    __privateMethod(this, _emitChange2, emitChange_fn2).call(this);
  }
  /** programmatically step down one step */
  stepDown(thumb) {
    __privateSet(this, _whichActiveThumb, thumb);
    if (__privateGet(this, _whichActiveThumb) === "min") {
      __privateMethod(this, _stepDownMin, stepDownMin_fn).call(this);
    } else {
      __privateMethod(this, _stepDownMax, stepDownMax_fn).call(this);
    }
    __privateMethod(this, _positionElements, positionElements_fn).call(this, this.getBoundingClientRect());
    __privateMethod(this, _emitChange2, emitChange_fn2).call(this);
  }
  render() {
    return html`
      <div slider id="slider-distance" @blur=${__privateGet(this, _blur)}>
        <div id="sign-container">
          <div sign>
            <span>${__privateGet(this, _formatter).format(this.value.min)}</span>
          </div>
          <div sign>
            <span>${__privateGet(this, _formatter).format(this.value.max)}</span>
          </div>
        </div>
        <div class="slider-container">
          <div left-track style="flex: 0 0 ${this._left}"></div>
          <div middle-track style="flex-grow: 1"></div>
          <div right-track style="flex: 0 0 ${this._right}"></div>
          <span
            thumb
            left
            style="left:${this._leftThumb}"
            tabindex=${this.disabled ? "-1" : "0"}
            @mousedown=${__privateGet(this, _handleMousedown)}
            @keydown=${__privateMethod(this, _handleKeydown, handleKeydown_fn)}>
          </span>
          <span
            thumb
            right
            style="right:${this._rightThumb}"
            tabindex=${this.disabled ? "-1" : "0"}
            @mousedown=${__privateGet(this, _handleMousedown)}
            @keydown=${__privateMethod(this, _handleKeydown, handleKeydown_fn)}>
          </span>
        </div>
      </div>
    `;
  }
};
_resizeObserver = new WeakMap();
_originalBodyStyle2 = new WeakMap();
_whichActiveThumb = new WeakMap();
_formatter = new WeakMap();
_isValidChange = new WeakSet();
isValidChange_fn = function(value) {
  if (__privateGet(this, _whichActiveThumb) === "min") {
    if (value >= this.value.max)
      return false;
    if (value * 1e3 % (this.step * 1e3) !== 0)
      return false;
    if (value - this.value.max * -1 < this.step)
      return false;
    if (value < this.min)
      return false;
  } else {
    if (value <= this.value.min)
      return false;
    if (value * 1e3 % (this.step * 1e3) !== 0)
      return false;
    if (value - this.value.min < this.step)
      return false;
    if (value > this.max)
      return false;
  }
  return true;
};
_emitChange2 = new WeakSet();
emitChange_fn2 = function() {
  if (typeof this.value.min !== "undefined" && typeof this.value.max !== "undefined") {
    this._internals.setValidity({});
  }
  this._internals.setFormValue(JSON.stringify(this.value));
  this.dispatchNewEvent("change", {
    detail: this.value
  });
};
_calcPositions = new WeakSet();
calcPositions_fn = function(value = this.value) {
  const totalRange = this.max - this.min;
  const leftBarLength = value.min;
  const middleBarLength = value.max - value.min;
  const rightBarLength = totalRange - leftBarLength - middleBarLength;
  const fromLeft = (leftBarLength / totalRange - this.min / totalRange) * 100;
  const fromRight = (rightBarLength / totalRange + this.min / totalRange) * 100;
  return {
    fromLeft,
    fromRight
  };
};
_positionElements = new WeakSet();
positionElements_fn = function(hostRect) {
  const { fromLeft, fromRight } = __privateMethod(this, _calcPositions, calcPositions_fn).call(this);
  this._left = `${fromLeft}%`;
  this._right = `${fromRight}%`;
  this._leftThumb = `${fromLeft - this.leftThumbEl.clientWidth / hostRect.width / 2 * 100}%`;
  this._rightThumb = `${fromRight - this.rightThumbEl.clientWidth / hostRect.width / 2 * 100}%`;
};
_handleKeydown = new WeakSet();
handleKeydown_fn = function(e) {
  const target = e.target;
  const key = e.key;
  if (key === "ArrowLeft" || key === "ArrowRight") {
    e.preventDefault();
    e.stopPropagation();
    const hostRect = this.getBoundingClientRect();
    __privateSet(this, _whichActiveThumb, target.hasAttribute("left") ? "min" : "max");
    if (__privateGet(this, _whichActiveThumb) === "min") {
      if (key === "ArrowLeft") {
        __privateMethod(this, _stepDownMin, stepDownMin_fn).call(this);
      } else {
        __privateMethod(this, _stepUpMin, stepUpMin_fn).call(this);
      }
    } else {
      if (key === "ArrowLeft") {
        __privateMethod(this, _stepDownMax, stepDownMax_fn).call(this);
      } else {
        __privateMethod(this, _stepUpMax, stepUpMax_fn).call(this);
      }
    }
    __privateMethod(this, _positionElements, positionElements_fn).call(this, hostRect);
    __privateMethod(this, _emitChange2, emitChange_fn2).call(this);
  }
  if (e.key === "Escape") {
    __privateGet(this, _blur).call(this);
  }
};
_blur = new WeakMap();
_handleMousemove = new WeakMap();
_handleMousedown = new WeakMap();
_handleMouseup = new WeakMap();
_stepDownMin = new WeakSet();
stepDownMin_fn = function() {
  const value = this.value.min - this.step;
  if (!__privateMethod(this, _isValidChange, isValidChange_fn).call(this, value))
    return;
  this.value.min = value;
};
_stepUpMin = new WeakSet();
stepUpMin_fn = function() {
  const value = this.value.min + this.step;
  if (!__privateMethod(this, _isValidChange, isValidChange_fn).call(this, value))
    return;
  this.value.min = value;
};
_stepUpMax = new WeakSet();
stepUpMax_fn = function() {
  const value = this.value.max + this.step;
  if (!__privateMethod(this, _isValidChange, isValidChange_fn).call(this, value))
    return;
  this.value.max = value;
};
_stepDownMax = new WeakSet();
stepDownMax_fn = function() {
  const value = this.value.max - this.step;
  if (!__privateMethod(this, _isValidChange, isValidChange_fn).call(this, value))
    return;
  this.value.max = value;
};
__decorateClass29([
  state()
], OmniRangeSlider.prototype, "_left", 2);
__decorateClass29([
  state()
], OmniRangeSlider.prototype, "_leftThumb", 2);
__decorateClass29([
  state()
], OmniRangeSlider.prototype, "_right", 2);
__decorateClass29([
  state()
], OmniRangeSlider.prototype, "_rightThumb", 2);
__decorateClass29([
  property({ type: Number })
], OmniRangeSlider.prototype, "min", 2);
__decorateClass29([
  property({ type: Number })
], OmniRangeSlider.prototype, "max", 2);
__decorateClass29([
  property({ type: Number })
], OmniRangeSlider.prototype, "step", 2);
__decorateClass29([
  property({ type: String })
], OmniRangeSlider.prototype, "name", 2);
__decorateClass29([
  property({ type: String })
], OmniRangeSlider.prototype, "valueMissingMessage", 2);
__decorateClass29([
  property({ type: Object })
], OmniRangeSlider.prototype, "numberFormatOptions", 2);
__decorateClass29([
  property({ type: Object, reflect: true })
], OmniRangeSlider.prototype, "value", 2);
__decorateClass29([
  query(".slider-container")
], OmniRangeSlider.prototype, "containerEl", 2);
__decorateClass29([
  query("[thumb][left]")
], OmniRangeSlider.prototype, "leftThumbEl", 2);
__decorateClass29([
  query("[thumb][right]")
], OmniRangeSlider.prototype, "rightThumbEl", 2);
OmniElement.register("omni-range-slider", OmniRangeSlider);

// node_modules/omni-ui/dist/controllers/drag-and-drop-controller.js
var _host, _dragContainersQueries, _ghostClass, _shadowClass, _noDropIdxs, _dropCb, _participatingElements, _dropTargetLines, _dropTarget, _dropContainerCandidate, _draggingHandle, _draggingElement, _draggingElementGhost, _draggingElementShadow, _draggingContainer, _animationDuration, _pointerEventHandled, _isDragging, _isAnimating, _log, log_fn, _defaultDropCb, _addLineStyles, addLineStyles_fn, _queryDragContainersAndRegisterParticipating, queryDragContainersAndRegisterParticipating_fn, _handlePointerDown2, _handlePointerUp2, _makeGhostElement, _makeShadowElement, _handleDragStart, _handleDragEnter, _handleDragOver, _setDragContainerScrollTop, _setWindowScrollTop, _handleDragLeave, _handleDragCancel, _handleDrop, _getInitialAndFinalPositions, getInitialAndFinalPositions_fn, _createDroppedElementAnimation, createDroppedElementAnimation_fn, _createMovedElementsAnimations, createMovedElementsAnimations_fn, _animateDropped, _isValidMove, isValidMove_get, _makeDropTargetLine, _handleMouseDown, _registerParticipatingElements, registerParticipatingElements_fn, _unregisterParticipatingElements, unregisterParticipatingElements_fn;
var DragAndDropController = class {
  /**
   * @param {OmniElement} host - your component host element that extends OmniElement. pass as: `this`
   * @param {DragAndDropOptions=} options -
   * @param {DropCb=} dropCb - add a callback function to handle moves within your list of items
   * @example
   * ```js
   * constructor(){
   *   super();
   *   this.myList = ['item 1', 'item 2', 'item 3'];
   *   this.dragController = new DragAndDropController(this);
   * }
   * render(){
   *  return html`
   *  <div drag-container drag-list="myList">
   *   ${this.list.map((item, idx) => html`
   *       <div drag-idx=${idx}>
   *          <omni-icon drag-handle></omni-icon>
   *          ${item}
   *       </div>
   *    `)}
   *   </div>
   * `
   * }
   * ```
   */
  constructor(host, options2 = {
    dragContainerQueries: ["[drag-container]"],
    shadowClass: "drag-shadow",
    ghostClass: "drag-ghost",
    noDropIdxs: [],
    animationDuration: 350
  }, dropCb = null) {
    __privateAdd(this, _log);
    __privateAdd(this, _addLineStyles);
    __privateAdd(this, _queryDragContainersAndRegisterParticipating);
    __privateAdd(this, _getInitialAndFinalPositions);
    __privateAdd(this, _createDroppedElementAnimation);
    __privateAdd(this, _createMovedElementsAnimations);
    __privateAdd(this, _isValidMove);
    __privateAdd(this, _registerParticipatingElements);
    __privateAdd(this, _unregisterParticipatingElements);
    __privateAdd(this, _host, void 0);
    __privateAdd(this, _dragContainersQueries, void 0);
    __privateAdd(this, _ghostClass, void 0);
    __privateAdd(this, _shadowClass, void 0);
    __privateAdd(this, _noDropIdxs, void 0);
    __privateAdd(this, _dropCb, void 0);
    __privateAdd(this, _participatingElements, void 0);
    __privateAdd(this, _dropTargetLines, void 0);
    __privateAdd(this, _dropTarget, void 0);
    __privateAdd(this, _dropContainerCandidate, void 0);
    __privateAdd(this, _draggingHandle, void 0);
    __privateAdd(this, _draggingElement, void 0);
    __privateAdd(this, _draggingElementGhost, void 0);
    __privateAdd(this, _draggingElementShadow, void 0);
    __privateAdd(this, _draggingContainer, void 0);
    __privateAdd(this, _animationDuration, void 0);
    __privateAdd(this, _pointerEventHandled, void 0);
    __privateAdd(this, _isDragging, void 0);
    __privateAdd(this, _isAnimating, void 0);
    __privateAdd(this, _defaultDropCb, void 0);
    __privateAdd(this, _handlePointerDown2, void 0);
    __privateAdd(this, _handlePointerUp2, void 0);
    __privateAdd(this, _makeGhostElement, void 0);
    __privateAdd(this, _makeShadowElement, void 0);
    __privateAdd(this, _handleDragStart, void 0);
    __privateAdd(this, _handleDragEnter, void 0);
    __privateAdd(this, _handleDragOver, void 0);
    __privateAdd(this, _setDragContainerScrollTop, void 0);
    __privateAdd(this, _setWindowScrollTop, void 0);
    __privateAdd(this, _handleDragLeave, void 0);
    __privateAdd(this, _handleDragCancel, void 0);
    __privateAdd(this, _handleDrop, void 0);
    __privateAdd(this, _animateDropped, void 0);
    __privateAdd(this, _makeDropTargetLine, void 0);
    __privateAdd(this, _handleMouseDown, void 0);
    __privateSet(this, _participatingElements, /* @__PURE__ */ new Map());
    __privateSet(this, _dropTargetLines, []);
    __privateSet(this, _pointerEventHandled, false);
    __privateSet(this, _isDragging, false);
    __privateSet(this, _isAnimating, false);
    this.debug = false;
    __privateSet(this, _defaultDropCb, ({ container, moveToIdx, moveFromIdx }) => {
      const listName = container.getAttribute("drag-list");
      if (!listName) {
        __privateMethod(this, _log, log_fn).call(this, "no list name found, no default move");
        return;
      }
      __privateMethod(this, _log, log_fn).call(this, "default DropCb. moveFromIdx, moveToIdx", moveFromIdx, moveToIdx);
      try {
        const array = __privateGet(this, _host)[listName];
        __privateGet(this, _host)[listName] = moveItemsInArray(array, moveFromIdx, moveToIdx);
        __privateGet(this, _host).requestUpdate();
      } catch (err) {
        console.warn("default drop cb error", err);
      }
    });
    __privateSet(this, _handlePointerDown2, (e) => {
      __privateMethod(this, _log, log_fn).call(this, "pointer down");
      if (__privateGet(this, _pointerEventHandled))
        return;
      __privateSet(this, _pointerEventHandled, true);
      const target = e.target;
      if (!target.closest("[drag-handle]")) {
        return;
      }
      __privateSet(this, _isDragging, true);
      __privateSet(this, _draggingHandle, target.closest("[drag-handle]"));
      __privateSet(this, _draggingElement, target.closest("[drag-idx]"));
      __privateGet(this, _draggingElement).setAttribute("draggable", "true");
      __privateSet(this, _draggingContainer, e.currentTarget);
      __privateMethod(this, _log, log_fn).call(this, "set drag handle:", __privateGet(this, _draggingHandle));
      __privateMethod(this, _log, log_fn).call(this, "set dragging element:", __privateGet(this, _draggingElement));
      __privateMethod(this, _log, log_fn).call(this, "set dragging container:", __privateGet(this, _draggingContainer));
      __privateGet(this, _draggingContainer).addEventListener("dragstart", __privateGet(this, _handleDragStart));
      __privateGet(this, _draggingContainer).addEventListener("dragover", __privateGet(this, _handleDragOver));
      __privateGet(this, _draggingContainer).addEventListener("drop", __privateGet(this, _handleDrop));
      __privateGet(this, _draggingContainer).addEventListener("dragend", __privateGet(this, _handleDragCancel));
    });
    __privateSet(this, _handlePointerUp2, (e) => {
      const dragContainer = e.currentTarget;
      dragContainer.removeEventListener("dragstart", __privateGet(this, _handleDragStart));
      dragContainer.removeEventListener("dragover", __privateGet(this, _handleDragOver));
      dragContainer.removeEventListener("drop", __privateGet(this, _handleDrop));
      dragContainer.removeEventListener("dragend", __privateGet(this, _handleDragCancel));
      __privateSet(this, _pointerEventHandled, false);
      __privateSet(this, _isDragging, false);
    });
    __privateSet(this, _makeGhostElement, (originalElement) => {
      const clone2 = originalElement.cloneNode(true);
      clone2.setAttribute("drag-and-drop-clone", "");
      const { width, height } = originalElement.getBoundingClientRect();
      clone2.classList.add(__privateGet(this, _ghostClass));
      clone2.style.height = `${height}px`;
      clone2.style.width = `${width}px`;
      clone2.style.position = "absolute";
      clone2.style.top = `-10000px`;
      clone2.style.left = `-10000px`;
      clone2.style.zIndex = "-1";
      return clone2;
    });
    __privateSet(this, _makeShadowElement, (originalElement) => {
      const clone2 = document.createElement(originalElement.tagName);
      clone2.setAttribute("drag-and-drop-clone", "");
      clone2.classList.add(__privateGet(this, _shadowClass));
      const { width, height } = originalElement.getBoundingClientRect();
      clone2.style.height = `${height}px`;
      clone2.style.width = `${width}px`;
      clone2.style.zIndex = "1";
      return clone2;
    });
    __privateSet(this, _handleDragStart, (e) => {
      __privateMethod(this, _log, log_fn).call(this, "drag start");
      e.dataTransfer.effectAllowed = "move";
      __privateSet(this, _draggingElementGhost, __privateGet(this, _makeGhostElement).call(this, __privateGet(this, _draggingElement)));
      __privateSet(this, _draggingElementShadow, __privateGet(this, _makeShadowElement).call(this, __privateGet(this, _draggingElement)));
      __privateSet(this, _draggingContainer, e.currentTarget);
      __privateGet(this, _draggingContainer).appendChild(__privateGet(this, _draggingElementGhost));
      e.dataTransfer.setDragImage(__privateGet(this, _draggingElementGhost), e.offsetX, e.offsetY);
      setTimeout(() => {
        __privateGet(this, _draggingContainer).setAttribute("dragging", "");
        const nextSibling = __privateGet(this, _draggingElement).nextElementSibling;
        if (nextSibling) {
          __privateGet(this, _draggingContainer).insertBefore(__privateGet(this, _draggingElementShadow), nextSibling);
        } else {
          __privateGet(this, _draggingContainer).appendChild(__privateGet(this, _draggingElementShadow));
        }
        __privateGet(this, _draggingElement).style.display = "none";
      });
    });
    __privateSet(this, _handleDragEnter, (e) => {
      e.preventDefault();
      __privateSet(this, _dropContainerCandidate, e.currentTarget);
      __privateMethod(this, _log, log_fn).call(this, "drag enter");
    });
    __privateSet(this, _handleDragOver, (e) => {
      e.preventDefault();
      __privateMethod(this, _log, log_fn).call(this, "drag over");
      if (__privateGet(this, _isAnimating))
        return;
      const target = e.target;
      const dragLine = target.closest("omni-drop-line");
      __privateSet(this, _dropTarget, dragLine);
      if (dragLine && __privateGet(this, _isValidMove, isValidMove_get)) {
        dragLine.setAttribute("drag-over", "");
      }
      if (this.autoscrollingElement || this.autoscrollingWindow) {
        const containerRect = this.autoscrollingElement ? __privateGet(this, _draggingContainer).getBoundingClientRect() : {
          x: 0,
          y: 0,
          width: window.innerWidth,
          height: window.innerHeight,
          right: window.innerWidth,
          bottom: window.innerHeight
        };
        const pointer = [e.clientX, e.clientY];
        const relative = {
          left: pointer[0] - containerRect.x,
          top: pointer[1] - containerRect.y,
          right: containerRect.right - pointer[0],
          bottom: containerRect.bottom - pointer[1]
        };
        __privateMethod(this, _log, log_fn).call(this, "scroll. relative pos: ", relative);
        const slowScrollAt = this.slowScrollAt;
        const fastScrollAt = this.slowScrollAt;
        const slowScrollIncrement = this.slowScrollIncrement;
        const fastScrollIncrement = this.fastScrollIncrement;
        if (relative.top < slowScrollAt && relative.top > fastScrollAt) {
          __privateGet(this, _setDragContainerScrollTop).call(this, __privateGet(this, _draggingContainer), -slowScrollIncrement);
          __privateGet(this, _setWindowScrollTop).call(this, -slowScrollIncrement);
        }
        if (relative.top <= fastScrollAt && relative.top >= 0) {
          __privateGet(this, _setDragContainerScrollTop).call(this, __privateGet(this, _draggingContainer), -fastScrollIncrement);
          __privateGet(this, _setWindowScrollTop).call(this, -fastScrollIncrement);
        }
        if (relative.bottom < slowScrollAt && relative.bottom > fastScrollAt) {
          __privateGet(this, _setDragContainerScrollTop).call(this, __privateGet(this, _draggingContainer), slowScrollIncrement);
          __privateGet(this, _setWindowScrollTop).call(this, slowScrollIncrement);
        }
        if (relative.bottom <= fastScrollAt && relative.bottom >= 0) {
          __privateGet(this, _setDragContainerScrollTop).call(this, __privateGet(this, _draggingContainer), fastScrollIncrement);
          __privateGet(this, _setWindowScrollTop).call(this, fastScrollIncrement);
        }
      }
    });
    __privateSet(this, _setDragContainerScrollTop, debounce((container, scrollshift) => {
      if (!this.autoscrollingElement)
        return;
      __privateMethod(this, _log, log_fn).call(this, "scroll element. container, scrollshift:", container, scrollshift);
      container.scrollTop = container.scrollTop + scrollshift;
    }, 10));
    __privateSet(this, _setWindowScrollTop, debounce((scrollshift) => {
      if (!this.autoscrollingWindow)
        return;
      __privateMethod(this, _log, log_fn).call(this, "scroll document element. shift by:", scrollshift);
      document.documentElement.scrollTop = document.documentElement.scrollTop + scrollshift;
      document.body.scrollTop = document.body.scrollTop + scrollshift;
      window.scrollTo(0, document.documentElement.scrollTop + scrollshift);
    }, 10));
    __privateSet(this, _handleDragLeave, (e) => {
      e.preventDefault();
      __privateMethod(this, _log, log_fn).call(this, "drag leave", e.target);
      if (__privateGet(this, _isAnimating))
        return;
      const target = e.target;
      if (!target.closest("omni-drop-line"))
        return;
      const dragLine = target.closest("omni-drop-line");
      dragLine.removeAttribute("drag-over");
      if (!__privateGet(this, _isValidMove, isValidMove_get))
        return;
    });
    __privateSet(this, _handleDragCancel, () => {
      var _a7;
      __privateMethod(this, _log, log_fn).call(this, "drag cancel");
      if (__privateGet(this, _draggingElementShadow)) {
        __privateGet(this, _draggingElementShadow).remove();
      }
      (_a7 = __privateGet(this, _draggingContainer)) == null ? void 0 : _a7.removeAttribute("dragging");
      if (__privateGet(this, _isAnimating))
        return;
      if (__privateGet(this, _draggingElement)) {
        __privateGet(this, _draggingElement).removeAttribute("draggable");
        __privateGet(this, _draggingElement).style.display = "";
      }
      __privateSet(this, _isDragging, false);
      __privateGet(this, _host).requestUpdate();
    });
    __privateSet(this, _handleDrop, async (e) => {
      var _a7, _b2, _c;
      __privateMethod(this, _log, log_fn).call(this, "handle drop");
      e.stopPropagation();
      e.preventDefault();
      __privateGet(this, _draggingElement).removeAttribute("draggable");
      __privateGet(this, _draggingElement).style.display = "";
      __privateGet(this, _draggingElementShadow).remove();
      __privateSet(this, _dropTarget, e.target.closest("omni-drop-line"));
      (_a7 = __privateGet(this, _dropTarget)) == null ? void 0 : _a7.removeAttribute("drag-over");
      __privateSet(this, _dropContainerCandidate, e.currentTarget);
      if (((_b2 = __privateGet(this, _dropTarget)) == null ? void 0 : _b2.tagName) !== "OMNI-DROP-LINE") {
        __privateGet(this, _handleDragCancel).call(this);
        return;
      }
      const isValidMove = __privateGet(this, _isValidMove, isValidMove_get);
      if (!isValidMove) {
        __privateGet(this, _handleDragCancel).call(this);
        return;
      }
      (_c = __privateGet(this, _draggingContainer)) == null ? void 0 : _c.removeAttribute("dragging");
      await __privateGet(this, _animateDropped).call(this, e, isValidMove);
      __privateGet(this, _dropCb).call(this, isValidMove);
      __privateGet(this, _host).dispatchNewEvent("omni-drop", {
        detail: isValidMove
      });
      __privateSet(this, _isDragging, false);
    });
    __privateSet(this, _animateDropped, async (e, move) => {
      __privateMethod(this, _log, log_fn).call(this, "animate dropped element into place START", move);
      __privateSet(this, _isAnimating, true);
      __privateGet(this, _draggingElement).style.visibility = "hidden";
      const animateAxis = __privateGet(this, _draggingContainer).getAttribute("drag-orientation") === "horizontal" ? "x" : "y";
      await Promise.all([
        __privateMethod(this, _createDroppedElementAnimation, createDroppedElementAnimation_fn).call(this, e, move),
        ...__privateMethod(this, _createMovedElementsAnimations, createMovedElementsAnimations_fn).call(this, move, animateAxis)
      ]);
      __privateGet(this, _draggingElement).style.visibility = "visible";
      __privateSet(this, _isAnimating, false);
      __privateMethod(this, _log, log_fn).call(this, "animate dropped element into place END");
    });
    __privateSet(this, _makeDropTargetLine, (dragContainer, idx) => {
      const targetEl = document.createElement("omni-drop-line");
      targetEl.setAttribute("drag-idx", String(idx));
      targetEl.style.display = "flex";
      targetEl.style.flexDirection = "row";
      targetEl.style.justifyContent = "center";
      if (dragContainer.getAttribute("drag-orientation") === "horizontal") {
        targetEl.style.flexDirection = "column";
        targetEl.style.alignItems = "center";
      }
      const template = `
      <div drop-line-container>
        <span dot dot-one> </span>
        <div drop-line></div>
        <span dot dot-two></span>
      </div>
    `;
      targetEl.innerHTML = template;
      return targetEl;
    });
    __privateSet(this, _handleMouseDown, (e) => {
      if (__privateGet(this, _pointerEventHandled))
        return;
      else {
        __privateMethod(this, _log, log_fn).call(this, "mousedown is handling");
        __privateGet(this, _handlePointerDown2).call(this, e);
      }
    });
    __privateSet(this, _host, host);
    __privateGet(this, _host).addController(this);
    __privateSet(this, _dragContainersQueries, options2.dragContainerQueries ?? ["[drag-container]"]);
    __privateSet(this, _ghostClass, options2.ghostClass ?? "drag-ghost");
    __privateSet(this, _shadowClass, options2.shadowClass ?? "drag-shadow");
    __privateSet(this, _noDropIdxs, options2.noDropIdxs ?? []);
    __privateSet(this, _animationDuration, options2.animationDuration ?? 350);
    __privateSet(this, _dropCb, dropCb ?? __privateGet(this, _defaultDropCb));
    this.autoscrollingElement = options2.autoscrollingElement ?? false;
    this.autoscrollingWindow = options2.autoscrollingWindow ?? false;
    this.slowScrollAt = options2.slowScrollAt ?? 150;
    this.fastScrollAt = options2.fastScrollAt ?? 50;
    this.slowScrollIncrement = options2.slowScrollIncrement ?? 10;
    this.fastScrollIncrement = options2.fastScrollIncrement ?? 30;
  }
  hostConnected() {
    __privateMethod(this, _addLineStyles, addLineStyles_fn).call(this);
  }
  /**
   * - use this method to update the noDropIdxs after initialization
   * - only use this method between drag-and-drop
   */
  setNoDropIdxs(val) {
    if (__privateGet(this, _isDragging)) {
      console.warn(
        "drag-and-drop-controller: you are trying to set no drop idxs while dragging. This is not recommended and you may see unexpected behavior."
      );
      return;
    }
    __privateSet(this, _noDropIdxs, val);
    __privateMethod(this, _unregisterParticipatingElements, unregisterParticipatingElements_fn).call(this);
    __privateMethod(this, _queryDragContainersAndRegisterParticipating, queryDragContainersAndRegisterParticipating_fn).call(this);
    __privateMethod(this, _log, log_fn).call(this, "no drop idxs set:", __privateGet(this, _noDropIdxs));
  }
  /** unregister and reregister all drag elements */
  hostUpdated() {
    if (__privateGet(this, _isDragging)) {
      console.warn(
        "drag-and-drop-controller: your component updated while dragging. This is not recommended and you may see unexpected behavior."
      );
      return;
    }
    __privateMethod(this, _unregisterParticipatingElements, unregisterParticipatingElements_fn).call(this);
    __privateMethod(this, _queryDragContainersAndRegisterParticipating, queryDragContainersAndRegisterParticipating_fn).call(this);
  }
  /** unregister all drag elements. cleans up and removes all event listeners */
  hostDisconnected() {
    __privateMethod(this, _unregisterParticipatingElements, unregisterParticipatingElements_fn).call(this);
    __privateMethod(this, _log, log_fn).call(this, "host disconnected. participating elements cleared:", __privateGet(this, _participatingElements));
  }
};
_host = new WeakMap();
_dragContainersQueries = new WeakMap();
_ghostClass = new WeakMap();
_shadowClass = new WeakMap();
_noDropIdxs = new WeakMap();
_dropCb = new WeakMap();
_participatingElements = new WeakMap();
_dropTargetLines = new WeakMap();
_dropTarget = new WeakMap();
_dropContainerCandidate = new WeakMap();
_draggingHandle = new WeakMap();
_draggingElement = new WeakMap();
_draggingElementGhost = new WeakMap();
_draggingElementShadow = new WeakMap();
_draggingContainer = new WeakMap();
_animationDuration = new WeakMap();
_pointerEventHandled = new WeakMap();
_isDragging = new WeakMap();
_isAnimating = new WeakMap();
_log = new WeakSet();
log_fn = function(...args) {
  if (this.debug) {
    console.log("[dnd] ", ...args);
  }
};
_defaultDropCb = new WeakMap();
_addLineStyles = new WeakSet();
addLineStyles_fn = function() {
  const styleForHost = document.createElement("style");
  styleForHost.textContent = LINE_STYLES;
  __privateGet(this, _host).shadowRoot.appendChild(styleForHost);
};
_queryDragContainersAndRegisterParticipating = new WeakSet();
queryDragContainersAndRegisterParticipating_fn = function() {
  const dragContainers = __privateGet(this, _dragContainersQueries).map((query2) => {
    return [...__privateGet(this, _host).shadowRoot.querySelectorAll(query2)];
  }).reduce((acc, val) => acc.concat(val), []).flat().filter((one) => one);
  __privateMethod(this, _registerParticipatingElements, registerParticipatingElements_fn).call(this, dragContainers);
};
_handlePointerDown2 = new WeakMap();
_handlePointerUp2 = new WeakMap();
_makeGhostElement = new WeakMap();
_makeShadowElement = new WeakMap();
_handleDragStart = new WeakMap();
_handleDragEnter = new WeakMap();
_handleDragOver = new WeakMap();
_setDragContainerScrollTop = new WeakMap();
_setWindowScrollTop = new WeakMap();
_handleDragLeave = new WeakMap();
_handleDragCancel = new WeakMap();
_handleDrop = new WeakMap();
_getInitialAndFinalPositions = new WeakSet();
getInitialAndFinalPositions_fn = function(move, axis) {
  const draggingContainerRect = __privateGet(this, _draggingContainer).getBoundingClientRect();
  const dimension = axis === "x" ? "width" : "height";
  const lineDimension = __privateGet(this, _draggingContainer).querySelector("omni-drop-line").getBoundingClientRect()[dimension];
  const itemsAfterDrop = moveItemsInArray(
    [...__privateGet(this, _participatingElements).get(__privateGet(this, _draggingContainer))],
    move.moveFromIdx,
    move.moveToIdx
  );
  const elementsToAnimationInfo = (el) => {
    const selfRect = el.getBoundingClientRect();
    return {
      el,
      class: el.className,
      initialIdx: __privateGet(this, _participatingElements).get(__privateGet(this, _draggingContainer)).findIndex((one) => one === el) ?? -1,
      finalIdx: itemsAfterDrop.findIndex((one) => one === el) ?? -1,
      xRel: 0,
      yRel: 0,
      x: 0,
      y: 0,
      width: selfRect.width,
      height: selfRect.height
    };
  };
  const initial = [...__privateGet(this, _participatingElements).get(__privateGet(this, _draggingContainer))].map(elementsToAnimationInfo);
  for (const [i, one] of initial.entries()) {
    const prevElDimensions = initial.filter((f, i2) => i2 < one.initialIdx).map((f) => f[dimension]).reduce((acc, val) => acc + val, 0);
    one[`${axis}Rel`] = (i + 1) * lineDimension + prevElDimensions;
    one[axis] = draggingContainerRect[axis] + one[`${axis}Rel`];
  }
  const final = itemsAfterDrop.map(elementsToAnimationInfo);
  for (const [i, one] of final.entries()) {
    const prevElDimensions = final.filter((f, i2) => i2 < one.finalIdx).map((f) => f[dimension]).reduce((acc, val) => acc + val, 0);
    one[`${axis}Rel`] = (i + 1) * lineDimension + prevElDimensions;
    one[axis] = draggingContainerRect[axis] + one[`${axis}Rel`];
  }
  return {
    initial,
    final
  };
};
_createDroppedElementAnimation = new WeakSet();
createDroppedElementAnimation_fn = function(e, move) {
  __privateGet(this, _draggingElementShadow).style.visibility = "hidden";
  const axis = __privateGet(this, _draggingContainer).getAttribute("drag-orientation") === "horizontal" ? "x" : "y";
  const { final } = __privateMethod(this, _getInitialAndFinalPositions, getInitialAndFinalPositions_fn).call(this, move, axis);
  const positions = {
    dragHandle: __privateGet(this, _draggingHandle).getBoundingClientRect(),
    draggingEl: __privateGet(this, _draggingElement).getBoundingClientRect(),
    targetFinal: final[move.moveToIdx]
  };
  const startFromLeft = e.clientX - (positions.dragHandle.left - positions.draggingEl.left);
  const startFromTop = e.clientY - (positions.dragHandle.top - positions.draggingEl.top);
  const startingStyle = {
    top: `${startFromTop}px`,
    left: `${startFromLeft}px`,
    opacity: ".8"
  };
  const endingStyle = {
    top: `${positions.targetFinal.yRel + __privateGet(this, _draggingContainer).getBoundingClientRect().y - __privateGet(this, _draggingContainer).scrollTop}px`,
    left: `${positions.targetFinal.xRel + __privateGet(this, _draggingContainer).getBoundingClientRect().x}px`,
    opacity: "1"
  };
  __privateGet(this, _draggingElementGhost).style.position = "fixed";
  __privateGet(this, _draggingElementGhost).style.zIndex = "1000";
  __privateGet(this, _draggingElementGhost).style.width = `${positions.draggingEl.width}px`;
  __privateGet(this, _draggingElementGhost).style.height = `${positions.draggingEl.height}px`;
  __privateGet(this, _draggingElementGhost).style.opacity = ".8";
  return __privateGet(this, _draggingElementGhost).animate([startingStyle, endingStyle], {
    duration: __privateGet(this, _animationDuration),
    easing: "cubic-bezier(0.42, 0, 0.58, 1)"
  }).finished;
};
_createMovedElementsAnimations = new WeakSet();
createMovedElementsAnimations_fn = function(move, axis) {
  const { initial, final } = __privateMethod(this, _getInitialAndFinalPositions, getInitialAndFinalPositions_fn).call(this, move, axis);
  const animations = [];
  for (let i = 0; i < initial.length; i++) {
    const initialEl = initial[i];
    const finalEl = final.find((one) => one.initialIdx === i);
    const startingStyle = {
      transform: `translate(0px,0px)`
    };
    const endingStyle = {
      transform: `translate(${axis === "x" ? `${finalEl.xRel - initialEl.xRel}px` : "0px"}, ${axis === "x" ? "0px" : `${finalEl.yRel - initialEl.yRel}px`})`
    };
    const animation = initial[i].el.animate([startingStyle, endingStyle], {
      duration: __privateGet(this, _animationDuration),
      easing: "cubic-bezier(0.42, 0, 0.58, 1)"
    }).finished;
    animations.push(animation);
  }
  return animations;
};
_animateDropped = new WeakMap();
_isValidMove = new WeakSet();
isValidMove_get = function() {
  if (__privateGet(this, _dropContainerCandidate) !== __privateGet(this, _draggingContainer)) {
    return false;
  }
  if (!__privateGet(this, _dropTarget)) {
    return false;
  }
  if (__privateGet(this, _noDropIdxs).includes(Number(__privateGet(this, _dropTarget).getAttribute("drag-idx")))) {
    return false;
  }
  const move = {
    container: __privateGet(this, _dropContainerCandidate),
    moveFromIdx: Number(__privateGet(this, _draggingElement).getAttribute("drag-idx")),
    moveToIdx: Number(__privateGet(this, _dropTarget).getAttribute("drag-idx"))
  };
  const dragChildren = __privateGet(this, _participatingElements).get(__privateGet(this, _draggingContainer));
  const isFirst = move.moveFromIdx === 0;
  const isLast = move.moveFromIdx === dragChildren.length;
  const isMiddle = !isFirst && !isLast;
  const isMovingDown = move.moveToIdx > move.moveFromIdx;
  if (isFirst) {
    move.moveToIdx = move.moveToIdx - 1;
  }
  if (isMiddle) {
    if (isMovingDown) {
      move.moveToIdx = move.moveToIdx - 1;
    }
  }
  if (isLast) {
    move.moveToIdx = move.moveToIdx + 1;
  }
  if (move.moveToIdx === move.moveFromIdx) {
    return false;
  }
  if (move.moveToIdx === -1) {
    return false;
  }
  return move;
};
_makeDropTargetLine = new WeakMap();
_handleMouseDown = new WeakMap();
_registerParticipatingElements = new WeakSet();
registerParticipatingElements_fn = function(dragContainers) {
  dragContainers.forEach((dragContainer) => {
    dragContainer.addEventListener("pointerdown", __privateGet(this, _handlePointerDown2));
    dragContainer.addEventListener("mousedown", __privateGet(this, _handleMouseDown));
    dragContainer.addEventListener("dragenter", __privateGet(this, _handleDragEnter));
    dragContainer.addEventListener("dragleave", __privateGet(this, _handleDragLeave));
    dragContainer.addEventListener("pointerup", __privateGet(this, _handlePointerUp2));
    const draggableItems = [...dragContainer.children];
    __privateGet(this, _participatingElements).set(dragContainer, draggableItems);
    draggableItems.forEach((child, idx) => {
      const target = __privateGet(this, _makeDropTargetLine).call(this, dragContainer, idx);
      dragContainer.insertBefore(target, child);
      __privateGet(this, _dropTargetLines).push(target);
      if (idx + 1 === draggableItems.length) {
        const lastTarget = __privateGet(this, _makeDropTargetLine).call(this, dragContainer, idx + 1);
        dragContainer.appendChild(lastTarget);
        __privateGet(this, _dropTargetLines).push(lastTarget);
      }
    });
  });
  __privateMethod(this, _log, log_fn).call(this, "participating elements registered", __privateGet(this, _participatingElements));
};
_unregisterParticipatingElements = new WeakSet();
unregisterParticipatingElements_fn = function() {
  __privateGet(this, _participatingElements).forEach((child, dragContainer) => {
    dragContainer.removeEventListener("pointerdown", __privateGet(this, _handlePointerDown2));
    dragContainer.removeEventListener("mousedown", __privateGet(this, _handleMouseDown));
    dragContainer.removeEventListener("pointerup", __privateGet(this, _handlePointerUp2));
    dragContainer.removeEventListener("dragenter", __privateGet(this, _handleDragEnter));
    dragContainer.removeEventListener("dragleave", __privateGet(this, _handleDragLeave));
    __privateSet(this, _pointerEventHandled, false);
  });
  __privateGet(this, _participatingElements).clear();
  __privateGet(this, _dropTargetLines).forEach((targetEl) => {
    targetEl.remove();
  });
  __privateSet(this, _dropTargetLines, []);
  __privateGet(this, _host).shadowRoot.querySelectorAll("[drag-and-drop-clone]").forEach((one) => one.remove());
  __privateSet(this, _draggingHandle, null);
  __privateSet(this, _draggingContainer, null);
  __privateSet(this, _draggingElement, null);
  __privateSet(this, _draggingElementShadow, null);
  __privateSet(this, _draggingElementGhost, null);
  __privateSet(this, _dropTarget, null);
  __privateMethod(this, _log, log_fn).call(this, "participating elements unregistered", __privateGet(this, _participatingElements));
};
var moveItemsInArray = (array, moveFromIdx, moveToIdx) => {
  const itemToMove = array[moveFromIdx];
  array.splice(moveFromIdx, 1);
  array.splice(moveToIdx, 0, itemToMove);
  return array;
};
var LINE_STYLES = `
  :host {
    --drop-line-color: var(--color-primary);
    --drop-line-stroke: 2px;
    --drop-line-padding: 0.5rem;
    --drop-line-extend: 10px;
    --drop-line-dragging-padding: 1.5rem;
  }
  [drop-line-container] {
    position: relative;
    height: 100%;
    padding: var(--drop-line-padding) 0;
    margin: 0 calc(-1 * var(--drop-line-extend));
    flex-grow: 1;
  }
  [dragging] [drop-line-container] {
    padding: calc(var(--drop-line-padding) + var(--drop-line-dragging-padding)) 0;
    margin: calc(-1 * var(--drop-line-dragging-padding)) calc(-1 * var(--drop-line-extend));
  }
  [drag-orientation='horizontal'] [drop-line-container] {
    padding: 0 var(--drop-line-padding);
    margin: calc(-1 * var(--drop-line-extend)) 0;
  }
  [dragging][drag-orientation='horizontal'] [drop-line-container] {
    padding: 0 calc(var(--drop-line-padding) + var(--drop-line-dragging-padding));
    margin: calc(-1 * var(--drop-line-extend)) calc(-1 * var(--drop-line-dragging-padding));
  }
  [drop-line] {
    background-color: transparent;
    height: var(--drop-line-stroke);
    width: 100%;
  }
  [drag-over] [drop-line] {
    background-color: var(--drop-line-color);
  }

  [drag-orientation='horizontal'] [drop-line] {
    height: 100%;
    width: var(--drop-line-stroke);
  }
  [dot] {
    position: absolute;
    width: 6px;
    height: 6px;
    border-radius: 50%;
  }
  [dot-one] {
    left: 0;
    top: 50%;
    transform: translate(-50%, -50%);
  }
  [dot-two] {
    right: 0;
    top: 50%;
    transform: translate(50%, -50%);
  }
  [drag-over] [dot] {
    background-color: var(--drop-line-color);
  }
  [drag-orientation='horizontal'] [dot-one] {
    top: 0;
    left: 50%;
    transform: translate(-50%, -50%);
  }
  [drag-orientation='horizontal'] [dot-two] {
    top: unset;
    bottom: 0;
    left: 50%;
    transform: translate(-50%, 50%);
  }
`;

// node_modules/omni-ui/dist/component/omni-icon-action/omni-icon-action.js
var __defProp30 = Object.defineProperty;
var __getOwnPropDesc30 = Object.getOwnPropertyDescriptor;
var __decorateClass30 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc30(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp30(target, key, result);
  return result;
};
var styles25 = css`:host([disabled]:hover),:host([disabled]){cursor:not-allowed}.omni .button.pd{padding:12px 18px}.omni .button.pd.is-active{background-image:rgb(var(--rgb-primary), 0.15);border:var(--color-transparent);color:var(--color-core-light)}`;
OmniStyle.register();
OmniIcon.register();
OmniTooltip.register();
var OmniIconActions = class extends OmniElement {
  constructor() {
    super(...arguments);
    this.iconId = "";
    this.message = "";
    this.active = false;
    this.disabled = false;
    this.showOnDisable = false;
    this.place = "top";
  }
  static get styles() {
    return [...super.styles, styles25];
  }
  /** @internal */
  get iconActionTemplate() {
    const classes = classMap({
      "is-text": !this.active,
      "is-active": this.active,
      "is-shadowless": true,
      button: true,
      icon: true,
      pd: true
    });
    return this.message !== "" ? html`
          <omni-tooltip ?show-on-disabled=${this.showOnDisable} .place=${this.place}>
            <button slot="invoker" class=${classes} ?disabled=${this.disabled} part="icon-action-button">
              <omni-icon icon-id=${this.iconId}></omni-icon>
            </button>
            <div slot="content">
              <p>${this.message}</p>
            </div>
          </omni-tooltip>
        ` : html`
          <button class=${classes} ?disabled=${this.disabled} part="icon-action-button">
            <omni-icon icon-id=${this.iconId}></omni-icon>
          </button>
        `;
  }
  render() {
    return html` <omni-style> ${this.iconActionTemplate} </omni-style> `;
  }
};
__decorateClass30([
  property({ type: String, reflect: true, attribute: "icon-id" })
], OmniIconActions.prototype, "iconId", 2);
__decorateClass30([
  property({ type: String, reflect: true })
], OmniIconActions.prototype, "message", 2);
__decorateClass30([
  property({ type: Boolean, reflect: true, attribute: true })
], OmniIconActions.prototype, "active", 2);
__decorateClass30([
  property({ type: Boolean, attribute: true })
], OmniIconActions.prototype, "disabled", 2);
__decorateClass30([
  property({ type: Boolean, attribute: "show-on-disable" })
], OmniIconActions.prototype, "showOnDisable", 2);
__decorateClass30([
  property({ type: String, attribute: true, reflect: true })
], OmniIconActions.prototype, "place", 2);
OmniElement.register("omni-icon-action", OmniIconActions);

// node_modules/omni-ui/dist/component/omni-textarea/omni-textarea.js
var __defProp31 = Object.defineProperty;
var __getOwnPropDesc31 = Object.getOwnPropertyDescriptor;
var __decorateClass31 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc31(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp31(target, key, result);
  return result;
};
var styles26 = css`.omni textarea.textarea{resize:none}.omni textarea.textarea.is-error{border-color:var(--color-error)}.omni textarea.textarea[disabled]{resize:none}:host([transparent]) .omni textarea.textarea,:host([transparent]) .omni textarea.textarea:hover,:host([transparent]) .omni textarea.textarea:active,:host([transparent]) .omni textarea.textarea:focus{background-color:rgba(0,0,0,0);border:1px solid rgba(0,0,0,0);box-shadow:none}.label-container{display:flex;justify-content:flex-start;align-items:center;height:.9285714286rem;margin-bottom:.6428571429rem}.label-container label{line-height:.9285714286rem;white-space:nowrap;color:var(--color-core-dark);font-size:.7857142857rem;opacity:.6}.text-right{color:#df5678;justify-content:right;align-items:center}.footer-spacer{height:1.8571428571rem;min-height:1.8571428571rem;max-height:1.8571428571rem;flex:0 0 100%}.footer-container{display:flex;justify-content:flex-end;align-items:center;flex:0 0 100%;padding:.2857142857rem 0 .2857142857rem .2857142857rem}.footer-container.error-text{justify-content:flex-start;align-items:center}.footer-container omni-icon{margin-right:.5714285714rem;--color-icon-lines: var(--color-error)}.footer-container span{font-size:.8571428571rem;font-weight:400;color:var(--color-almost-black)}.footer-container span.too-many{color:var(--color-error)}`;
var _calculateRemainingCharacters, calculateRemainingCharacters_fn, _handleInput, handleInput_fn, _handleResize, handleResize_fn, _labelTemplate2, labelTemplate_get2, _characterCountTemplate, characterCountTemplate_get, _footerTemplate4, footerTemplate_get4;
var OmniTextarea = class extends ElementInternalsBase {
  constructor() {
    super(...arguments);
    __privateAdd(this, _calculateRemainingCharacters);
    __privateAdd(this, _handleInput);
    __privateAdd(this, _handleResize);
    __privateAdd(this, _labelTemplate2);
    __privateAdd(this, _characterCountTemplate);
    __privateAdd(this, _footerTemplate4);
    this.placeholder = "";
    this.value = "";
    this.label = "";
    this.valueMissingMessage = "This field is required";
    this.hidefooter = false;
    this.resize = false;
    this.rows = 1;
    this.showCharacterCountdown = false;
  }
  /**@internal */
  static get shadowRootOptions() {
    return { ...super.shadowRootOptions, delegatesFocus: true };
  }
  static get styles() {
    return [...super.styles, styles26];
  }
  async firstUpdated() {
    await this.updateComplete;
    __privateMethod(this, _handleResize, handleResize_fn).call(this);
    this._internals.setFormValue(this.value);
    this._internals.setValidity({});
    if (!this.value && this.required) {
      this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.textarea);
    }
  }
  willUpdate(propertiesToChange) {
    if (propertiesToChange.has("value") && typeof this.value !== "undefined" && this.value !== null) {
      __privateMethod(this, _calculateRemainingCharacters, calculateRemainingCharacters_fn).call(this);
    }
  }
  /** clear the textarea and resize to the default rows */
  async clear() {
    this.value = "";
    this.dispatchNewEvent("change", { detail: this.value });
    await this.updateComplete;
    __privateMethod(this, _handleResize, handleResize_fn).call(this);
  }
  render() {
    return html`
      <!-- prettier-ignore -->
      <omni-style>
        ${__privateGet(this, _labelTemplate2, labelTemplate_get2)}
        <textarea
          part="textarea"
          class="textarea ${this.error ? "is-error" : ""} ${this._charactersRemaining < 0 ? "is-error" : ""}"
          .value=${this.value}
          ?disabled=${this.disabled}
          .placeholder=${this.placeholder}
          rows=${this.rows}
          @input=${__privateMethod(this, _handleInput, handleInput_fn)}>
        </textarea>
        ${__privateGet(this, _footerTemplate4, footerTemplate_get4)}
      </omni-style>
    `;
  }
};
_calculateRemainingCharacters = new WeakSet();
calculateRemainingCharacters_fn = function() {
  if (this.characterCount) {
    this._charactersRemaining = this.characterCount - this.value.length;
  }
};
_handleInput = new WeakSet();
handleInput_fn = async function(e) {
  this._internals.setValidity({});
  this.value = e.target.value;
  this._internals.setFormValue(this.value);
  if (!this.value && this.required) {
    this._internals.setValidity({ valueMissing: true }, this.valueMissingMessage, this.textarea);
  }
  if (this.value.length > this.characterCount) {
    this._internals.setValidity(
      { tooLong: true },
      `Too many characters (${this._charactersRemaining})`,
      this.textarea
    );
  }
  this.dispatchNewEvent("change", { detail: this.value });
  __privateMethod(this, _handleResize, handleResize_fn).call(this);
};
_handleResize = new WeakSet();
handleResize_fn = function() {
  const textAreaStyle = getComputedStyle(this.textarea);
  const paddingAndBorderHeight = parseFloat(textAreaStyle.paddingTop) + parseFloat(textAreaStyle.paddingBottom) + parseFloat(textAreaStyle.borderTopWidth) + parseFloat(textAreaStyle.borderBottomWidth);
  const maxheight = this.maxRows ? parseFloat(textAreaStyle.lineHeight) * this.maxRows + paddingAndBorderHeight : Infinity;
  const minHeight = paddingAndBorderHeight + parseFloat(textAreaStyle.lineHeight) * this.rows;
  this.textarea.style.height = "auto";
  if (this.resize) {
    this.textarea.style.resize = "vertical";
  }
  const adjustToHeight = this.textarea.scrollHeight + 2;
  if (adjustToHeight > maxheight) {
    this.textarea.style.overflow = "auto";
    this.textarea.style.height = `${maxheight}px`;
    return;
  }
  this.textarea.style.height = `${adjustToHeight}px`;
  this.textarea.style.maxHeight = `${maxheight}px`;
  this.textarea.style.minHeight = `${minHeight}px`;
  this.textarea.style.overflow = "hidden";
};
_labelTemplate2 = new WeakSet();
labelTemplate_get2 = function() {
  if (!this.label)
    return nothing;
  return html`
      <div class="label-container">
        <label part="label">${this.label}</label>
      </div>
    `;
};
_characterCountTemplate = new WeakSet();
characterCountTemplate_get = function() {
  if (!this.showCharacterCountdown || this.error)
    return nothing;
  return html`
      <div>
        ${this._charactersRemaining < 0 ? html`
              <div class="footer-container error-text">
                <omni-icon icon-id="omni:informative:error"></omni-icon>
                <span> Too many characters (<span class="too-many">${this._charactersRemaining}</span>) </span>
              </div>
            ` : html` <div class="footer-container">
              <span>${this._charactersRemaining} characters remaining</span>
            </div>`}
      </div>
    `;
};
_footerTemplate4 = new WeakSet();
footerTemplate_get4 = function() {
  if (this.hidefooter)
    return nothing;
  const footerSpacer = html`<div class="footer-spacer">${__privateGet(this, _characterCountTemplate, characterCountTemplate_get)}</div>`;
  if (!this.error)
    return footerSpacer;
  if (this.error) {
    return html`
        <div class="footer-container error-text">
          <omni-icon icon-id="omni:informative:error"></omni-icon>
          <span>${this.error}</span>
        </div>
      `;
  }
};
__decorateClass31([
  property({ type: String, reflect: true })
], OmniTextarea.prototype, "placeholder", 2);
__decorateClass31([
  property({ type: String })
], OmniTextarea.prototype, "value", 2);
__decorateClass31([
  property({ type: String })
], OmniTextarea.prototype, "name", 2);
__decorateClass31([
  property({ type: String })
], OmniTextarea.prototype, "label", 2);
__decorateClass31([
  property({ type: String, reflect: true })
], OmniTextarea.prototype, "error", 2);
__decorateClass31([
  property({ type: String })
], OmniTextarea.prototype, "valueMissingMessage", 2);
__decorateClass31([
  property({ type: Boolean, reflect: true })
], OmniTextarea.prototype, "hidefooter", 2);
__decorateClass31([
  property({ type: Boolean, reflect: true })
], OmniTextarea.prototype, "resize", 2);
__decorateClass31([
  property({ type: Number })
], OmniTextarea.prototype, "rows", 2);
__decorateClass31([
  property({ type: Number })
], OmniTextarea.prototype, "maxRows", 2);
__decorateClass31([
  property({ type: Number })
], OmniTextarea.prototype, "characterCount", 2);
__decorateClass31([
  property({ type: Boolean, reflect: true })
], OmniTextarea.prototype, "showCharacterCountdown", 2);
__decorateClass31([
  state()
], OmniTextarea.prototype, "_charactersRemaining", 2);
__decorateClass31([
  query("textarea")
], OmniTextarea.prototype, "textarea", 2);
OmniElement.register("omni-textarea", OmniTextarea);

// node_modules/marked/lib/marked.esm.js
function _getDefaults() {
  return {
    async: false,
    breaks: false,
    extensions: null,
    gfm: true,
    hooks: null,
    pedantic: false,
    renderer: null,
    silent: false,
    tokenizer: null,
    walkTokens: null
  };
}
var _defaults = _getDefaults();
function changeDefaults(newDefaults) {
  _defaults = newDefaults;
}
var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, "g");
var escapeTestNoEncode = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, "g");
var escapeReplacements = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;"
};
var getEscapeReplacement = (ch) => escapeReplacements[ch];
function escape(html4, encode) {
  if (encode) {
    if (escapeTest.test(html4)) {
      return html4.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html4)) {
      return html4.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }
  return html4;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
function unescape(html4) {
  return html4.replace(unescapeTest, (_, n) => {
    n = n.toLowerCase();
    if (n === "colon")
      return ":";
    if (n.charAt(0) === "#") {
      return n.charAt(1) === "x" ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }
    return "";
  });
}
var caret = /(^|[^\[])\^/g;
function edit(regex, opt) {
  regex = typeof regex === "string" ? regex : regex.source;
  opt = opt || "";
  const obj = {
    replace: (name, val) => {
      val = typeof val === "object" && "source" in val ? val.source : val;
      val = val.replace(caret, "$1");
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: () => {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
function cleanUrl(href) {
  try {
    href = encodeURI(href).replace(/%25/g, "%");
  } catch (e) {
    return null;
  }
  return href;
}
var noopTest = { exec: () => null };
function splitCells(tableRow, count) {
  const row = tableRow.replace(/\|/g, (match, offset, str) => {
    let escaped = false;
    let curr = offset;
    while (--curr >= 0 && str[curr] === "\\")
      escaped = !escaped;
    if (escaped) {
      return "|";
    } else {
      return " |";
    }
  }), cells = row.split(/ \|/);
  let i = 0;
  if (!cells[0].trim()) {
    cells.shift();
  }
  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }
  if (count) {
    if (cells.length > count) {
      cells.splice(count);
    } else {
      while (cells.length < count)
        cells.push("");
    }
  }
  for (; i < cells.length; i++) {
    cells[i] = cells[i].trim().replace(/\\\|/g, "|");
  }
  return cells;
}
function rtrim(str, c, invert) {
  const l = str.length;
  if (l === 0) {
    return "";
  }
  let suffLen = 0;
  while (suffLen < l) {
    const currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }
  let level = 0;
  for (let i = 0; i < str.length; i++) {
    if (str[i] === "\\") {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;
      if (level < 0) {
        return i;
      }
    }
  }
  return -1;
}
function outputLink(cap, link, raw, lexer2) {
  const href = link.href;
  const title = link.title ? escape(link.title) : null;
  const text2 = cap[1].replace(/\\([\[\]])/g, "$1");
  if (cap[0].charAt(0) !== "!") {
    lexer2.state.inLink = true;
    const token = {
      type: "link",
      raw,
      href,
      title,
      text: text2,
      tokens: lexer2.inlineTokens(text2)
    };
    lexer2.state.inLink = false;
    return token;
  }
  return {
    type: "image",
    raw,
    href,
    title,
    text: escape(text2)
  };
}
function indentCodeCompensation(raw, text2) {
  const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) {
    return text2;
  }
  const indentToCode = matchIndentToCode[1];
  return text2.split("\n").map((node) => {
    const matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) {
      return node;
    }
    const [indentInNode] = matchIndentInNode;
    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }
    return node;
  }).join("\n");
}
var _Tokenizer = class {
  constructor(options2) {
    __publicField(this, "options");
    // TODO: Fix this rules type
    __publicField(this, "rules");
    __publicField(this, "lexer");
    this.options = options2 || _defaults;
  }
  space(src) {
    const cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) {
      return {
        type: "space",
        raw: cap[0]
      };
    }
  }
  code(src) {
    const cap = this.rules.block.code.exec(src);
    if (cap) {
      const text2 = cap[0].replace(/^ {1,4}/gm, "");
      return {
        type: "code",
        raw: cap[0],
        codeBlockStyle: "indented",
        text: !this.options.pedantic ? rtrim(text2, "\n") : text2
      };
    }
  }
  fences(src) {
    const cap = this.rules.block.fences.exec(src);
    if (cap) {
      const raw = cap[0];
      const text2 = indentCodeCompensation(raw, cap[3] || "");
      return {
        type: "code",
        raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, "$1") : cap[2],
        text: text2
      };
    }
  }
  heading(src) {
    const cap = this.rules.block.heading.exec(src);
    if (cap) {
      let text2 = cap[2].trim();
      if (/#$/.test(text2)) {
        const trimmed = rtrim(text2, "#");
        if (this.options.pedantic) {
          text2 = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          text2 = trimmed.trim();
        }
      }
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[1].length,
        text: text2,
        tokens: this.lexer.inline(text2)
      };
    }
  }
  hr(src) {
    const cap = this.rules.block.hr.exec(src);
    if (cap) {
      return {
        type: "hr",
        raw: cap[0]
      };
    }
  }
  blockquote(src) {
    const cap = this.rules.block.blockquote.exec(src);
    if (cap) {
      const text2 = rtrim(cap[0].replace(/^ *>[ \t]?/gm, ""), "\n");
      const top = this.lexer.state.top;
      this.lexer.state.top = true;
      const tokens = this.lexer.blockTokens(text2);
      this.lexer.state.top = top;
      return {
        type: "blockquote",
        raw: cap[0],
        tokens,
        text: text2
      };
    }
  }
  list(src) {
    let cap = this.rules.block.list.exec(src);
    if (cap) {
      let bull = cap[1].trim();
      const isordered = bull.length > 1;
      const list = {
        type: "list",
        raw: "",
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : "",
        loose: false,
        items: []
      };
      bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
      if (this.options.pedantic) {
        bull = isordered ? bull : "[*+-]";
      }
      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
      let raw = "";
      let itemContents = "";
      let endsWithBlankLine = false;
      while (src) {
        let endEarly = false;
        if (!(cap = itemRegex.exec(src))) {
          break;
        }
        if (this.rules.block.hr.test(src)) {
          break;
        }
        raw = cap[0];
        src = src.substring(raw.length);
        let line = cap[2].split("\n", 1)[0].replace(/^\t+/, (t) => " ".repeat(3 * t.length));
        let nextLine = src.split("\n", 1)[0];
        let indent = 0;
        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimStart();
        } else {
          indent = cap[2].search(/[^ ]/);
          indent = indent > 4 ? 1 : indent;
          itemContents = line.slice(indent);
          indent += cap[1].length;
        }
        let blankLine = false;
        if (!line && /^ *$/.test(nextLine)) {
          raw += nextLine + "\n";
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }
        if (!endEarly) {
          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ 	][^\\n]*)?(?:\\n|$))`);
          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\`\`\`|~~~)`);
          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);
          while (src) {
            const rawLine = src.split("\n", 1)[0];
            nextLine = rawLine;
            if (this.options.pedantic) {
              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
            }
            if (fencesBeginRegex.test(nextLine)) {
              break;
            }
            if (headingBeginRegex.test(nextLine)) {
              break;
            }
            if (nextBulletRegex.test(nextLine)) {
              break;
            }
            if (hrRegex.test(src)) {
              break;
            }
            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {
              itemContents += "\n" + nextLine.slice(indent);
            } else {
              if (blankLine) {
                break;
              }
              if (line.search(/[^ ]/) >= 4) {
                break;
              }
              if (fencesBeginRegex.test(line)) {
                break;
              }
              if (headingBeginRegex.test(line)) {
                break;
              }
              if (hrRegex.test(line)) {
                break;
              }
              itemContents += "\n" + nextLine;
            }
            if (!blankLine && !nextLine.trim()) {
              blankLine = true;
            }
            raw += rawLine + "\n";
            src = src.substring(rawLine.length + 1);
            line = nextLine.slice(indent);
          }
        }
        if (!list.loose) {
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        }
        let istask = null;
        let ischecked;
        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) {
            ischecked = istask[0] !== "[ ] ";
            itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
          }
        }
        list.items.push({
          type: "list_item",
          raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents,
          tokens: []
        });
        list.raw += raw;
      }
      list.items[list.items.length - 1].raw = raw.trimEnd();
      list.items[list.items.length - 1].text = itemContents.trimEnd();
      list.raw = list.raw.trimEnd();
      for (let i = 0; i < list.items.length; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        if (!list.loose) {
          const spacers = list.items[i].tokens.filter((t) => t.type === "space");
          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some((t) => /\n.*\n/.test(t.raw));
          list.loose = hasMultipleLineBreaks;
        }
      }
      if (list.loose) {
        for (let i = 0; i < list.items.length; i++) {
          list.items[i].loose = true;
        }
      }
      return list;
    }
  }
  html(src) {
    const cap = this.rules.block.html.exec(src);
    if (cap) {
      const token = {
        type: "html",
        block: true,
        raw: cap[0],
        pre: cap[1] === "pre" || cap[1] === "script" || cap[1] === "style",
        text: cap[0]
      };
      return token;
    }
  }
  def(src) {
    const cap = this.rules.block.def.exec(src);
    if (cap) {
      const tag = cap[1].toLowerCase().replace(/\s+/g, " ");
      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, "$1").replace(this.rules.inline._escapes, "$1") : "";
      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, "$1") : cap[3];
      return {
        type: "def",
        tag,
        raw: cap[0],
        href,
        title
      };
    }
  }
  table(src) {
    const cap = this.rules.block.table.exec(src);
    if (cap) {
      if (!/[:|]/.test(cap[2])) {
        return;
      }
      const item = {
        type: "table",
        raw: cap[0],
        header: splitCells(cap[1]).map((c) => {
          return { text: c, tokens: [] };
        }),
        align: cap[2].replace(/^\||\| *$/g, "").split("|"),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
      };
      if (item.header.length === item.align.length) {
        let l = item.align.length;
        let i, j, k, row;
        for (i = 0; i < l; i++) {
          const align = item.align[i];
          if (align) {
            if (/^ *-+: *$/.test(align)) {
              item.align[i] = "right";
            } else if (/^ *:-+: *$/.test(align)) {
              item.align[i] = "center";
            } else if (/^ *:-+ *$/.test(align)) {
              item.align[i] = "left";
            } else {
              item.align[i] = null;
            }
          }
        }
        l = item.rows.length;
        for (i = 0; i < l; i++) {
          item.rows[i] = splitCells(item.rows[i], item.header.length).map((c) => {
            return { text: c, tokens: [] };
          });
        }
        l = item.header.length;
        for (j = 0; j < l; j++) {
          item.header[j].tokens = this.lexer.inline(item.header[j].text);
        }
        l = item.rows.length;
        for (j = 0; j < l; j++) {
          row = item.rows[j];
          for (k = 0; k < row.length; k++) {
            row[k].tokens = this.lexer.inline(row[k].text);
          }
        }
        return item;
      }
    }
  }
  lheading(src) {
    const cap = this.rules.block.lheading.exec(src);
    if (cap) {
      return {
        type: "heading",
        raw: cap[0],
        depth: cap[2].charAt(0) === "=" ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
      };
    }
  }
  paragraph(src) {
    const cap = this.rules.block.paragraph.exec(src);
    if (cap) {
      const text2 = cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1];
      return {
        type: "paragraph",
        raw: cap[0],
        text: text2,
        tokens: this.lexer.inline(text2)
      };
    }
  }
  text(src) {
    const cap = this.rules.block.text.exec(src);
    if (cap) {
      return {
        type: "text",
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
      };
    }
  }
  escape(src) {
    const cap = this.rules.inline.escape.exec(src);
    if (cap) {
      return {
        type: "escape",
        raw: cap[0],
        text: escape(cap[1])
      };
    }
  }
  tag(src) {
    const cap = this.rules.inline.tag.exec(src);
    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }
      return {
        type: "html",
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        block: false,
        text: cap[0]
      };
    }
  }
  link(src) {
    const cap = this.rules.inline.link.exec(src);
    if (cap) {
      const trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        if (!/>$/.test(trimmedUrl)) {
          return;
        }
        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        const lastParenIndex = findClosingBracket(cap[2], "()");
        if (lastParenIndex > -1) {
          const start = cap[0].indexOf("!") === 0 ? 5 : 4;
          const linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = "";
        }
      }
      let href = cap[2];
      let title = "";
      if (this.options.pedantic) {
        const link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : "";
      }
      href = href.trim();
      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }
      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, "$1") : href,
        title: title ? title.replace(this.rules.inline._escapes, "$1") : title
      }, cap[0], this.lexer);
    }
  }
  reflink(src, links) {
    let cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      let link = (cap[2] || cap[1]).replace(/\s+/g, " ");
      link = links[link.toLowerCase()];
      if (!link) {
        const text2 = cap[0].charAt(0);
        return {
          type: "text",
          raw: text2,
          text: text2
        };
      }
      return outputLink(cap, link, cap[0], this.lexer);
    }
  }
  emStrong(src, maskedSrc, prevChar = "") {
    let match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match)
      return;
    if (match[3] && prevChar.match(/[\p{L}\p{N}]/u))
      return;
    const nextChar = match[1] || match[2] || "";
    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {
      const lLength = [...match[0]].length - 1;
      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
      const endReg = match[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim)
          continue;
        rLength = [...rDelim].length;
        if (match[3] || match[4]) {
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue;
          }
        }
        delimTotal -= rLength;
        if (delimTotal > 0)
          continue;
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        const lastCharLength = [...match[0]][0].length;
        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);
        if (Math.min(lLength, rLength) % 2) {
          const text3 = raw.slice(1, -1);
          return {
            type: "em",
            raw,
            text: text3,
            tokens: this.lexer.inlineTokens(text3)
          };
        }
        const text2 = raw.slice(2, -2);
        return {
          type: "strong",
          raw,
          text: text2,
          tokens: this.lexer.inlineTokens(text2)
        };
      }
    }
  }
  codespan(src) {
    const cap = this.rules.inline.code.exec(src);
    if (cap) {
      let text2 = cap[2].replace(/\n/g, " ");
      const hasNonSpaceChars = /[^ ]/.test(text2);
      const hasSpaceCharsOnBothEnds = /^ /.test(text2) && / $/.test(text2);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text2 = text2.substring(1, text2.length - 1);
      }
      text2 = escape(text2, true);
      return {
        type: "codespan",
        raw: cap[0],
        text: text2
      };
    }
  }
  br(src) {
    const cap = this.rules.inline.br.exec(src);
    if (cap) {
      return {
        type: "br",
        raw: cap[0]
      };
    }
  }
  del(src) {
    const cap = this.rules.inline.del.exec(src);
    if (cap) {
      return {
        type: "del",
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
      };
    }
  }
  autolink(src) {
    const cap = this.rules.inline.autolink.exec(src);
    if (cap) {
      let text2, href;
      if (cap[2] === "@") {
        text2 = escape(cap[1]);
        href = "mailto:" + text2;
      } else {
        text2 = escape(cap[1]);
        href = text2;
      }
      return {
        type: "link",
        raw: cap[0],
        text: text2,
        href,
        tokens: [
          {
            type: "text",
            raw: text2,
            text: text2
          }
        ]
      };
    }
  }
  url(src) {
    let cap;
    if (cap = this.rules.inline.url.exec(src)) {
      let text2, href;
      if (cap[2] === "@") {
        text2 = escape(cap[0]);
        href = "mailto:" + text2;
      } else {
        let prevCapZero;
        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);
        text2 = escape(cap[0]);
        if (cap[1] === "www.") {
          href = "http://" + cap[0];
        } else {
          href = cap[0];
        }
      }
      return {
        type: "link",
        raw: cap[0],
        text: text2,
        href,
        tokens: [
          {
            type: "text",
            raw: text2,
            text: text2
          }
        ]
      };
    }
  }
  inlineText(src) {
    const cap = this.rules.inline.text.exec(src);
    if (cap) {
      let text2;
      if (this.lexer.state.inRawBlock) {
        text2 = cap[0];
      } else {
        text2 = escape(cap[0]);
      }
      return {
        type: "text",
        raw: cap[0],
        text: text2
      };
    }
  }
};
var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
  def: /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^(?!bull )((?:.|\n(?!\s*?\n|bull ))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  // regex template, placeholders will be replaced according to different paragraph
  // interruption rules of commonmark and the original markdown spec:
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace("label", block._label).replace("title", block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace("bull", block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block.def.source + ")").getRegex();
block._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, "i").replace("comment", block._comment).replace("tag", block._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.lheading = edit(block.lheading).replace(/bull/g, block.bullet).getRegex();
block.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.blockquote = edit(block.blockquote).replace("paragraph", block.paragraph).getRegex();
block.normal = { ...block };
block.gfm = {
  ...block.normal,
  table: "^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
  // Cells
};
block.gfm.table = edit(block.gfm.table).replace("hr", block.hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.gfm.paragraph = edit(block._paragraph).replace("hr", block.hr).replace("heading", " {0,3}#{1,6}(?:\\s|$)").replace("|lheading", "").replace("table", block.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block._tag).getRegex();
block.pedantic = {
  ...block.normal,
  html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(block.normal._paragraph).replace("hr", block.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
};
var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: "reflink|nolink(?!\\()",
  emStrong: {
    lDelim: /^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,
    //         (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
    //         | Skip orphan inside strong      | Consume to delim | (1) #***              | (2) a***#, a***                    | (3) #***a, ***a                  | (4) ***#                 | (5) #***#                         | (6) a***a
    rDelimAst: /^[^_*]*?__[^_*]*?\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\*)[punct](\*+)(?=[\s]|$)|[^punct\s](\*+)(?!\*)(?=[punct\s]|$)|(?!\*)[punct\s](\*+)(?=[^punct\s])|[\s](\*+)(?!\*)(?=[punct])|(?!\*)[punct](\*+)(?!\*)(?=[punct])|[^punct\s](\*+)(?=[^punct\s])/,
    rDelimUnd: /^[^_*]*?\*\*[^_*]*?_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|(?!_)[punct](_+)(?=[\s]|$)|[^punct\s](_+)(?!_)(?=[punct\s]|$)|(?!_)[punct\s](_+)(?=[^punct\s])|[\s](_+)(?!_)(?=[punct])|(?!_)[punct](_+)(?!_)(?=[punct])/
    // ^- Not allowed for _
  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^((?![*_])[\spunctuation])/
};
inline._punctuation = "\\p{P}$+<=>`^|~";
inline.punctuation = edit(inline.punctuation, "u").replace(/punctuation/g, inline._punctuation).getRegex();
inline.blockSkip = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
inline.anyPunctuation = /\\[punct]/g;
inline._escapes = /\\([punct])/g;
inline._comment = edit(block._comment).replace("(?:-->|$)", "-->").getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim, "u").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline.anyPunctuation = edit(inline.anyPunctuation, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = edit(inline._escapes, "gu").replace(/punct/g, inline._punctuation).getRegex();
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block._label).getRegex();
inline.nolink = edit(inline.nolink).replace("ref", block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
inline.normal = { ...inline };
inline.pedantic = {
  ...inline.normal,
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
};
inline.gfm = {
  ...inline.normal,
  escape: edit(inline.escape).replace("])", "~|])").getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
};
inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
inline.breaks = {
  ...inline.gfm,
  br: edit(inline.br).replace("{2,}", "*").getRegex(),
  text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
};
var _Lexer = class __Lexer {
  constructor(options2) {
    __publicField(this, "tokens");
    __publicField(this, "options");
    __publicField(this, "state");
    __publicField(this, "tokenizer");
    __publicField(this, "inlineQueue");
    this.tokens = [];
    this.tokens.links = /* @__PURE__ */ Object.create(null);
    this.options = options2 || _defaults;
    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    const rules = {
      block: block.normal,
      inline: inline.normal
    };
    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;
      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }
    this.tokenizer.rules = rules;
  }
  /**
   * Expose Rules
   */
  static get rules() {
    return {
      block,
      inline
    };
  }
  /**
   * Static Lex Method
   */
  static lex(src, options2) {
    const lexer2 = new __Lexer(options2);
    return lexer2.lex(src);
  }
  /**
   * Static Lex Inline Method
   */
  static lexInline(src, options2) {
    const lexer2 = new __Lexer(options2);
    return lexer2.inlineTokens(src);
  }
  /**
   * Preprocessing
   */
  lex(src) {
    src = src.replace(/\r\n|\r/g, "\n");
    this.blockTokens(src, this.tokens);
    let next;
    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }
    return this.tokens;
  }
  blockTokens(src, tokens = []) {
    if (this.options.pedantic) {
      src = src.replace(/\t/g, "    ").replace(/^ +$/gm, "");
    } else {
      src = src.replace(/^( *)(\t+)/gm, (_, leading, tabs) => {
        return leading + "    ".repeat(tabs.length);
      });
    }
    let token;
    let lastToken;
    let cutSrc;
    let lastParagraphClipped;
    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) {
          tokens[tokens.length - 1].raw += "\n";
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }
        continue;
      }
      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startBlock.forEach((getStartIndex) => {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === "paragraph") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      }
      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += "\n" + token.raw;
          lastToken.text += "\n" + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    this.state.top = true;
    return tokens;
  }
  inline(src, tokens = []) {
    this.inlineQueue.push({ src, tokens });
    return tokens;
  }
  /**
   * Lexing/Compiling
   */
  inlineTokens(src, tokens = []) {
    let token, lastToken, cutSrc;
    let maskedSrc = src;
    let match;
    let keepPrevChar, prevChar;
    if (this.tokens.links) {
      const links = Object.keys(this.tokens.links);
      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf("[") + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    }
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "[" + "a".repeat(match[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    }
    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
    }
    while (src) {
      if (!keepPrevChar) {
        prevChar = "";
      }
      keepPrevChar = false;
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }
        return false;
      })) {
        continue;
      }
      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === "text" && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (token = this.tokenizer.autolink(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      if (!this.state.inLink && (token = this.tokenizer.url(src))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      }
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) {
        let startIndex = Infinity;
        const tempSrc = src.slice(1);
        let tempStart;
        this.options.extensions.startInline.forEach((getStartIndex) => {
          tempStart = getStartIndex.call({ lexer: this }, tempSrc);
          if (typeof tempStart === "number" && tempStart >= 0) {
            startIndex = Math.min(startIndex, tempStart);
          }
        });
        if (startIndex < Infinity && startIndex >= 0) {
          cutSrc = src.substring(0, startIndex + 1);
        }
      }
      if (token = this.tokenizer.inlineText(cutSrc)) {
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== "_") {
          prevChar = token.raw.slice(-1);
        }
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === "text") {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }
        continue;
      }
      if (src) {
        const errMsg = "Infinite loop on byte: " + src.charCodeAt(0);
        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }
    return tokens;
  }
};
var _Renderer = class {
  constructor(options2) {
    __publicField(this, "options");
    this.options = options2 || _defaults;
  }
  code(code, infostring, escaped) {
    var _a7;
    const lang = (_a7 = (infostring || "").match(/^\S*/)) == null ? void 0 : _a7[0];
    code = code.replace(/\n$/, "") + "\n";
    if (!lang) {
      return "<pre><code>" + (escaped ? code : escape(code, true)) + "</code></pre>\n";
    }
    return '<pre><code class="language-' + escape(lang) + '">' + (escaped ? code : escape(code, true)) + "</code></pre>\n";
  }
  blockquote(quote) {
    return `<blockquote>
${quote}</blockquote>
`;
  }
  html(html4, block2) {
    return html4;
  }
  heading(text2, level, raw) {
    return `<h${level}>${text2}</h${level}>
`;
  }
  hr() {
    return "<hr>\n";
  }
  list(body, ordered, start) {
    const type = ordered ? "ol" : "ul";
    const startatt = ordered && start !== 1 ? ' start="' + start + '"' : "";
    return "<" + type + startatt + ">\n" + body + "</" + type + ">\n";
  }
  listitem(text2, task, checked) {
    return `<li>${text2}</li>
`;
  }
  checkbox(checked) {
    return "<input " + (checked ? 'checked="" ' : "") + 'disabled="" type="checkbox">';
  }
  paragraph(text2) {
    return `<p>${text2}</p>
`;
  }
  table(header, body) {
    if (body)
      body = `<tbody>${body}</tbody>`;
    return "<table>\n<thead>\n" + header + "</thead>\n" + body + "</table>\n";
  }
  tablerow(content) {
    return `<tr>
${content}</tr>
`;
  }
  tablecell(content, flags) {
    const type = flags.header ? "th" : "td";
    const tag = flags.align ? `<${type} align="${flags.align}">` : `<${type}>`;
    return tag + content + `</${type}>
`;
  }
  /**
   * span level renderer
   */
  strong(text2) {
    return `<strong>${text2}</strong>`;
  }
  em(text2) {
    return `<em>${text2}</em>`;
  }
  codespan(text2) {
    return `<code>${text2}</code>`;
  }
  br() {
    return "<br>";
  }
  del(text2) {
    return `<del>${text2}</del>`;
  }
  link(href, title, text2) {
    const cleanHref = cleanUrl(href);
    if (cleanHref === null) {
      return text2;
    }
    href = cleanHref;
    let out = '<a href="' + href + '"';
    if (title) {
      out += ' title="' + title + '"';
    }
    out += ">" + text2 + "</a>";
    return out;
  }
  image(href, title, text2) {
    const cleanHref = cleanUrl(href);
    if (cleanHref === null) {
      return text2;
    }
    href = cleanHref;
    let out = `<img src="${href}" alt="${text2}"`;
    if (title) {
      out += ` title="${title}"`;
    }
    out += ">";
    return out;
  }
  text(text2) {
    return text2;
  }
};
var _TextRenderer = class {
  // no need for block level renderers
  strong(text2) {
    return text2;
  }
  em(text2) {
    return text2;
  }
  codespan(text2) {
    return text2;
  }
  del(text2) {
    return text2;
  }
  html(text2) {
    return text2;
  }
  text(text2) {
    return text2;
  }
  link(href, title, text2) {
    return "" + text2;
  }
  image(href, title, text2) {
    return "" + text2;
  }
  br() {
    return "";
  }
};
var _Parser = class __Parser {
  constructor(options2) {
    __publicField(this, "options");
    __publicField(this, "renderer");
    __publicField(this, "textRenderer");
    this.options = options2 || _defaults;
    this.options.renderer = this.options.renderer || new _Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new _TextRenderer();
  }
  /**
   * Static Parse Method
   */
  static parse(tokens, options2) {
    const parser2 = new __Parser(options2);
    return parser2.parse(tokens);
  }
  /**
   * Static Parse Inline Method
   */
  static parseInline(tokens, options2) {
    const parser2 = new __Parser(options2);
    return parser2.parseInline(tokens);
  }
  /**
   * Parse Loop
   */
  parse(tokens, top = true) {
    let out = "";
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        const genericToken = token;
        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);
        if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(genericToken.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "space": {
          continue;
        }
        case "hr": {
          out += this.renderer.hr();
          continue;
        }
        case "heading": {
          const headingToken = token;
          out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));
          continue;
        }
        case "code": {
          const codeToken = token;
          out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);
          continue;
        }
        case "table": {
          const tableToken = token;
          let header = "";
          let cell = "";
          for (let j = 0; j < tableToken.header.length; j++) {
            cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });
          }
          header += this.renderer.tablerow(cell);
          let body = "";
          for (let j = 0; j < tableToken.rows.length; j++) {
            const row = tableToken.rows[j];
            cell = "";
            for (let k = 0; k < row.length; k++) {
              cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });
            }
            body += this.renderer.tablerow(cell);
          }
          out += this.renderer.table(header, body);
          continue;
        }
        case "blockquote": {
          const blockquoteToken = token;
          const body = this.parse(blockquoteToken.tokens);
          out += this.renderer.blockquote(body);
          continue;
        }
        case "list": {
          const listToken = token;
          const ordered = listToken.ordered;
          const start = listToken.start;
          const loose = listToken.loose;
          let body = "";
          for (let j = 0; j < listToken.items.length; j++) {
            const item = listToken.items[j];
            const checked = item.checked;
            const task = item.task;
            let itemBody = "";
            if (item.task) {
              const checkbox = this.renderer.checkbox(!!checked);
              if (loose) {
                if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                  item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                    item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                  }
                } else {
                  item.tokens.unshift({
                    type: "text",
                    text: checkbox + " "
                  });
                }
              } else {
                itemBody += checkbox + " ";
              }
            }
            itemBody += this.parse(item.tokens, loose);
            body += this.renderer.listitem(itemBody, task, !!checked);
          }
          out += this.renderer.list(body, ordered, start);
          continue;
        }
        case "html": {
          const htmlToken = token;
          out += this.renderer.html(htmlToken.text, htmlToken.block);
          continue;
        }
        case "paragraph": {
          const paragraphToken = token;
          out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));
          continue;
        }
        case "text": {
          let textToken = token;
          let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;
          while (i + 1 < tokens.length && tokens[i + 1].type === "text") {
            textToken = tokens[++i];
            body += "\n" + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);
          }
          out += top ? this.renderer.paragraph(body) : body;
          continue;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return "";
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
  /**
   * Parse Inline Tokens
   */
  parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    let out = "";
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);
        if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token.type)) {
          out += ret || "";
          continue;
        }
      }
      switch (token.type) {
        case "escape": {
          const escapeToken = token;
          out += renderer.text(escapeToken.text);
          break;
        }
        case "html": {
          const tagToken = token;
          out += renderer.html(tagToken.text);
          break;
        }
        case "link": {
          const linkToken = token;
          out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));
          break;
        }
        case "image": {
          const imageToken = token;
          out += renderer.image(imageToken.href, imageToken.title, imageToken.text);
          break;
        }
        case "strong": {
          const strongToken = token;
          out += renderer.strong(this.parseInline(strongToken.tokens, renderer));
          break;
        }
        case "em": {
          const emToken = token;
          out += renderer.em(this.parseInline(emToken.tokens, renderer));
          break;
        }
        case "codespan": {
          const codespanToken = token;
          out += renderer.codespan(codespanToken.text);
          break;
        }
        case "br": {
          out += renderer.br();
          break;
        }
        case "del": {
          const delToken = token;
          out += renderer.del(this.parseInline(delToken.tokens, renderer));
          break;
        }
        case "text": {
          const textToken = token;
          out += renderer.text(textToken.text);
          break;
        }
        default: {
          const errMsg = 'Token with "' + token.type + '" type was not found.';
          if (this.options.silent) {
            console.error(errMsg);
            return "";
          } else {
            throw new Error(errMsg);
          }
        }
      }
    }
    return out;
  }
};
var _Hooks = class {
  constructor(options2) {
    __publicField(this, "options");
    this.options = options2 || _defaults;
  }
  /**
   * Process markdown before marked
   */
  preprocess(markdown) {
    return markdown;
  }
  /**
   * Process HTML after marked is finished
   */
  postprocess(html4) {
    return html4;
  }
};
__publicField(_Hooks, "passThroughHooks", /* @__PURE__ */ new Set([
  "preprocess",
  "postprocess"
]));
var _parseMarkdown, parseMarkdown_fn, _onError, onError_fn;
var Marked = class {
  constructor(...args) {
    __privateAdd(this, _parseMarkdown);
    __privateAdd(this, _onError);
    __publicField(this, "defaults", _getDefaults());
    __publicField(this, "options", this.setOptions);
    __publicField(this, "parse", __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lex, _Parser.parse));
    __publicField(this, "parseInline", __privateMethod(this, _parseMarkdown, parseMarkdown_fn).call(this, _Lexer.lexInline, _Parser.parseInline));
    __publicField(this, "Parser", _Parser);
    __publicField(this, "Renderer", _Renderer);
    __publicField(this, "TextRenderer", _TextRenderer);
    __publicField(this, "Lexer", _Lexer);
    __publicField(this, "Tokenizer", _Tokenizer);
    __publicField(this, "Hooks", _Hooks);
    this.use(...args);
  }
  /**
   * Run callback for every token
   */
  walkTokens(tokens, callback) {
    var _a7, _b2;
    let values = [];
    for (const token of tokens) {
      values = values.concat(callback.call(this, token));
      switch (token.type) {
        case "table": {
          const tableToken = token;
          for (const cell of tableToken.header) {
            values = values.concat(this.walkTokens(cell.tokens, callback));
          }
          for (const row of tableToken.rows) {
            for (const cell of row) {
              values = values.concat(this.walkTokens(cell.tokens, callback));
            }
          }
          break;
        }
        case "list": {
          const listToken = token;
          values = values.concat(this.walkTokens(listToken.items, callback));
          break;
        }
        default: {
          const genericToken = token;
          if ((_b2 = (_a7 = this.defaults.extensions) == null ? void 0 : _a7.childTokens) == null ? void 0 : _b2[genericToken.type]) {
            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {
              values = values.concat(this.walkTokens(genericToken[childTokens], callback));
            });
          } else if (genericToken.tokens) {
            values = values.concat(this.walkTokens(genericToken.tokens, callback));
          }
        }
      }
    }
    return values;
  }
  use(...args) {
    const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };
    args.forEach((pack) => {
      const opts = { ...pack };
      opts.async = this.defaults.async || opts.async || false;
      if (pack.extensions) {
        pack.extensions.forEach((ext) => {
          if (!ext.name) {
            throw new Error("extension name required");
          }
          if ("renderer" in ext) {
            const prevRenderer = extensions.renderers[ext.name];
            if (prevRenderer) {
              extensions.renderers[ext.name] = function(...args2) {
                let ret = ext.renderer.apply(this, args2);
                if (ret === false) {
                  ret = prevRenderer.apply(this, args2);
                }
                return ret;
              };
            } else {
              extensions.renderers[ext.name] = ext.renderer;
            }
          }
          if ("tokenizer" in ext) {
            if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
              throw new Error("extension level must be 'block' or 'inline'");
            }
            const extLevel = extensions[ext.level];
            if (extLevel) {
              extLevel.unshift(ext.tokenizer);
            } else {
              extensions[ext.level] = [ext.tokenizer];
            }
            if (ext.start) {
              if (ext.level === "block") {
                if (extensions.startBlock) {
                  extensions.startBlock.push(ext.start);
                } else {
                  extensions.startBlock = [ext.start];
                }
              } else if (ext.level === "inline") {
                if (extensions.startInline) {
                  extensions.startInline.push(ext.start);
                } else {
                  extensions.startInline = [ext.start];
                }
              }
            }
          }
          if ("childTokens" in ext && ext.childTokens) {
            extensions.childTokens[ext.name] = ext.childTokens;
          }
        });
        opts.extensions = extensions;
      }
      if (pack.renderer) {
        const renderer = this.defaults.renderer || new _Renderer(this.defaults);
        for (const prop in pack.renderer) {
          const rendererFunc = pack.renderer[prop];
          const rendererKey = prop;
          const prevRenderer = renderer[rendererKey];
          renderer[rendererKey] = (...args2) => {
            let ret = rendererFunc.apply(renderer, args2);
            if (ret === false) {
              ret = prevRenderer.apply(renderer, args2);
            }
            return ret || "";
          };
        }
        opts.renderer = renderer;
      }
      if (pack.tokenizer) {
        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);
        for (const prop in pack.tokenizer) {
          const tokenizerFunc = pack.tokenizer[prop];
          const tokenizerKey = prop;
          const prevTokenizer = tokenizer[tokenizerKey];
          tokenizer[tokenizerKey] = (...args2) => {
            let ret = tokenizerFunc.apply(tokenizer, args2);
            if (ret === false) {
              ret = prevTokenizer.apply(tokenizer, args2);
            }
            return ret;
          };
        }
        opts.tokenizer = tokenizer;
      }
      if (pack.hooks) {
        const hooks = this.defaults.hooks || new _Hooks();
        for (const prop in pack.hooks) {
          const hooksFunc = pack.hooks[prop];
          const hooksKey = prop;
          const prevHook = hooks[hooksKey];
          if (_Hooks.passThroughHooks.has(prop)) {
            hooks[hooksKey] = (arg) => {
              if (this.defaults.async) {
                return Promise.resolve(hooksFunc.call(hooks, arg)).then((ret2) => {
                  return prevHook.call(hooks, ret2);
                });
              }
              const ret = hooksFunc.call(hooks, arg);
              return prevHook.call(hooks, ret);
            };
          } else {
            hooks[hooksKey] = (...args2) => {
              let ret = hooksFunc.apply(hooks, args2);
              if (ret === false) {
                ret = prevHook.apply(hooks, args2);
              }
              return ret;
            };
          }
        }
        opts.hooks = hooks;
      }
      if (pack.walkTokens) {
        const walkTokens2 = this.defaults.walkTokens;
        const packWalktokens = pack.walkTokens;
        opts.walkTokens = function(token) {
          let values = [];
          values.push(packWalktokens.call(this, token));
          if (walkTokens2) {
            values = values.concat(walkTokens2.call(this, token));
          }
          return values;
        };
      }
      this.defaults = { ...this.defaults, ...opts };
    });
    return this;
  }
  setOptions(opt) {
    this.defaults = { ...this.defaults, ...opt };
    return this;
  }
  lexer(src, options2) {
    return _Lexer.lex(src, options2 ?? this.defaults);
  }
  parser(tokens, options2) {
    return _Parser.parse(tokens, options2 ?? this.defaults);
  }
};
_parseMarkdown = new WeakSet();
parseMarkdown_fn = function(lexer2, parser2) {
  return (src, options2) => {
    const origOpt = { ...options2 };
    const opt = { ...this.defaults, ...origOpt };
    if (this.defaults.async === true && origOpt.async === false) {
      if (!opt.silent) {
        console.warn("marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.");
      }
      opt.async = true;
    }
    const throwError = __privateMethod(this, _onError, onError_fn).call(this, !!opt.silent, !!opt.async);
    if (typeof src === "undefined" || src === null) {
      return throwError(new Error("marked(): input parameter is undefined or null"));
    }
    if (typeof src !== "string") {
      return throwError(new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src) + ", string expected"));
    }
    if (opt.hooks) {
      opt.hooks.options = opt;
    }
    if (opt.async) {
      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then((src2) => lexer2(src2, opt)).then((tokens) => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens).then((tokens) => parser2(tokens, opt)).then((html4) => opt.hooks ? opt.hooks.postprocess(html4) : html4).catch(throwError);
    }
    try {
      if (opt.hooks) {
        src = opt.hooks.preprocess(src);
      }
      const tokens = lexer2(src, opt);
      if (opt.walkTokens) {
        this.walkTokens(tokens, opt.walkTokens);
      }
      let html4 = parser2(tokens, opt);
      if (opt.hooks) {
        html4 = opt.hooks.postprocess(html4);
      }
      return html4;
    } catch (e) {
      return throwError(e);
    }
  };
};
_onError = new WeakSet();
onError_fn = function(silent, async) {
  return (e) => {
    e.message += "\nPlease report this to https://github.com/markedjs/marked.";
    if (silent) {
      const msg = "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
      if (async) {
        return Promise.resolve(msg);
      }
      return msg;
    }
    if (async) {
      return Promise.reject(e);
    }
    throw e;
  };
};
var markedInstance = new Marked();
function marked(src, opt) {
  return markedInstance.parse(src, opt);
}
marked.options = marked.setOptions = function(options2) {
  markedInstance.setOptions(options2);
  marked.defaults = markedInstance.defaults;
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = _getDefaults;
marked.defaults = _defaults;
marked.use = function(...args) {
  markedInstance.use(...args);
  marked.defaults = markedInstance.defaults;
  changeDefaults(marked.defaults);
  return marked;
};
marked.walkTokens = function(tokens, callback) {
  return markedInstance.walkTokens(tokens, callback);
};
marked.parseInline = markedInstance.parseInline;
marked.Parser = _Parser;
marked.parser = _Parser.parse;
marked.Renderer = _Renderer;
marked.TextRenderer = _TextRenderer;
marked.Lexer = _Lexer;
marked.lexer = _Lexer.lex;
marked.Tokenizer = _Tokenizer;
marked.Hooks = _Hooks;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parser = _Parser.parse;
var lexer = _Lexer.lex;

// node_modules/omni-ui/dist/component/omni-markdown/omni-markdown.js
var __defProp32 = Object.defineProperty;
var __getOwnPropDesc32 = Object.getOwnPropertyDescriptor;
var __decorateClass32 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc32(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp32(target, key, result);
  return result;
};
var styles27 = css`:host{font-size:var(--markdown-font-size, 1rem)}.omni p{padding-bottom:calc(1.65*var(--markdown-font-size, 1rem))}.omni p:last-child{padding-bottom:0}.omni .table td,.omni .table td{white-space:unset}.table-wrapper{max-width:100%;overflow-x:auto}.omni ol,.omni ul,.omni li{margin:revert;padding:revert;list-style:revert}`;
marked.use({
  renderer: {
    table(header, body) {
      if (body)
        body = `<tbody>${body}</tbody>`;
      return `<div class="table-wrapper"><table class="table m-3"><thead>${header}</thead>${body}</table></div>
`;
    },
    heading(text2, level) {
      return `<h${level} class="is-size-${level} mb-5">${text2}</h${level}>`;
    }
  }
});
var OmniMarkdown = class extends OmniElement {
  static get styles() {
    return [...super.styles, styles27];
  }
  willUpdate(changedProperties) {
    var _a7;
    if (changedProperties.has("markdown") && ((_a7 = this.markdown) == null ? void 0 : _a7.length) > 0) {
      this.rendered = purify.sanitize(marked.parse(this.markdown));
    }
  }
  render() {
    return html` <omni-style> ${unsafeHTML(this.rendered ?? "")} </omni-style> `;
  }
};
__decorateClass32([
  property({ type: String })
], OmniMarkdown.prototype, "markdown", 2);
__decorateClass32([
  state()
], OmniMarkdown.prototype, "rendered", 2);
OmniElement.register("omni-markdown", OmniMarkdown);

// node_modules/omni-ui/dist/component/omni-dot-loader/omni-dot-loader.js
var styles28 = css`:host{display:inline-block}.dot{display:inline-block;width:1em;height:1em;border-radius:50%;background-color:#99d9ed;align-self:flex-end}.dot-container{display:flex;flex-flow:row;width:6.2857em;height:1.6em}.dot-container>div{width:100%;display:flex;justify-content:center}.dot-container div:nth-child(1) .dot{animation:dotAnimation 1s 0s ease-in infinite}.dot-container div:nth-child(2) .dot{animation:dotAnimation 1s .25s ease-in infinite}.dot-container div:nth-child(3) .dot{animation:dotAnimation 1s .5s ease-in infinite}@keyframes dotAnimation{0%{transform:translate3d(0, 0, 0) scale3d(1, 1, 1);background-color:#cbdfee}20%{transform:translate3d(0, -0.428em, 0) scale3d(1.2857, 1.2857, 1);background-color:#19b8e9}40%{transform:translate3d(0, 0, 0) scale3d(1, 1, 1);background-color:#cbdfee}}`;
var OmniDotLoader = class extends OmniElement {
  static get styles() {
    return [...super.styles, styles28];
  }
  render() {
    return html`
      <omni-style>
        <div class="dot-container">
          <div><div class="dot"></div></div>
          <div><div class="dot"></div></div>
          <div><div class="dot"></div></div>
        </div>
      </omni-style>
    `;
  }
};
OmniElement.register("omni-dot-loader", OmniDotLoader);

// node_modules/omni-ui/dist/index.js
var version = "7.27.2";
if (Number.isNaN(parseInt(version, 10))) {
  version = "next";
}
window.omniUIVersions = window.omniUIVersions || [];
window.omniUIVersions.push(version);
var breakingChangeWarning = (versions) => {
  return !versions.map((v) => v.slice(0, 1)).every((v, i, arr) => v === arr[0]);
};
if (window.omniUIVersions.length > 1 || window.litHtmlVersions.length > 1 || window.litElementVersions.length > 1) {
  console.warn(
    `Omni UI: found multiple versions of one of the following base libraries:

      omni-ui (${window.omniUIVersions.join(", ")})
      lit-element (${window.litElementVersions.join(", ")})
      lit-html (${window.litHtmlVersions.join(", ")})
    `
  );
  if (breakingChangeWarning(window.omniUIVersions))
    console.warn(`You have different major versions of Omni-UI loaded. This may cause unexpected behavior.`);
}
export {
  AsyncDirective,
  ClickOutsideController,
  Color,
  contextConsumerMixin as ContextConsumerMixin,
  Directive,
  DocumentElementClipMixin,
  DragAndDropController,
  DraggableController,
  DraggableMixin,
  ImageAPI,
  LitElement,
  OmniAppLayout,
  OmniAppLayout as OmniAppLayoutElement,
  OmniBadge,
  OmniBadge as OmniBadgeElement,
  OmniCard,
  OmniCard as OmniCardElement,
  OmniCardGrid,
  OmniCardGrid as OmniCardGridElement,
  OmniCheckbox,
  OmniChip,
  OmniChip as OmniChipElement,
  OmniContextProvider,
  OmniContextProvider as OmniContextProviderElement,
  OmniDialog,
  OmniDialog as OmniDialogElement,
  OmniDotLoader,
  OmniDropdown,
  OmniElement,
  OmniIcon,
  OmniIconActions,
  OmniIcon as OmniIconElement,
  OmniImageInput,
  OmniImageInput as OmniImageInputElement,
  OmniImgUpload,
  OmniImgUpload as OmniImgUploadElement,
  OmniLoadingIndicator,
  OmniLoadingIndicator as OmniLoadingIndicatorElement,
  OmniMarkdown,
  OmniMediaEmbed,
  OmniModalProgress,
  OmniOptgroup,
  OmniOption,
  OmniOverlay,
  OmniProgressBar,
  OmniRadio,
  OmniRadioGroup,
  OmniRangeSlider,
  OmniSearch,
  OmniSearch as OmniSearchElement,
  OmniSelect,
  OmniStyle,
  OmniStyle as OmniStyleElement,
  OmniSwitch,
  OmniSwitch as OmniSwitchElement,
  OmniTable,
  OmniTable as OmniTableElement,
  OmniTextarea,
  OmniTheme,
  OmniTheme as OmniThemeElement,
  OmniTile,
  OmniTile as OmniTileElement,
  OmniToolbar,
  OmniToolbar as OmniToolbarElement,
  OmniTooltip,
  OmniTooltip as OmniTooltipElement,
  PartType,
  ReactiveElement,
  ScrollResetMixin,
  TemplateResultType,
  adoptStyles,
  areUrlsEqualish,
  asyncAppend,
  asyncReplace,
  cache,
  capitalizeFirstWord,
  choose,
  classMap,
  clearPart,
  createRef,
  css,
  cssImportAtRulePtn,
  customElement,
  dateToRelativeTimeString,
  dateToString,
  dateToTimeString,
  debounce,
  directive,
  documentElementClipController,
  eventOptions,
  fetchCSS,
  fetchJSON,
  fetchOmni,
  fetchText,
  fetching,
  generateToken,
  getCommittedValue,
  getDirectiveClass,
  getElementSize,
  guard,
  handleNestedDataSort,
  hashString,
  html,
  ifDefined,
  insertPart,
  isCompiledTemplateResult,
  isDirectiveResult,
  isGroupHeader,
  isPrimitive,
  isSingleExpression,
  isTemplateResult,
  join,
  keyed,
  live,
  map,
  memoize,
  merge,
  moveItemsInArray,
  nothing,
  omniStyleSheets,
  parseJWT,
  property,
  query,
  queryAll,
  queryAssignedElements,
  queryAssignedNodes,
  queryAsync,
  querySelectorDeep,
  range,
  ref,
  removePart,
  render,
  repeat,
  resizeImage,
  setChildPartValue,
  setCommittedValue,
  sort,
  sortNumber,
  sortObjects,
  sortString,
  ssoEnv,
  ssoHost,
  state,
  html2 as staticHtml,
  styleMap,
  styleSheetReplaceImport,
  styles_exports as styles,
  svg,
  templateContent,
  truncateFilename,
  unsafeCSS,
  unsafeHTML,
  unsafeSVG,
  unsafeStatic,
  until,
  userHasRole,
  when
};
/*! Bundled license information:

lit-html/development/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/class-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/custom-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/property.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/state.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/base.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/event-options.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/query.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/query-all.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/query-async.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/query-assigned-elements.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/query-assigned-nodes.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/style-map.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/when.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/if-defined.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directive-helpers.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/repeat.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/static.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/async-directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/private-async-helpers.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/async-replace.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/async-append.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/cache.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/choose.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/guard.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/join.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/keyed.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/live.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/map.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/range.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/ref.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/template-content.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/unsafe-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/unsafe-svg.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/until.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

dompurify/dist/purify.es.mjs:
  (*! @license DOMPurify 3.1.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.1.6/LICENSE *)
*/
//# sourceMappingURL=omni-ui.js.map
