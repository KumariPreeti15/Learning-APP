var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import { OmniIcon } from "../omni-icon/omni-icon.js";
import { css } from "lit";
const styles = css`:host([disabled]){cursor:not-allowed}details[disabled]{pointer-events:none;opacity:.5}details[open] summary.highlighted{background-color:#f5f8fb}details[open] summary.highlighted .header{color:var(--color-primary)}summary{display:flex;justify-content:space-between;padding:0.7142857143rem;width:100%;list-style:none;cursor:pointer;overflow:hidden}summary.left{justify-content:flex-start;flex-direction:row}summary.right{flex-direction:row-reverse}summary::marker,summary::-webkit-details-marker{display:none}.header{font-size:1rem;font-weight:600}.header.inline{display:flex;flex-direction:flex-start;align-items:baseline}.header.bottom{display:flex;flex-direction:column;justify-content:center}.subheader{font-size:0.8571428571rem;color:var(--color-core-medium)}.m-left{margin-left:0.7142857143rem}.m-top{margin-top:0.3571428571rem}omni-icon{height:1.4285714286rem;width:1.4285714286rem;margin-right:0.5714285714rem;margin-top:0.1428571429rem}`;
import { getElementSize } from "../../omni-util.js";
OmniIcon.register();
class OmniAccordion extends OmniElement {
  constructor() {
    super(...arguments);
    this.animateAccordion = false;
    this.open = false;
    this.name = "";
    this.variant = "default";
    this.header = "";
    this.subheader = "";
    this.subplacement = "inline";
    this.position = "left";
    this.disabled = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  async firstUpdated() {
    await this.updateComplete;
    this.animateAccordion && this.#calculateHeight();
  }
  updated(changed) {
    if (changed.has("open")) {
      if (this.open) {
        this._details.open = this.open;
      }
    }
  }
  #calculateHeight() {
    let sum = 0;
    this._body.assignedElements().forEach((el) => {
      sum += getElementSize(el).height;
    });
    const detailsHeight = getElementSize(this._details).height;
    if (this.open) {
      this._initialHeight = `${detailsHeight - sum}px`;
      this._finalHeight = `${detailsHeight}px`;
    } else {
      this._initialHeight = `${detailsHeight}px`;
      this._finalHeight = `${sum + detailsHeight}px`;
    }
  }
  async #animateAccordion() {
    const animateParams = this.open ? [{ height: this._initialHeight }, { height: this._finalHeight }] : [{ height: this._finalHeight }, { height: this._initialHeight }];
    const originalOverflow = this._details.style.overflow;
    this._details.style.overflow = "hidden";
    await this._details.animate(animateParams, {
      duration: 350,
      easing: "cubic-bezier(0.12, 1.09, 0.87, 0.98)"
    }).finished;
    this._details.style.overflow = originalOverflow;
  }
  async #handleClick(e) {
    if (this.animateAccordion) {
      e?.preventDefault();
      this.open = !this.open;
      if (this.open) {
        this._details.open = this.open;
      }
      await this.#animateAccordion();
      if (!this.open) {
        this._details.open = this.open;
      }
    }
  }
  #handleToggle(e) {
    if (!this.animateAccordion) {
      this.open = e.newState === "open";
      this.dispatchNewEvent("toggle", { detail: this.open });
    }
  }
  async close() {
    if (!this.open) return;
    this.open = false;
    if (this.animateAccordion) {
      await this.#animateAccordion();
    }
    this._details.open = false;
  }
  render() {
    return html`
      <details part="details" ?disabled=${this.disabled} @toggle=${this.#handleToggle}>
        <summary @click=${this.#handleClick} class=${this.position + " " + this.variant} part="summary">
          <omni-icon
            part="icon"
            aria-label="alert"
            icon-id=${this.open ? "omni:interactive:up" : "omni:interactive:down"}>
          </omni-icon>
          ${!this.header ? html`<slot name="summary"></slot>` : html` <div class="header ${this.subplacement}" part="header">
                ${this.header}
                <!-- subheader -->
                ${this.subheader ? html`<span
                      class="subheader 
                      ${this.subplacement === "inline" ? "m-left" : "m-top"}">
                      ${this.subheader}</span
                    >` : nothing}
              </div>`}
        </summary>
        <slot
          id="body"
          @slotchange=${() => {
      this.animateAccordion && this.#calculateHeight();
    }}></slot>
      </details>
    `;
  }
}
__decorateClass([
  query("details")
], OmniAccordion.prototype, "_details", 2);
__decorateClass([
  query("#body")
], OmniAccordion.prototype, "_body", 2);
__decorateClass([
  state()
], OmniAccordion.prototype, "_initialHeight", 2);
__decorateClass([
  state()
], OmniAccordion.prototype, "_finalHeight", 2);
__decorateClass([
  property({ type: Boolean, attribute: "animate-accordion" })
], OmniAccordion.prototype, "animateAccordion", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAccordion.prototype, "open", 2);
__decorateClass([
  property({ type: String })
], OmniAccordion.prototype, "name", 2);
__decorateClass([
  property({ type: String })
], OmniAccordion.prototype, "variant", 2);
__decorateClass([
  property({ type: String })
], OmniAccordion.prototype, "header", 2);
__decorateClass([
  property({ type: String })
], OmniAccordion.prototype, "subheader", 2);
__decorateClass([
  property({ type: String })
], OmniAccordion.prototype, "subplacement", 2);
__decorateClass([
  property({ type: String })
], OmniAccordion.prototype, "position", 2);
__decorateClass([
  property({ type: Boolean })
], OmniAccordion.prototype, "disabled", 2);
OmniElement.register("omni-accordion", OmniAccordion);
export {
  OmniAccordion
};
//# sourceMappingURL=omni-accordion.js.map
