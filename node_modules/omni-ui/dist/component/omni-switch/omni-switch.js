var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import { classMap } from "lit/directives/class-map.js";
import { css } from "lit";
const styles = css`:host{display:inline-block;--omni-switch-gap: pxToRem(12)}:host([disabled]){opacity:50%}.container{--generic-switch-focus: none;position:relative;height:auto;cursor:pointer}:host([disabled]) .container{cursor:not-allowed}.container{display:flex;align-items:center}.track{background-color:var(--color-shark);border-radius:0.8571428571rem;width:3.4285714286rem;height:1.7142857143rem;position:relative}.toggle{width:auto;height:auto}label{margin-right:0.7142857143rem}:not([name=end])::slotted(*){margin-right:var(--omni-switch-gap)}[name=end]{display:inline-block}[name=end]::slotted(*){margin-left:var(--omni-switch-gap)}.thumb{top:0;position:absolute;right:auto;margin:0.2142857143rem;border-radius:50%;background-color:#fff;height:1.2857142857rem;width:1.2857142857rem;transition:transform .1s ease}:host([checked]) .track{background-image:var(--gradient-electric-blue)}:host([checked][error]) .track{background-image:var(--gradient-error)}:host([checked]) .track::after{content:"";display:block;top:30%;left:20%;height:0.4285714286rem;width:0.7857142857rem;position:absolute;border-style:solid;border-color:#fff;border-width:0 0 0.0714285714rem 0.0714285714rem;transform:rotate(310deg)}:host([checked]) .thumb{transform:translateX(1.7142857143rem)}.toggle:focus{outline:0}.toggle:focus-visible{box-shadow:0 0 0 0.2142857143rem var(--color-electric-blue) !important;border-radius:0.8571428571rem}`;
class OmniSwitch extends OmniElement {
  constructor() {
    super(...arguments);
    this.checked = false;
    this.error = false;
    this.disabled = false;
    this.#handleKeyup = (e) => {
      if (e.key === "Enter") {
        this.#handleCheckedChanged();
      }
      if (e.key === "Escape") {
        this.blur();
      }
    };
  }
  static get styles() {
    return [...super.styles, styles];
  }
  connectedCallback() {
    super.connectedCallback();
    this.addEventListener("click", this.#handleCheckedChanged);
    this.addEventListener("keyup", this.#handleKeyup);
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.removeEventListener("click", this.#handleCheckedChanged);
    this.removeEventListener("keyup", this.#handleKeyup);
  }
  #handleCheckedChanged(e = null, toggle = !this.checked) {
    if (this.disabled) return;
    this.checked = toggle;
    const evtDetail = { detail: { checked: this.checked } };
    this.dispatchNewEvent("input", evtDetail);
    this.dispatchNewEvent("change", evtDetail);
  }
  #handleKeyup;
  render() {
    const classes = classMap({
      checked: this.checked,
      error: this.error
    });
    return html`
      <div class="container" part="container">
        <label> <slot></slot> </label>
        <div part="toggle" class="toggle ${classes}" tabindex="0">
          <div class="track"></div>
          <div class="thumb"></div>
        </div>
        <slot name="end"></slot>
      </div>
    `;
  }
}
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniSwitch.prototype, "checked", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniSwitch.prototype, "error", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniSwitch.prototype, "disabled", 2);
OmniElement.register("omni-switch", OmniSwitch);
export {
  OmniSwitch
};
//# sourceMappingURL=omni-switch.js.map
