var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
import { html } from "lit";
import { property, query, state } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";
import { OmniElement } from "../../omni-element.js";
import { css } from "lit";
const styles = css`:host{--left: 100px;--top: 100px;--z-index: 1000}dialog{border:none;border-radius:5px;padding:1rem}dialog[non-modal]{margin:0;border:none;border-radius:5px;z-index:var(--z-index);box-shadow:0 0 15px rgba(0,0,0,.1);position:fixed;left:var(--left);top:var(--top)}dialog::backdrop{background-color:rgba(0,0,0,.4)}dialog[cursor-pointer]::backdrop{background-color:rgba(0,0,0,.4)}header.has-header{border-bottom:1px solid #e9ecef;margin:0 -1rem;padding:0 1rem 1rem}`;
class OmniModal extends OmniElement {
  constructor() {
    super(...arguments);
    this._hasHeader = false;
    this._isModal = false;
    this.initialFocus = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  show() {
    this._isModal = false;
    this._dialogEl.show();
    if (this.initialFocus) {
      this._dialogEl.focus();
    }
  }
  showModal() {
    this._isModal = true;
    this._dialogEl.showModal();
    if (this.initialFocus) {
      this._dialogEl.focus();
    }
  }
  close() {
    this.dispatchNewEvent("cancel");
    return this._dialogEl.close();
  }
  #handleHeaderSlotChange(e) {
    this._hasHeader = e.target.assignedElements({ flatten: true }).length > 0;
  }
  render() {
    return html`
      <dialog part="dialog" ?non-modal=${!this._isModal}>
        <header class=${classMap({ "has-header": this._hasHeader })} part="header">
          <slot name="header" @slotchange=${this.#handleHeaderSlotChange}></slot>
        </header>
        <slot></slot>
        <slot name="footer"></slot>
      </dialog>
    `;
  }
}
__decorateClass([
  state()
], OmniModal.prototype, "_hasHeader", 2);
__decorateClass([
  state()
], OmniModal.prototype, "_isModal", 2);
__decorateClass([
  query("dialog")
], OmniModal.prototype, "_dialogEl", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniModal.prototype, "initialFocus", 2);
OmniElement.register("omni-modal", OmniModal);
export {
  OmniModal
};
//# sourceMappingURL=omni-modal.js.map
