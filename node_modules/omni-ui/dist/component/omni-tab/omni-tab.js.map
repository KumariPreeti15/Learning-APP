{
  "version": 3,
  "sources": ["../../../lib/component/omni-tab/omni-tab.ts"],
  "sourcesContent": ["import type { TemplateResult } from 'lit';\nimport { html, nothing } from 'lit';\nimport { property, query, state } from 'lit/decorators.js';\nimport { OmniElement } from '../../omni-element.js';\nimport '../omni-tile/omni-tile.js';\nimport '../omni-toolbar/omni-toolbar.js';\n\nimport {css} from 'lit';\nconst styles = css`omni-toolbar::part(center){flex-basis:100%}.disabled{cursor:not-allowed;pointer-events:none;opacity:.5}.display{display:none}`\n\n\nexport interface Tab {\n  label: string;\n  isActive: boolean;\n  isDisabled: boolean;\n}\n// any renderable content can be used for tab contents, including functions\n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\ntype Content = TemplateResult | (() => TemplateResult) | unknown;\n/**\n * Tile with built-in tabbed navigation. Content associated with tabs can be slotted and immediately\n * rendered or conditionally rendered on tab selection. An active tab can be persisted via URL query\n * params.\n *\n * To include within your project `import 'omni-ui/omni-tab.js'`\n *\n * @tagname omni-tab\n * @slot default - slot for always rendered content with tab-labels\n * @slot header-end - slot for additional header content\n * @event {{selectedIndex: number; queryParam?: string}} tab-change - fires when the user changes tabs\n */\nexport class OmniTab extends OmniElement {\n  static get styles() {\n    return [...super.styles, styles];\n  }\n\n  @state() private _selectedIndex: number = -1;\n  @query('slot#default-slot') private _slotElement: HTMLSlotElement;\n  /** an array of Tab objects used to define the clickable tabs  */\n  @property({ attribute: false }) tabs: Tab[] = [];\n  /** an array of any renderable value, including a function that returns a renderable value.\n   * See [Lit's Docs](https://lit.dev/docs/components/rendering/#renderable-values) for more info\n   */\n  @property({ attribute: false }) contents: Content[] = [];\n  /** when enabled, a query param will be appended to the browser's url to persist active tab across refreshes */\n  @property({ type: Boolean, reflect: true }) persist: boolean = false;\n\n  connectedCallback() {\n    super.connectedCallback();\n    let flag = false;\n    this.tabs = this.tabs.map((button: Tab, index: number) => {\n      if (button.isActive && !flag && !button.isDisabled) {\n        this._selectedIndex = index;\n        flag = true;\n      } else {\n        button.isActive = false;\n      }\n      return button;\n    });\n    if (this.persist) {\n      const currentTab = new URLSearchParams(window.location.search).get('omni-tab');\n      if (currentTab) {\n        this._selectedIndex = parseInt(currentTab);\n        this.#handleTabChange(this._selectedIndex);\n      }\n    }\n  }\n\n  firstUpdated() {\n    if (this.contents.length > 0) return;\n    this.#getTabButtons();\n    this.#updateTabContent();\n  }\n\n  get #tabs() {\n    return this.tabs.map((button: Tab, index: number) => {\n      return html`\n        <button\n          class=\"button ${button.isActive && !button.isDisabled ? 'is-primary' : 'is-text is-shadowless'}\"\n          @click=${() => {\n            this.#handleTabChange(index);\n          }}\n          ?disabled=${button.isDisabled}>\n          ${button.label}\n        </button>\n        <a\n          class=\"dropdown-item ${button.isActive && !button.isDisabled ? 'is-active' : ''} \n                ${button.isDisabled ? 'disabled' : ''}\"\n          slot=\"center-more-menu\"\n          ?disabled=${button.isDisabled}\n          @click=${() => {\n            this.#handleTabChange(index);\n          }}\n          >${button.label}</a\n        >\n      `;\n    });\n  }\n\n  get #contents() {\n    const content = this.contents[this._selectedIndex];\n    switch (typeof content) {\n      case 'function':\n        return content() as unknown;\n      default:\n        return content;\n    }\n  }\n\n  #handleTabChange(_selectedIndex: number) {\n    this.tabs = this.tabs.map((button: Tab, index) => {\n      if (_selectedIndex === index) button.isActive = true;\n      else button.isActive = false;\n      this._selectedIndex = _selectedIndex;\n      return button;\n    });\n    const url = new URL(window.location.href);\n    if (this.persist) {\n      url.searchParams.set('omni-tab', _selectedIndex.toString());\n      window.history.pushState({}, '', url.toString());\n    }\n    if (this.contents.length === 0) {\n      this.#updateTabContent();\n    }\n    this.dispatchNewEvent('tab-change', {\n      detail: {\n        selectedIndex: this._selectedIndex,\n        ...(this.persist ? { queryParam: `omni-tab=${this._selectedIndex}` } : {})\n      }\n    });\n  }\n\n  #getTabButtons() {\n    const buttons: Tab[] = [];\n    let flag = false;\n    this._slotElement.assignedElements().forEach((ele, index) => {\n      if (ele.hasAttribute('tab-label')) {\n        const button: Tab = {\n          label: ele.getAttribute('tab-label'),\n          isActive: ele.hasAttribute('active') && !ele.hasAttribute('disabled') && !flag ? (flag = true) : false,\n          isDisabled: ele.hasAttribute('disabled')\n        };\n        if (button.isActive) this._selectedIndex = index;\n        buttons.push(button);\n      }\n    });\n    this.tabs = buttons;\n  }\n\n  #updateTabContent() {\n    this.tabs.forEach((button: Tab, index: number) => {\n      const ref = this._slotElement.assignedElements()[index] as HTMLElement;\n      if (button.isActive) {\n        ref && (ref.style.display = '');\n      } else {\n        ref && (ref.style.display = 'none');\n      }\n    });\n  }\n\n  render() {\n    return html`\n      <omni-style>\n        <omni-tile>\n          <omni-toolbar slot=\"header\" part=\"header\">\n            ${this.#tabs}\n            <slot name=\"header-end\" slot=\"center-end\"></slot>\n          </omni-toolbar>\n          ${this.#contents}\n          ${!this.contents.length\n            ? html`<slot\n                id=\"default-slot\"\n                @slotchange=${() => {\n                  this.#getTabButtons();\n                  this.#updateTabContent();\n                }}></slot>`\n            : nothing}\n        </omni-tile>\n      </omni-style>\n    `;\n  }\n}\n\nOmniElement.register('omni-tab', OmniTab);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'omni-tab': OmniTab;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
