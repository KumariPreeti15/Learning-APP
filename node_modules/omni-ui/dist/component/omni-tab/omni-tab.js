var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
import { html, nothing } from "lit";
import { property, query, state } from "lit/decorators.js";
import { OmniElement } from "../../omni-element.js";
import "../omni-tile/omni-tile.js";
import "../omni-toolbar/omni-toolbar.js";
import { css } from "lit";
const styles = css`omni-toolbar::part(center){flex-basis:100%}.disabled{cursor:not-allowed;pointer-events:none;opacity:.5}.display{display:none}`;
class OmniTab extends OmniElement {
  constructor() {
    super(...arguments);
    this._selectedIndex = -1;
    this.tabs = [];
    this.contents = [];
    this.persist = false;
  }
  static get styles() {
    return [...super.styles, styles];
  }
  connectedCallback() {
    super.connectedCallback();
    let flag = false;
    this.tabs = this.tabs.map((button, index) => {
      if (button.isActive && !flag && !button.isDisabled) {
        this._selectedIndex = index;
        flag = true;
      } else {
        button.isActive = false;
      }
      return button;
    });
    if (this.persist) {
      const currentTab = new URLSearchParams(window.location.search).get("omni-tab");
      if (currentTab) {
        this._selectedIndex = parseInt(currentTab);
        this.#handleTabChange(this._selectedIndex);
      }
    }
  }
  firstUpdated() {
    if (this.contents.length > 0) return;
    this.#getTabButtons();
    this.#updateTabContent();
  }
  get #tabs() {
    return this.tabs.map((button, index) => {
      return html`
        <button
          class="button ${button.isActive && !button.isDisabled ? "is-primary" : "is-text is-shadowless"}"
          @click=${() => {
        this.#handleTabChange(index);
      }}
          ?disabled=${button.isDisabled}>
          ${button.label}
        </button>
        <a
          class="dropdown-item ${button.isActive && !button.isDisabled ? "is-active" : ""} 
                ${button.isDisabled ? "disabled" : ""}"
          slot="center-more-menu"
          ?disabled=${button.isDisabled}
          @click=${() => {
        this.#handleTabChange(index);
      }}
          >${button.label}</a
        >
      `;
    });
  }
  get #contents() {
    const content = this.contents[this._selectedIndex];
    switch (typeof content) {
      case "function":
        return content();
      default:
        return content;
    }
  }
  #handleTabChange(_selectedIndex) {
    this.tabs = this.tabs.map((button, index) => {
      if (_selectedIndex === index) button.isActive = true;
      else button.isActive = false;
      this._selectedIndex = _selectedIndex;
      return button;
    });
    const url = new URL(window.location.href);
    if (this.persist) {
      url.searchParams.set("omni-tab", _selectedIndex.toString());
      window.history.pushState({}, "", url.toString());
    }
    if (this.contents.length === 0) {
      this.#updateTabContent();
    }
    this.dispatchNewEvent("tab-change", {
      detail: {
        selectedIndex: this._selectedIndex,
        ...this.persist ? { queryParam: `omni-tab=${this._selectedIndex}` } : {}
      }
    });
  }
  #getTabButtons() {
    const buttons = [];
    let flag = false;
    this._slotElement.assignedElements().forEach((ele, index) => {
      if (ele.hasAttribute("tab-label")) {
        const button = {
          label: ele.getAttribute("tab-label"),
          isActive: ele.hasAttribute("active") && !ele.hasAttribute("disabled") && !flag ? flag = true : false,
          isDisabled: ele.hasAttribute("disabled")
        };
        if (button.isActive) this._selectedIndex = index;
        buttons.push(button);
      }
    });
    this.tabs = buttons;
  }
  #updateTabContent() {
    this.tabs.forEach((button, index) => {
      const ref = this._slotElement.assignedElements()[index];
      if (button.isActive) {
        ref && (ref.style.display = "");
      } else {
        ref && (ref.style.display = "none");
      }
    });
  }
  render() {
    return html`
      <omni-style>
        <omni-tile>
          <omni-toolbar slot="header" part="header">
            ${this.#tabs}
            <slot name="header-end" slot="center-end"></slot>
          </omni-toolbar>
          ${this.#contents}
          ${!this.contents.length ? html`<slot
                id="default-slot"
                @slotchange=${() => {
      this.#getTabButtons();
      this.#updateTabContent();
    }}></slot>` : nothing}
        </omni-tile>
      </omni-style>
    `;
  }
}
__decorateClass([
  state()
], OmniTab.prototype, "_selectedIndex", 2);
__decorateClass([
  query("slot#default-slot")
], OmniTab.prototype, "_slotElement", 2);
__decorateClass([
  property({ attribute: false })
], OmniTab.prototype, "tabs", 2);
__decorateClass([
  property({ attribute: false })
], OmniTab.prototype, "contents", 2);
__decorateClass([
  property({ type: Boolean, reflect: true })
], OmniTab.prototype, "persist", 2);
OmniElement.register("omni-tab", OmniTab);
export {
  OmniTab
};
//# sourceMappingURL=omni-tab.js.map
