import type { TemplateResult } from 'lit';
import { OmniElement } from '../../omni-element.js';
import '../omni-tile/omni-tile.js';
import '../omni-toolbar/omni-toolbar.js';
export interface Tab {
    label: string;
    isActive: boolean;
    isDisabled: boolean;
}
type Content = TemplateResult | (() => TemplateResult) | unknown;
/**
 * Tile with built-in tabbed navigation. Content associated with tabs can be slotted and immediately
 * rendered or conditionally rendered on tab selection. An active tab can be persisted via URL query
 * params.
 *
 * To include within your project `import 'omni-ui/omni-tab.js'`
 *
 * @tagname omni-tab
 * @slot default - slot for always rendered content with tab-labels
 * @slot header-end - slot for additional header content
 * @event {{selectedIndex: number; queryParam?: string}} tab-change - fires when the user changes tabs
 */
export declare class OmniTab extends OmniElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    private _selectedIndex;
    private _slotElement;
    /** an array of Tab objects used to define the clickable tabs  */
    tabs: Tab[];
    /** an array of any renderable value, including a function that returns a renderable value.
     * See [Lit's Docs](https://lit.dev/docs/components/rendering/#renderable-values) for more info
     */
    contents: Content[];
    /** when enabled, a query param will be appended to the browser's url to persist active tab across refreshes */
    persist: boolean;
    connectedCallback(): void;
    firstUpdated(): void;
    render(): TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-tab': OmniTab;
    }
}
export {};
//# sourceMappingURL=omni-tab.d.ts.map