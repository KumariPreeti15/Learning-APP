import { nothing } from 'lit';
import { OmniElement } from '../../omni-element.js';
import type { Option } from '../omni-dropdown/omni-dropdown.types.js';
import '../omni-options/omni-options.js';
/**
 * To include within your project `import { OmniSearch } from 'omni-ui';`
 *
 * **Basic Omni Icon Action Rendering**:
 *
 * ```html
 * <omni-style>
 *   <omni-search /@search-update = ${onFliter}
 *       inputDebounceTimer = 100
 *       ph = `Search`
 *       isopen
 *       .filteredOptions = [`abc`,`cde`]>
 *   </omni-search>
 * </omni-style>
 * ```
 *
 * ** Callback Function**:
 *
 * ```Js
 * filteredWords = filteredOptions;
 *
 * function onFliter(event){
 *   let value = event.detail.value;
 *   filteredWords = filteredOptions.filter((word) => {
 *      const val = typeof word === 'object' ? word.value : word;
 *      if(val.toLowerCase().trim().includes(value.toLowerCase())){
 *         return word;
 *      }
 *   })
 * }
 * ```
 * @tagname omni-search
 * @event {CustomEvent<string>} search-update - fires event when user types in search box
 */
export declare class OmniSearch extends OmniElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    isExpanded: boolean;
    value: string;
    /** placeholder for search input */
    ph: string;
    filteredOptions: Option[];
    isOpen: boolean;
    inputDebounceTimer: number;
    private _showFilterOptions;
    private _optionsStyle;
    private _inputField;
    connectedCallback(): Promise<void>;
    disconnectedCallback(): void;
    updated(changed: Map<string, unknown>): void;
    getInput(): HTMLInputElement | undefined;
    toggleSearch(flag?: boolean): Promise<void>;
    closeSearch(): void;
    updateSearch(): void;
    /** @internal */
    get xIconTemplate(): import("lit-html").TemplateResult<1> | typeof nothing;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-search': OmniSearch;
    }
}
//# sourceMappingURL=omni-search.d.ts.map