import { OmniElement } from '../../omni-element.js';
import type { KeyFn, NestedDataSortDetail, Sort, TableColumn, TableData, TableRow } from './omni-table.types.js';
/**
 * To include within your project `import { OmniTable } from 'omni-ui';`
 *
 * @tagname omni-table
 *
 * @event {CustomEvent<Sort | {data: TableData, sort: Sort}>} sort - fires when a column header is clicked
 * @event {TableRow} hover-row-enter - fires when a row is hovered
 * @event {TableRow} hover-row-exit - fires when a row is no longer hovered
 * @event {TableRow} expand-or-collapse-rows - fires when a row is expanded or collapsed
 * @event {{moveFromIdx: number, moveToIdx: number}} omni-drop - fires when a row is reordered
 */
declare class OmniTable extends OmniElement {
    #private;
    static get styles(): import("lit").CSSResult[];
    private _treeSet;
    private _highlightSet;
    private _hoverSet;
    private _nestedDataExists;
    /** number of pixels to indent each nested row */
    nestedIndent: number;
    /** override the defaultKeyFn to specify uniqueness for a row in the nested table. Similar to the Lit keyFn */
    keyFn: KeyFn;
    /** nested table expands all on load */
    expandAllOnLoad: boolean;
    /** hide nested indent for nested rows */
    hideNestedIndent: boolean;
    /** an array of column config objects */
    columns: TableColumn[];
    /** an array of row data objects */
    data: TableData;
    /** object to track current sort state */
    sort: Sort | Record<string, unknown>;
    /** enable dragging rows to reorder. This is intentionally spelled incorrectly to differentiate from the native 'draggable' attribute */
    dragAble: boolean;
    constructor();
    firstUpdated(): Promise<void>;
    willUpdate(changed: any): Promise<void>;
    private get _headersTemplate();
    private get _rowsTemplate();
    private _draggableCell;
    private _buildRow;
    private _cellTemplate;
    private _findColumn;
    private _headerCellClicked;
    /** toggle the highlight for a given row	*/
    toggleRowHighlight(row: TableRow): void;
    toggleRowExpansion(row: TableRow): void;
    /** if children exist, expands rows for provided array of rows	*/
    expandRows(rows: TableRow[]): void;
    /**if children exist, collapse rows for provided array of rows	*/
    collapseRows(rows: TableRow[]): void;
    /** collapse all rows with nested data */
    collapseAll(): void;
    /** expand all rows with nested data */
    expandAll(): void;
    toggleRowHover(row: TableRow): void;
    hoverRow(row: TableRow): void;
    removeHoverRow(row: TableRow): void;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'omni-table': OmniTable;
    }
}
declare function handleNestedDataSort({ detail: { data, sort } }: CustomEvent<NestedDataSortDetail>): NestedDataSortDetail;
export { OmniTable, handleNestedDataSort, type KeyFn, type NestedDataSortDetail, type Sort, type TableColumn, type TableData, type TableRow };
//# sourceMappingURL=omni-table.d.ts.map